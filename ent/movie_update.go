// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/movie"
	"github.com/PaluMacil/dan2/ent/movielist"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// MovieUpdate is the builder for updating Movie entities.
type MovieUpdate struct {
	config
	hooks    []Hook
	mutation *MovieMutation
}

// Where appends a list predicates to the MovieUpdate builder.
func (mu *MovieUpdate) Where(ps ...predicate.Movie) *MovieUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MovieUpdate) SetName(s string) *MovieUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNote sets the "note" field.
func (mu *MovieUpdate) SetNote(s string) *MovieUpdate {
	mu.mutation.SetNote(s)
	return mu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableNote(s *string) *MovieUpdate {
	if s != nil {
		mu.SetNote(*s)
	}
	return mu
}

// SetWatched sets the "watched" field.
func (mu *MovieUpdate) SetWatched(b bool) *MovieUpdate {
	mu.mutation.SetWatched(b)
	return mu
}

// SetNillableWatched sets the "watched" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableWatched(b *bool) *MovieUpdate {
	if b != nil {
		mu.SetWatched(*b)
	}
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MovieUpdate) SetCreatedAt(t time.Time) *MovieUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MovieUpdate) SetNillableCreatedAt(t *time.Time) *MovieUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetMovieListID sets the "movie_list" edge to the MovieList entity by ID.
func (mu *MovieUpdate) SetMovieListID(id int) *MovieUpdate {
	mu.mutation.SetMovieListID(id)
	return mu
}

// SetNillableMovieListID sets the "movie_list" edge to the MovieList entity by ID if the given value is not nil.
func (mu *MovieUpdate) SetNillableMovieListID(id *int) *MovieUpdate {
	if id != nil {
		mu = mu.SetMovieListID(*id)
	}
	return mu
}

// SetMovieList sets the "movie_list" edge to the MovieList entity.
func (mu *MovieUpdate) SetMovieList(m *MovieList) *MovieUpdate {
	return mu.SetMovieListID(m.ID)
}

// Mutation returns the MovieMutation object of the builder.
func (mu *MovieUpdate) Mutation() *MovieMutation {
	return mu.mutation
}

// ClearMovieList clears the "movie_list" edge to the MovieList entity.
func (mu *MovieUpdate) ClearMovieList() *MovieUpdate {
	mu.mutation.ClearMovieList()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MovieUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MovieUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MovieUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MovieUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MovieUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(movie.Table, movie.Columns, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(movie.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Note(); ok {
		_spec.SetField(movie.FieldNote, field.TypeString, value)
	}
	if value, ok := mu.mutation.Watched(); ok {
		_spec.SetField(movie.FieldWatched, field.TypeBool, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(movie.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.MovieListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movie.MovieListTable,
			Columns: []string{movie.MovieListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MovieListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movie.MovieListTable,
			Columns: []string{movie.MovieListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MovieUpdateOne is the builder for updating a single Movie entity.
type MovieUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovieMutation
}

// SetName sets the "name" field.
func (muo *MovieUpdateOne) SetName(s string) *MovieUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNote sets the "note" field.
func (muo *MovieUpdateOne) SetNote(s string) *MovieUpdateOne {
	muo.mutation.SetNote(s)
	return muo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableNote(s *string) *MovieUpdateOne {
	if s != nil {
		muo.SetNote(*s)
	}
	return muo
}

// SetWatched sets the "watched" field.
func (muo *MovieUpdateOne) SetWatched(b bool) *MovieUpdateOne {
	muo.mutation.SetWatched(b)
	return muo
}

// SetNillableWatched sets the "watched" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableWatched(b *bool) *MovieUpdateOne {
	if b != nil {
		muo.SetWatched(*b)
	}
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MovieUpdateOne) SetCreatedAt(t time.Time) *MovieUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableCreatedAt(t *time.Time) *MovieUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetMovieListID sets the "movie_list" edge to the MovieList entity by ID.
func (muo *MovieUpdateOne) SetMovieListID(id int) *MovieUpdateOne {
	muo.mutation.SetMovieListID(id)
	return muo
}

// SetNillableMovieListID sets the "movie_list" edge to the MovieList entity by ID if the given value is not nil.
func (muo *MovieUpdateOne) SetNillableMovieListID(id *int) *MovieUpdateOne {
	if id != nil {
		muo = muo.SetMovieListID(*id)
	}
	return muo
}

// SetMovieList sets the "movie_list" edge to the MovieList entity.
func (muo *MovieUpdateOne) SetMovieList(m *MovieList) *MovieUpdateOne {
	return muo.SetMovieListID(m.ID)
}

// Mutation returns the MovieMutation object of the builder.
func (muo *MovieUpdateOne) Mutation() *MovieMutation {
	return muo.mutation
}

// ClearMovieList clears the "movie_list" edge to the MovieList entity.
func (muo *MovieUpdateOne) ClearMovieList() *MovieUpdateOne {
	muo.mutation.ClearMovieList()
	return muo
}

// Where appends a list predicates to the MovieUpdate builder.
func (muo *MovieUpdateOne) Where(ps ...predicate.Movie) *MovieUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MovieUpdateOne) Select(field string, fields ...string) *MovieUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Movie entity.
func (muo *MovieUpdateOne) Save(ctx context.Context) (*Movie, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MovieUpdateOne) SaveX(ctx context.Context) *Movie {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MovieUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MovieUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MovieUpdateOne) sqlSave(ctx context.Context) (_node *Movie, err error) {
	_spec := sqlgraph.NewUpdateSpec(movie.Table, movie.Columns, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Movie.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, movie.FieldID)
		for _, f := range fields {
			if !movie.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != movie.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(movie.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Note(); ok {
		_spec.SetField(movie.FieldNote, field.TypeString, value)
	}
	if value, ok := muo.mutation.Watched(); ok {
		_spec.SetField(movie.FieldWatched, field.TypeBool, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(movie.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.MovieListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movie.MovieListTable,
			Columns: []string{movie.MovieListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MovieListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movie.MovieListTable,
			Columns: []string{movie.MovieListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Movie{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
