// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PaluMacil/dan2/ent/grocerylist"
	"github.com/PaluMacil/dan2/ent/grocerylistshare"
	"github.com/PaluMacil/dan2/ent/user"
)

// GroceryListShare is the model entity for the GroceryListShare schema.
type GroceryListShare struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CanEdit holds the value of the "can_edit" field.
	CanEdit bool `json:"can_edit,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroceryListShareQuery when eager-loading is set.
	Edges                            GroceryListShareEdges `json:"edges"`
	grocery_list_grocery_list_shares *int
	user_grocery_list_shares         *int
	selectValues                     sql.SelectValues
}

// GroceryListShareEdges holds the relations/edges for other nodes in the graph.
type GroceryListShareEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// GroceryList holds the value of the grocery_list edge.
	GroceryList *GroceryList `json:"grocery_list,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroceryListShareEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GroceryListOrErr returns the GroceryList value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroceryListShareEdges) GroceryListOrErr() (*GroceryList, error) {
	if e.loadedTypes[1] {
		if e.GroceryList == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: grocerylist.Label}
		}
		return e.GroceryList, nil
	}
	return nil, &NotLoadedError{edge: "grocery_list"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroceryListShare) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grocerylistshare.FieldCanEdit:
			values[i] = new(sql.NullBool)
		case grocerylistshare.FieldID:
			values[i] = new(sql.NullInt64)
		case grocerylistshare.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case grocerylistshare.ForeignKeys[0]: // grocery_list_grocery_list_shares
			values[i] = new(sql.NullInt64)
		case grocerylistshare.ForeignKeys[1]: // user_grocery_list_shares
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroceryListShare fields.
func (gls *GroceryListShare) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grocerylistshare.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gls.ID = int(value.Int64)
		case grocerylistshare.FieldCanEdit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_edit", values[i])
			} else if value.Valid {
				gls.CanEdit = value.Bool
			}
		case grocerylistshare.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gls.CreatedAt = value.Time
			}
		case grocerylistshare.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field grocery_list_grocery_list_shares", value)
			} else if value.Valid {
				gls.grocery_list_grocery_list_shares = new(int)
				*gls.grocery_list_grocery_list_shares = int(value.Int64)
			}
		case grocerylistshare.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_grocery_list_shares", value)
			} else if value.Valid {
				gls.user_grocery_list_shares = new(int)
				*gls.user_grocery_list_shares = int(value.Int64)
			}
		default:
			gls.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroceryListShare.
// This includes values selected through modifiers, order, etc.
func (gls *GroceryListShare) Value(name string) (ent.Value, error) {
	return gls.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the GroceryListShare entity.
func (gls *GroceryListShare) QueryUser() *UserQuery {
	return NewGroceryListShareClient(gls.config).QueryUser(gls)
}

// QueryGroceryList queries the "grocery_list" edge of the GroceryListShare entity.
func (gls *GroceryListShare) QueryGroceryList() *GroceryListQuery {
	return NewGroceryListShareClient(gls.config).QueryGroceryList(gls)
}

// Update returns a builder for updating this GroceryListShare.
// Note that you need to call GroceryListShare.Unwrap() before calling this method if this GroceryListShare
// was returned from a transaction, and the transaction was committed or rolled back.
func (gls *GroceryListShare) Update() *GroceryListShareUpdateOne {
	return NewGroceryListShareClient(gls.config).UpdateOne(gls)
}

// Unwrap unwraps the GroceryListShare entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gls *GroceryListShare) Unwrap() *GroceryListShare {
	_tx, ok := gls.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroceryListShare is not a transactional entity")
	}
	gls.config.driver = _tx.drv
	return gls
}

// String implements the fmt.Stringer.
func (gls *GroceryListShare) String() string {
	var builder strings.Builder
	builder.WriteString("GroceryListShare(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gls.ID))
	builder.WriteString("can_edit=")
	builder.WriteString(fmt.Sprintf("%v", gls.CanEdit))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gls.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GroceryListShares is a parsable slice of GroceryListShare.
type GroceryListShares []*GroceryListShare
