// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/moviecollection"
	"github.com/PaluMacil/dan2/ent/moviecollectionshare"
	"github.com/PaluMacil/dan2/ent/predicate"
	"github.com/PaluMacil/dan2/ent/user"
)

// MovieCollectionShareUpdate is the builder for updating MovieCollectionShare entities.
type MovieCollectionShareUpdate struct {
	config
	hooks    []Hook
	mutation *MovieCollectionShareMutation
}

// Where appends a list predicates to the MovieCollectionShareUpdate builder.
func (mcsu *MovieCollectionShareUpdate) Where(ps ...predicate.MovieCollectionShare) *MovieCollectionShareUpdate {
	mcsu.mutation.Where(ps...)
	return mcsu
}

// SetCanEdit sets the "can_edit" field.
func (mcsu *MovieCollectionShareUpdate) SetCanEdit(b bool) *MovieCollectionShareUpdate {
	mcsu.mutation.SetCanEdit(b)
	return mcsu
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (mcsu *MovieCollectionShareUpdate) SetNillableCanEdit(b *bool) *MovieCollectionShareUpdate {
	if b != nil {
		mcsu.SetCanEdit(*b)
	}
	return mcsu
}

// SetCreatedAt sets the "created_at" field.
func (mcsu *MovieCollectionShareUpdate) SetCreatedAt(t time.Time) *MovieCollectionShareUpdate {
	mcsu.mutation.SetCreatedAt(t)
	return mcsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mcsu *MovieCollectionShareUpdate) SetNillableCreatedAt(t *time.Time) *MovieCollectionShareUpdate {
	if t != nil {
		mcsu.SetCreatedAt(*t)
	}
	return mcsu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mcsu *MovieCollectionShareUpdate) SetUserID(id int) *MovieCollectionShareUpdate {
	mcsu.mutation.SetUserID(id)
	return mcsu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mcsu *MovieCollectionShareUpdate) SetNillableUserID(id *int) *MovieCollectionShareUpdate {
	if id != nil {
		mcsu = mcsu.SetUserID(*id)
	}
	return mcsu
}

// SetUser sets the "user" edge to the User entity.
func (mcsu *MovieCollectionShareUpdate) SetUser(u *User) *MovieCollectionShareUpdate {
	return mcsu.SetUserID(u.ID)
}

// SetMovieCollectionID sets the "movie_collection" edge to the MovieCollection entity by ID.
func (mcsu *MovieCollectionShareUpdate) SetMovieCollectionID(id int) *MovieCollectionShareUpdate {
	mcsu.mutation.SetMovieCollectionID(id)
	return mcsu
}

// SetNillableMovieCollectionID sets the "movie_collection" edge to the MovieCollection entity by ID if the given value is not nil.
func (mcsu *MovieCollectionShareUpdate) SetNillableMovieCollectionID(id *int) *MovieCollectionShareUpdate {
	if id != nil {
		mcsu = mcsu.SetMovieCollectionID(*id)
	}
	return mcsu
}

// SetMovieCollection sets the "movie_collection" edge to the MovieCollection entity.
func (mcsu *MovieCollectionShareUpdate) SetMovieCollection(m *MovieCollection) *MovieCollectionShareUpdate {
	return mcsu.SetMovieCollectionID(m.ID)
}

// Mutation returns the MovieCollectionShareMutation object of the builder.
func (mcsu *MovieCollectionShareUpdate) Mutation() *MovieCollectionShareMutation {
	return mcsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mcsu *MovieCollectionShareUpdate) ClearUser() *MovieCollectionShareUpdate {
	mcsu.mutation.ClearUser()
	return mcsu
}

// ClearMovieCollection clears the "movie_collection" edge to the MovieCollection entity.
func (mcsu *MovieCollectionShareUpdate) ClearMovieCollection() *MovieCollectionShareUpdate {
	mcsu.mutation.ClearMovieCollection()
	return mcsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcsu *MovieCollectionShareUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mcsu.sqlSave, mcsu.mutation, mcsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcsu *MovieCollectionShareUpdate) SaveX(ctx context.Context) int {
	affected, err := mcsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcsu *MovieCollectionShareUpdate) Exec(ctx context.Context) error {
	_, err := mcsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcsu *MovieCollectionShareUpdate) ExecX(ctx context.Context) {
	if err := mcsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mcsu *MovieCollectionShareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(moviecollectionshare.Table, moviecollectionshare.Columns, sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt))
	if ps := mcsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcsu.mutation.CanEdit(); ok {
		_spec.SetField(moviecollectionshare.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := mcsu.mutation.CreatedAt(); ok {
		_spec.SetField(moviecollectionshare.FieldCreatedAt, field.TypeTime, value)
	}
	if mcsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviecollectionshare.UserTable,
			Columns: []string{moviecollectionshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviecollectionshare.UserTable,
			Columns: []string{moviecollectionshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcsu.mutation.MovieCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviecollectionshare.MovieCollectionTable,
			Columns: []string{moviecollectionshare.MovieCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcsu.mutation.MovieCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviecollectionshare.MovieCollectionTable,
			Columns: []string{moviecollectionshare.MovieCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mcsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moviecollectionshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mcsu.mutation.done = true
	return n, nil
}

// MovieCollectionShareUpdateOne is the builder for updating a single MovieCollectionShare entity.
type MovieCollectionShareUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovieCollectionShareMutation
}

// SetCanEdit sets the "can_edit" field.
func (mcsuo *MovieCollectionShareUpdateOne) SetCanEdit(b bool) *MovieCollectionShareUpdateOne {
	mcsuo.mutation.SetCanEdit(b)
	return mcsuo
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (mcsuo *MovieCollectionShareUpdateOne) SetNillableCanEdit(b *bool) *MovieCollectionShareUpdateOne {
	if b != nil {
		mcsuo.SetCanEdit(*b)
	}
	return mcsuo
}

// SetCreatedAt sets the "created_at" field.
func (mcsuo *MovieCollectionShareUpdateOne) SetCreatedAt(t time.Time) *MovieCollectionShareUpdateOne {
	mcsuo.mutation.SetCreatedAt(t)
	return mcsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mcsuo *MovieCollectionShareUpdateOne) SetNillableCreatedAt(t *time.Time) *MovieCollectionShareUpdateOne {
	if t != nil {
		mcsuo.SetCreatedAt(*t)
	}
	return mcsuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mcsuo *MovieCollectionShareUpdateOne) SetUserID(id int) *MovieCollectionShareUpdateOne {
	mcsuo.mutation.SetUserID(id)
	return mcsuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mcsuo *MovieCollectionShareUpdateOne) SetNillableUserID(id *int) *MovieCollectionShareUpdateOne {
	if id != nil {
		mcsuo = mcsuo.SetUserID(*id)
	}
	return mcsuo
}

// SetUser sets the "user" edge to the User entity.
func (mcsuo *MovieCollectionShareUpdateOne) SetUser(u *User) *MovieCollectionShareUpdateOne {
	return mcsuo.SetUserID(u.ID)
}

// SetMovieCollectionID sets the "movie_collection" edge to the MovieCollection entity by ID.
func (mcsuo *MovieCollectionShareUpdateOne) SetMovieCollectionID(id int) *MovieCollectionShareUpdateOne {
	mcsuo.mutation.SetMovieCollectionID(id)
	return mcsuo
}

// SetNillableMovieCollectionID sets the "movie_collection" edge to the MovieCollection entity by ID if the given value is not nil.
func (mcsuo *MovieCollectionShareUpdateOne) SetNillableMovieCollectionID(id *int) *MovieCollectionShareUpdateOne {
	if id != nil {
		mcsuo = mcsuo.SetMovieCollectionID(*id)
	}
	return mcsuo
}

// SetMovieCollection sets the "movie_collection" edge to the MovieCollection entity.
func (mcsuo *MovieCollectionShareUpdateOne) SetMovieCollection(m *MovieCollection) *MovieCollectionShareUpdateOne {
	return mcsuo.SetMovieCollectionID(m.ID)
}

// Mutation returns the MovieCollectionShareMutation object of the builder.
func (mcsuo *MovieCollectionShareUpdateOne) Mutation() *MovieCollectionShareMutation {
	return mcsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mcsuo *MovieCollectionShareUpdateOne) ClearUser() *MovieCollectionShareUpdateOne {
	mcsuo.mutation.ClearUser()
	return mcsuo
}

// ClearMovieCollection clears the "movie_collection" edge to the MovieCollection entity.
func (mcsuo *MovieCollectionShareUpdateOne) ClearMovieCollection() *MovieCollectionShareUpdateOne {
	mcsuo.mutation.ClearMovieCollection()
	return mcsuo
}

// Where appends a list predicates to the MovieCollectionShareUpdate builder.
func (mcsuo *MovieCollectionShareUpdateOne) Where(ps ...predicate.MovieCollectionShare) *MovieCollectionShareUpdateOne {
	mcsuo.mutation.Where(ps...)
	return mcsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcsuo *MovieCollectionShareUpdateOne) Select(field string, fields ...string) *MovieCollectionShareUpdateOne {
	mcsuo.fields = append([]string{field}, fields...)
	return mcsuo
}

// Save executes the query and returns the updated MovieCollectionShare entity.
func (mcsuo *MovieCollectionShareUpdateOne) Save(ctx context.Context) (*MovieCollectionShare, error) {
	return withHooks(ctx, mcsuo.sqlSave, mcsuo.mutation, mcsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcsuo *MovieCollectionShareUpdateOne) SaveX(ctx context.Context) *MovieCollectionShare {
	node, err := mcsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcsuo *MovieCollectionShareUpdateOne) Exec(ctx context.Context) error {
	_, err := mcsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcsuo *MovieCollectionShareUpdateOne) ExecX(ctx context.Context) {
	if err := mcsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mcsuo *MovieCollectionShareUpdateOne) sqlSave(ctx context.Context) (_node *MovieCollectionShare, err error) {
	_spec := sqlgraph.NewUpdateSpec(moviecollectionshare.Table, moviecollectionshare.Columns, sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt))
	id, ok := mcsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MovieCollectionShare.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mcsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moviecollectionshare.FieldID)
		for _, f := range fields {
			if !moviecollectionshare.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != moviecollectionshare.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcsuo.mutation.CanEdit(); ok {
		_spec.SetField(moviecollectionshare.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := mcsuo.mutation.CreatedAt(); ok {
		_spec.SetField(moviecollectionshare.FieldCreatedAt, field.TypeTime, value)
	}
	if mcsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviecollectionshare.UserTable,
			Columns: []string{moviecollectionshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviecollectionshare.UserTable,
			Columns: []string{moviecollectionshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mcsuo.mutation.MovieCollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviecollectionshare.MovieCollectionTable,
			Columns: []string{moviecollectionshare.MovieCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mcsuo.mutation.MovieCollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moviecollectionshare.MovieCollectionTable,
			Columns: []string{moviecollectionshare.MovieCollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MovieCollectionShare{config: mcsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moviecollectionshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mcsuo.mutation.done = true
	return _node, nil
}
