// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/grocerylist"
	"github.com/PaluMacil/dan2/ent/grocerylistitem"
	"github.com/PaluMacil/dan2/ent/grocerylistshare"
	"github.com/PaluMacil/dan2/ent/predicate"
	"github.com/PaluMacil/dan2/ent/user"
)

// GroceryListUpdate is the builder for updating GroceryList entities.
type GroceryListUpdate struct {
	config
	hooks    []Hook
	mutation *GroceryListMutation
}

// Where appends a list predicates to the GroceryListUpdate builder.
func (glu *GroceryListUpdate) Where(ps ...predicate.GroceryList) *GroceryListUpdate {
	glu.mutation.Where(ps...)
	return glu
}

// SetName sets the "name" field.
func (glu *GroceryListUpdate) SetName(s string) *GroceryListUpdate {
	glu.mutation.SetName(s)
	return glu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (glu *GroceryListUpdate) SetNillableName(s *string) *GroceryListUpdate {
	if s != nil {
		glu.SetName(*s)
	}
	return glu
}

// SetNote sets the "note" field.
func (glu *GroceryListUpdate) SetNote(s string) *GroceryListUpdate {
	glu.mutation.SetNote(s)
	return glu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (glu *GroceryListUpdate) SetNillableNote(s *string) *GroceryListUpdate {
	if s != nil {
		glu.SetNote(*s)
	}
	return glu
}

// SetArchived sets the "archived" field.
func (glu *GroceryListUpdate) SetArchived(b bool) *GroceryListUpdate {
	glu.mutation.SetArchived(b)
	return glu
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (glu *GroceryListUpdate) SetNillableArchived(b *bool) *GroceryListUpdate {
	if b != nil {
		glu.SetArchived(*b)
	}
	return glu
}

// SetCreatedAt sets the "created_at" field.
func (glu *GroceryListUpdate) SetCreatedAt(t time.Time) *GroceryListUpdate {
	glu.mutation.SetCreatedAt(t)
	return glu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (glu *GroceryListUpdate) SetNillableCreatedAt(t *time.Time) *GroceryListUpdate {
	if t != nil {
		glu.SetCreatedAt(*t)
	}
	return glu
}

// AddGroceryListItemIDs adds the "grocery_list_items" edge to the GroceryListItem entity by IDs.
func (glu *GroceryListUpdate) AddGroceryListItemIDs(ids ...int) *GroceryListUpdate {
	glu.mutation.AddGroceryListItemIDs(ids...)
	return glu
}

// AddGroceryListItems adds the "grocery_list_items" edges to the GroceryListItem entity.
func (glu *GroceryListUpdate) AddGroceryListItems(g ...*GroceryListItem) *GroceryListUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return glu.AddGroceryListItemIDs(ids...)
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (glu *GroceryListUpdate) AddOwnerIDs(ids ...int) *GroceryListUpdate {
	glu.mutation.AddOwnerIDs(ids...)
	return glu
}

// AddOwner adds the "owner" edges to the User entity.
func (glu *GroceryListUpdate) AddOwner(u ...*User) *GroceryListUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return glu.AddOwnerIDs(ids...)
}

// AddGroceryListShareIDs adds the "grocery_list_shares" edge to the GroceryListShare entity by IDs.
func (glu *GroceryListUpdate) AddGroceryListShareIDs(ids ...int) *GroceryListUpdate {
	glu.mutation.AddGroceryListShareIDs(ids...)
	return glu
}

// AddGroceryListShares adds the "grocery_list_shares" edges to the GroceryListShare entity.
func (glu *GroceryListUpdate) AddGroceryListShares(g ...*GroceryListShare) *GroceryListUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return glu.AddGroceryListShareIDs(ids...)
}

// Mutation returns the GroceryListMutation object of the builder.
func (glu *GroceryListUpdate) Mutation() *GroceryListMutation {
	return glu.mutation
}

// ClearGroceryListItems clears all "grocery_list_items" edges to the GroceryListItem entity.
func (glu *GroceryListUpdate) ClearGroceryListItems() *GroceryListUpdate {
	glu.mutation.ClearGroceryListItems()
	return glu
}

// RemoveGroceryListItemIDs removes the "grocery_list_items" edge to GroceryListItem entities by IDs.
func (glu *GroceryListUpdate) RemoveGroceryListItemIDs(ids ...int) *GroceryListUpdate {
	glu.mutation.RemoveGroceryListItemIDs(ids...)
	return glu
}

// RemoveGroceryListItems removes "grocery_list_items" edges to GroceryListItem entities.
func (glu *GroceryListUpdate) RemoveGroceryListItems(g ...*GroceryListItem) *GroceryListUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return glu.RemoveGroceryListItemIDs(ids...)
}

// ClearOwner clears all "owner" edges to the User entity.
func (glu *GroceryListUpdate) ClearOwner() *GroceryListUpdate {
	glu.mutation.ClearOwner()
	return glu
}

// RemoveOwnerIDs removes the "owner" edge to User entities by IDs.
func (glu *GroceryListUpdate) RemoveOwnerIDs(ids ...int) *GroceryListUpdate {
	glu.mutation.RemoveOwnerIDs(ids...)
	return glu
}

// RemoveOwner removes "owner" edges to User entities.
func (glu *GroceryListUpdate) RemoveOwner(u ...*User) *GroceryListUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return glu.RemoveOwnerIDs(ids...)
}

// ClearGroceryListShares clears all "grocery_list_shares" edges to the GroceryListShare entity.
func (glu *GroceryListUpdate) ClearGroceryListShares() *GroceryListUpdate {
	glu.mutation.ClearGroceryListShares()
	return glu
}

// RemoveGroceryListShareIDs removes the "grocery_list_shares" edge to GroceryListShare entities by IDs.
func (glu *GroceryListUpdate) RemoveGroceryListShareIDs(ids ...int) *GroceryListUpdate {
	glu.mutation.RemoveGroceryListShareIDs(ids...)
	return glu
}

// RemoveGroceryListShares removes "grocery_list_shares" edges to GroceryListShare entities.
func (glu *GroceryListUpdate) RemoveGroceryListShares(g ...*GroceryListShare) *GroceryListUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return glu.RemoveGroceryListShareIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (glu *GroceryListUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, glu.sqlSave, glu.mutation, glu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (glu *GroceryListUpdate) SaveX(ctx context.Context) int {
	affected, err := glu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (glu *GroceryListUpdate) Exec(ctx context.Context) error {
	_, err := glu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glu *GroceryListUpdate) ExecX(ctx context.Context) {
	if err := glu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (glu *GroceryListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(grocerylist.Table, grocerylist.Columns, sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt))
	if ps := glu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := glu.mutation.Name(); ok {
		_spec.SetField(grocerylist.FieldName, field.TypeString, value)
	}
	if value, ok := glu.mutation.Note(); ok {
		_spec.SetField(grocerylist.FieldNote, field.TypeString, value)
	}
	if value, ok := glu.mutation.Archived(); ok {
		_spec.SetField(grocerylist.FieldArchived, field.TypeBool, value)
	}
	if value, ok := glu.mutation.CreatedAt(); ok {
		_spec.SetField(grocerylist.FieldCreatedAt, field.TypeTime, value)
	}
	if glu.mutation.GroceryListItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListItemsTable,
			Columns: grocerylist.GroceryListItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glu.mutation.RemovedGroceryListItemsIDs(); len(nodes) > 0 && !glu.mutation.GroceryListItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListItemsTable,
			Columns: grocerylist.GroceryListItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glu.mutation.GroceryListItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListItemsTable,
			Columns: grocerylist.GroceryListItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if glu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.OwnerTable,
			Columns: grocerylist.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glu.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !glu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.OwnerTable,
			Columns: grocerylist.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.OwnerTable,
			Columns: grocerylist.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if glu.mutation.GroceryListSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListSharesTable,
			Columns: grocerylist.GroceryListSharesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glu.mutation.RemovedGroceryListSharesIDs(); len(nodes) > 0 && !glu.mutation.GroceryListSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListSharesTable,
			Columns: grocerylist.GroceryListSharesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glu.mutation.GroceryListSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListSharesTable,
			Columns: grocerylist.GroceryListSharesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, glu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grocerylist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	glu.mutation.done = true
	return n, nil
}

// GroceryListUpdateOne is the builder for updating a single GroceryList entity.
type GroceryListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroceryListMutation
}

// SetName sets the "name" field.
func (gluo *GroceryListUpdateOne) SetName(s string) *GroceryListUpdateOne {
	gluo.mutation.SetName(s)
	return gluo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gluo *GroceryListUpdateOne) SetNillableName(s *string) *GroceryListUpdateOne {
	if s != nil {
		gluo.SetName(*s)
	}
	return gluo
}

// SetNote sets the "note" field.
func (gluo *GroceryListUpdateOne) SetNote(s string) *GroceryListUpdateOne {
	gluo.mutation.SetNote(s)
	return gluo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (gluo *GroceryListUpdateOne) SetNillableNote(s *string) *GroceryListUpdateOne {
	if s != nil {
		gluo.SetNote(*s)
	}
	return gluo
}

// SetArchived sets the "archived" field.
func (gluo *GroceryListUpdateOne) SetArchived(b bool) *GroceryListUpdateOne {
	gluo.mutation.SetArchived(b)
	return gluo
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (gluo *GroceryListUpdateOne) SetNillableArchived(b *bool) *GroceryListUpdateOne {
	if b != nil {
		gluo.SetArchived(*b)
	}
	return gluo
}

// SetCreatedAt sets the "created_at" field.
func (gluo *GroceryListUpdateOne) SetCreatedAt(t time.Time) *GroceryListUpdateOne {
	gluo.mutation.SetCreatedAt(t)
	return gluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gluo *GroceryListUpdateOne) SetNillableCreatedAt(t *time.Time) *GroceryListUpdateOne {
	if t != nil {
		gluo.SetCreatedAt(*t)
	}
	return gluo
}

// AddGroceryListItemIDs adds the "grocery_list_items" edge to the GroceryListItem entity by IDs.
func (gluo *GroceryListUpdateOne) AddGroceryListItemIDs(ids ...int) *GroceryListUpdateOne {
	gluo.mutation.AddGroceryListItemIDs(ids...)
	return gluo
}

// AddGroceryListItems adds the "grocery_list_items" edges to the GroceryListItem entity.
func (gluo *GroceryListUpdateOne) AddGroceryListItems(g ...*GroceryListItem) *GroceryListUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gluo.AddGroceryListItemIDs(ids...)
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (gluo *GroceryListUpdateOne) AddOwnerIDs(ids ...int) *GroceryListUpdateOne {
	gluo.mutation.AddOwnerIDs(ids...)
	return gluo
}

// AddOwner adds the "owner" edges to the User entity.
func (gluo *GroceryListUpdateOne) AddOwner(u ...*User) *GroceryListUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gluo.AddOwnerIDs(ids...)
}

// AddGroceryListShareIDs adds the "grocery_list_shares" edge to the GroceryListShare entity by IDs.
func (gluo *GroceryListUpdateOne) AddGroceryListShareIDs(ids ...int) *GroceryListUpdateOne {
	gluo.mutation.AddGroceryListShareIDs(ids...)
	return gluo
}

// AddGroceryListShares adds the "grocery_list_shares" edges to the GroceryListShare entity.
func (gluo *GroceryListUpdateOne) AddGroceryListShares(g ...*GroceryListShare) *GroceryListUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gluo.AddGroceryListShareIDs(ids...)
}

// Mutation returns the GroceryListMutation object of the builder.
func (gluo *GroceryListUpdateOne) Mutation() *GroceryListMutation {
	return gluo.mutation
}

// ClearGroceryListItems clears all "grocery_list_items" edges to the GroceryListItem entity.
func (gluo *GroceryListUpdateOne) ClearGroceryListItems() *GroceryListUpdateOne {
	gluo.mutation.ClearGroceryListItems()
	return gluo
}

// RemoveGroceryListItemIDs removes the "grocery_list_items" edge to GroceryListItem entities by IDs.
func (gluo *GroceryListUpdateOne) RemoveGroceryListItemIDs(ids ...int) *GroceryListUpdateOne {
	gluo.mutation.RemoveGroceryListItemIDs(ids...)
	return gluo
}

// RemoveGroceryListItems removes "grocery_list_items" edges to GroceryListItem entities.
func (gluo *GroceryListUpdateOne) RemoveGroceryListItems(g ...*GroceryListItem) *GroceryListUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gluo.RemoveGroceryListItemIDs(ids...)
}

// ClearOwner clears all "owner" edges to the User entity.
func (gluo *GroceryListUpdateOne) ClearOwner() *GroceryListUpdateOne {
	gluo.mutation.ClearOwner()
	return gluo
}

// RemoveOwnerIDs removes the "owner" edge to User entities by IDs.
func (gluo *GroceryListUpdateOne) RemoveOwnerIDs(ids ...int) *GroceryListUpdateOne {
	gluo.mutation.RemoveOwnerIDs(ids...)
	return gluo
}

// RemoveOwner removes "owner" edges to User entities.
func (gluo *GroceryListUpdateOne) RemoveOwner(u ...*User) *GroceryListUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gluo.RemoveOwnerIDs(ids...)
}

// ClearGroceryListShares clears all "grocery_list_shares" edges to the GroceryListShare entity.
func (gluo *GroceryListUpdateOne) ClearGroceryListShares() *GroceryListUpdateOne {
	gluo.mutation.ClearGroceryListShares()
	return gluo
}

// RemoveGroceryListShareIDs removes the "grocery_list_shares" edge to GroceryListShare entities by IDs.
func (gluo *GroceryListUpdateOne) RemoveGroceryListShareIDs(ids ...int) *GroceryListUpdateOne {
	gluo.mutation.RemoveGroceryListShareIDs(ids...)
	return gluo
}

// RemoveGroceryListShares removes "grocery_list_shares" edges to GroceryListShare entities.
func (gluo *GroceryListUpdateOne) RemoveGroceryListShares(g ...*GroceryListShare) *GroceryListUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gluo.RemoveGroceryListShareIDs(ids...)
}

// Where appends a list predicates to the GroceryListUpdate builder.
func (gluo *GroceryListUpdateOne) Where(ps ...predicate.GroceryList) *GroceryListUpdateOne {
	gluo.mutation.Where(ps...)
	return gluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gluo *GroceryListUpdateOne) Select(field string, fields ...string) *GroceryListUpdateOne {
	gluo.fields = append([]string{field}, fields...)
	return gluo
}

// Save executes the query and returns the updated GroceryList entity.
func (gluo *GroceryListUpdateOne) Save(ctx context.Context) (*GroceryList, error) {
	return withHooks(ctx, gluo.sqlSave, gluo.mutation, gluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gluo *GroceryListUpdateOne) SaveX(ctx context.Context) *GroceryList {
	node, err := gluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gluo *GroceryListUpdateOne) Exec(ctx context.Context) error {
	_, err := gluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gluo *GroceryListUpdateOne) ExecX(ctx context.Context) {
	if err := gluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gluo *GroceryListUpdateOne) sqlSave(ctx context.Context) (_node *GroceryList, err error) {
	_spec := sqlgraph.NewUpdateSpec(grocerylist.Table, grocerylist.Columns, sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt))
	id, ok := gluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroceryList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grocerylist.FieldID)
		for _, f := range fields {
			if !grocerylist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grocerylist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gluo.mutation.Name(); ok {
		_spec.SetField(grocerylist.FieldName, field.TypeString, value)
	}
	if value, ok := gluo.mutation.Note(); ok {
		_spec.SetField(grocerylist.FieldNote, field.TypeString, value)
	}
	if value, ok := gluo.mutation.Archived(); ok {
		_spec.SetField(grocerylist.FieldArchived, field.TypeBool, value)
	}
	if value, ok := gluo.mutation.CreatedAt(); ok {
		_spec.SetField(grocerylist.FieldCreatedAt, field.TypeTime, value)
	}
	if gluo.mutation.GroceryListItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListItemsTable,
			Columns: grocerylist.GroceryListItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gluo.mutation.RemovedGroceryListItemsIDs(); len(nodes) > 0 && !gluo.mutation.GroceryListItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListItemsTable,
			Columns: grocerylist.GroceryListItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gluo.mutation.GroceryListItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListItemsTable,
			Columns: grocerylist.GroceryListItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gluo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.OwnerTable,
			Columns: grocerylist.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gluo.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !gluo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.OwnerTable,
			Columns: grocerylist.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gluo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylist.OwnerTable,
			Columns: grocerylist.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gluo.mutation.GroceryListSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListSharesTable,
			Columns: grocerylist.GroceryListSharesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gluo.mutation.RemovedGroceryListSharesIDs(); len(nodes) > 0 && !gluo.mutation.GroceryListSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListSharesTable,
			Columns: grocerylist.GroceryListSharesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gluo.mutation.GroceryListSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grocerylist.GroceryListSharesTable,
			Columns: grocerylist.GroceryListSharesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroceryList{config: gluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grocerylist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gluo.mutation.done = true
	return _node, nil
}
