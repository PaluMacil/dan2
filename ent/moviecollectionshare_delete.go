// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/moviecollectionshare"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// MovieCollectionShareDelete is the builder for deleting a MovieCollectionShare entity.
type MovieCollectionShareDelete struct {
	config
	hooks    []Hook
	mutation *MovieCollectionShareMutation
}

// Where appends a list predicates to the MovieCollectionShareDelete builder.
func (mcsd *MovieCollectionShareDelete) Where(ps ...predicate.MovieCollectionShare) *MovieCollectionShareDelete {
	mcsd.mutation.Where(ps...)
	return mcsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mcsd *MovieCollectionShareDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mcsd.sqlExec, mcsd.mutation, mcsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mcsd *MovieCollectionShareDelete) ExecX(ctx context.Context) int {
	n, err := mcsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mcsd *MovieCollectionShareDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(moviecollectionshare.Table, sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt))
	if ps := mcsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mcsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mcsd.mutation.done = true
	return affected, err
}

// MovieCollectionShareDeleteOne is the builder for deleting a single MovieCollectionShare entity.
type MovieCollectionShareDeleteOne struct {
	mcsd *MovieCollectionShareDelete
}

// Where appends a list predicates to the MovieCollectionShareDelete builder.
func (mcsdo *MovieCollectionShareDeleteOne) Where(ps ...predicate.MovieCollectionShare) *MovieCollectionShareDeleteOne {
	mcsdo.mcsd.mutation.Where(ps...)
	return mcsdo
}

// Exec executes the deletion query.
func (mcsdo *MovieCollectionShareDeleteOne) Exec(ctx context.Context) error {
	n, err := mcsdo.mcsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{moviecollectionshare.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mcsdo *MovieCollectionShareDeleteOne) ExecX(ctx context.Context) {
	if err := mcsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
