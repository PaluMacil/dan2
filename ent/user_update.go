// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/amazonlist"
	"github.com/PaluMacil/dan2/ent/amazonshare"
	"github.com/PaluMacil/dan2/ent/drink"
	"github.com/PaluMacil/dan2/ent/grocerylist"
	"github.com/PaluMacil/dan2/ent/grocerylistshare"
	"github.com/PaluMacil/dan2/ent/moviecollection"
	"github.com/PaluMacil/dan2/ent/moviecollectionshare"
	"github.com/PaluMacil/dan2/ent/predicate"
	"github.com/PaluMacil/dan2/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetDisplayName sets the "display_name" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetNameChanges sets the "name_changes" field.
func (uu *UserUpdate) SetNameChanges(i int8) *UserUpdate {
	uu.mutation.ResetNameChanges()
	uu.mutation.SetNameChanges(i)
	return uu
}

// SetNillableNameChanges sets the "name_changes" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNameChanges(i *int8) *UserUpdate {
	if i != nil {
		uu.SetNameChanges(*i)
	}
	return uu
}

// AddNameChanges adds i to the "name_changes" field.
func (uu *UserUpdate) AddNameChanges(i int8) *UserUpdate {
	uu.mutation.AddNameChanges(i)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetVerified sets the "verified" field.
func (uu *UserUpdate) SetVerified(b bool) *UserUpdate {
	uu.mutation.SetVerified(b)
	return uu
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetVerified(*b)
	}
	return uu
}

// SetLocked sets the "locked" field.
func (uu *UserUpdate) SetLocked(b bool) *UserUpdate {
	uu.mutation.SetLocked(b)
	return uu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocked(b *bool) *UserUpdate {
	if b != nil {
		uu.SetLocked(*b)
	}
	return uu
}

// SetLastLogin sets the "last_login" field.
func (uu *UserUpdate) SetLastLogin(t time.Time) *UserUpdate {
	uu.mutation.SetLastLogin(t)
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// AddAmazonShareIDs adds the "amazon_shares" edge to the AmazonShare entity by IDs.
func (uu *UserUpdate) AddAmazonShareIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAmazonShareIDs(ids...)
	return uu
}

// AddAmazonShares adds the "amazon_shares" edges to the AmazonShare entity.
func (uu *UserUpdate) AddAmazonShares(a ...*AmazonShare) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAmazonShareIDs(ids...)
}

// AddAmazonListIDs adds the "amazon_lists" edge to the AmazonList entity by IDs.
func (uu *UserUpdate) AddAmazonListIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAmazonListIDs(ids...)
	return uu
}

// AddAmazonLists adds the "amazon_lists" edges to the AmazonList entity.
func (uu *UserUpdate) AddAmazonLists(a ...*AmazonList) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAmazonListIDs(ids...)
}

// AddDrinkIDs adds the "drinks" edge to the Drink entity by IDs.
func (uu *UserUpdate) AddDrinkIDs(ids ...int) *UserUpdate {
	uu.mutation.AddDrinkIDs(ids...)
	return uu
}

// AddDrinks adds the "drinks" edges to the Drink entity.
func (uu *UserUpdate) AddDrinks(d ...*Drink) *UserUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDrinkIDs(ids...)
}

// AddGroceryListIDs adds the "grocery_lists" edge to the GroceryList entity by IDs.
func (uu *UserUpdate) AddGroceryListIDs(ids ...int) *UserUpdate {
	uu.mutation.AddGroceryListIDs(ids...)
	return uu
}

// AddGroceryLists adds the "grocery_lists" edges to the GroceryList entity.
func (uu *UserUpdate) AddGroceryLists(g ...*GroceryList) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroceryListIDs(ids...)
}

// AddGroceryListShareIDs adds the "grocery_list_shares" edge to the GroceryListShare entity by IDs.
func (uu *UserUpdate) AddGroceryListShareIDs(ids ...int) *UserUpdate {
	uu.mutation.AddGroceryListShareIDs(ids...)
	return uu
}

// AddGroceryListShares adds the "grocery_list_shares" edges to the GroceryListShare entity.
func (uu *UserUpdate) AddGroceryListShares(g ...*GroceryListShare) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroceryListShareIDs(ids...)
}

// AddMovieCollectionIDs adds the "movie_collections" edge to the MovieCollection entity by IDs.
func (uu *UserUpdate) AddMovieCollectionIDs(ids ...int) *UserUpdate {
	uu.mutation.AddMovieCollectionIDs(ids...)
	return uu
}

// AddMovieCollections adds the "movie_collections" edges to the MovieCollection entity.
func (uu *UserUpdate) AddMovieCollections(m ...*MovieCollection) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMovieCollectionIDs(ids...)
}

// AddMovieCollectionShareIDs adds the "movie_collection_shares" edge to the MovieCollectionShare entity by IDs.
func (uu *UserUpdate) AddMovieCollectionShareIDs(ids ...int) *UserUpdate {
	uu.mutation.AddMovieCollectionShareIDs(ids...)
	return uu
}

// AddMovieCollectionShares adds the "movie_collection_shares" edges to the MovieCollectionShare entity.
func (uu *UserUpdate) AddMovieCollectionShares(m ...*MovieCollectionShare) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddMovieCollectionShareIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearAmazonShares clears all "amazon_shares" edges to the AmazonShare entity.
func (uu *UserUpdate) ClearAmazonShares() *UserUpdate {
	uu.mutation.ClearAmazonShares()
	return uu
}

// RemoveAmazonShareIDs removes the "amazon_shares" edge to AmazonShare entities by IDs.
func (uu *UserUpdate) RemoveAmazonShareIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAmazonShareIDs(ids...)
	return uu
}

// RemoveAmazonShares removes "amazon_shares" edges to AmazonShare entities.
func (uu *UserUpdate) RemoveAmazonShares(a ...*AmazonShare) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAmazonShareIDs(ids...)
}

// ClearAmazonLists clears all "amazon_lists" edges to the AmazonList entity.
func (uu *UserUpdate) ClearAmazonLists() *UserUpdate {
	uu.mutation.ClearAmazonLists()
	return uu
}

// RemoveAmazonListIDs removes the "amazon_lists" edge to AmazonList entities by IDs.
func (uu *UserUpdate) RemoveAmazonListIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAmazonListIDs(ids...)
	return uu
}

// RemoveAmazonLists removes "amazon_lists" edges to AmazonList entities.
func (uu *UserUpdate) RemoveAmazonLists(a ...*AmazonList) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAmazonListIDs(ids...)
}

// ClearDrinks clears all "drinks" edges to the Drink entity.
func (uu *UserUpdate) ClearDrinks() *UserUpdate {
	uu.mutation.ClearDrinks()
	return uu
}

// RemoveDrinkIDs removes the "drinks" edge to Drink entities by IDs.
func (uu *UserUpdate) RemoveDrinkIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveDrinkIDs(ids...)
	return uu
}

// RemoveDrinks removes "drinks" edges to Drink entities.
func (uu *UserUpdate) RemoveDrinks(d ...*Drink) *UserUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDrinkIDs(ids...)
}

// ClearGroceryLists clears all "grocery_lists" edges to the GroceryList entity.
func (uu *UserUpdate) ClearGroceryLists() *UserUpdate {
	uu.mutation.ClearGroceryLists()
	return uu
}

// RemoveGroceryListIDs removes the "grocery_lists" edge to GroceryList entities by IDs.
func (uu *UserUpdate) RemoveGroceryListIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveGroceryListIDs(ids...)
	return uu
}

// RemoveGroceryLists removes "grocery_lists" edges to GroceryList entities.
func (uu *UserUpdate) RemoveGroceryLists(g ...*GroceryList) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroceryListIDs(ids...)
}

// ClearGroceryListShares clears all "grocery_list_shares" edges to the GroceryListShare entity.
func (uu *UserUpdate) ClearGroceryListShares() *UserUpdate {
	uu.mutation.ClearGroceryListShares()
	return uu
}

// RemoveGroceryListShareIDs removes the "grocery_list_shares" edge to GroceryListShare entities by IDs.
func (uu *UserUpdate) RemoveGroceryListShareIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveGroceryListShareIDs(ids...)
	return uu
}

// RemoveGroceryListShares removes "grocery_list_shares" edges to GroceryListShare entities.
func (uu *UserUpdate) RemoveGroceryListShares(g ...*GroceryListShare) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroceryListShareIDs(ids...)
}

// ClearMovieCollections clears all "movie_collections" edges to the MovieCollection entity.
func (uu *UserUpdate) ClearMovieCollections() *UserUpdate {
	uu.mutation.ClearMovieCollections()
	return uu
}

// RemoveMovieCollectionIDs removes the "movie_collections" edge to MovieCollection entities by IDs.
func (uu *UserUpdate) RemoveMovieCollectionIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveMovieCollectionIDs(ids...)
	return uu
}

// RemoveMovieCollections removes "movie_collections" edges to MovieCollection entities.
func (uu *UserUpdate) RemoveMovieCollections(m ...*MovieCollection) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMovieCollectionIDs(ids...)
}

// ClearMovieCollectionShares clears all "movie_collection_shares" edges to the MovieCollectionShare entity.
func (uu *UserUpdate) ClearMovieCollectionShares() *UserUpdate {
	uu.mutation.ClearMovieCollectionShares()
	return uu
}

// RemoveMovieCollectionShareIDs removes the "movie_collection_shares" edge to MovieCollectionShare entities by IDs.
func (uu *UserUpdate) RemoveMovieCollectionShareIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveMovieCollectionShareIDs(ids...)
	return uu
}

// RemoveMovieCollectionShares removes "movie_collection_shares" edges to MovieCollectionShare entities.
func (uu *UserUpdate) RemoveMovieCollectionShares(m ...*MovieCollectionShare) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveMovieCollectionShareIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uu.mutation.NameChanges(); ok {
		_spec.SetField(user.FieldNameChanges, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.AddedNameChanges(); ok {
		_spec.AddField(user.FieldNameChanges, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Locked(); ok {
		_spec.SetField(user.FieldLocked, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uu.mutation.AmazonSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AmazonSharesTable,
			Columns: []string{user.AmazonSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAmazonSharesIDs(); len(nodes) > 0 && !uu.mutation.AmazonSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AmazonSharesTable,
			Columns: []string{user.AmazonSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AmazonSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AmazonSharesTable,
			Columns: []string{user.AmazonSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AmazonListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AmazonListsTable,
			Columns: user.AmazonListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAmazonListsIDs(); len(nodes) > 0 && !uu.mutation.AmazonListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AmazonListsTable,
			Columns: user.AmazonListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AmazonListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AmazonListsTable,
			Columns: user.AmazonListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DrinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DrinksTable,
			Columns: []string{user.DrinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(drink.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDrinksIDs(); len(nodes) > 0 && !uu.mutation.DrinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DrinksTable,
			Columns: []string{user.DrinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(drink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DrinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DrinksTable,
			Columns: []string{user.DrinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(drink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroceryListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListsTable,
			Columns: []string{user.GroceryListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroceryListsIDs(); len(nodes) > 0 && !uu.mutation.GroceryListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListsTable,
			Columns: []string{user.GroceryListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroceryListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListsTable,
			Columns: []string{user.GroceryListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroceryListSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListSharesTable,
			Columns: []string{user.GroceryListSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroceryListSharesIDs(); len(nodes) > 0 && !uu.mutation.GroceryListSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListSharesTable,
			Columns: []string{user.GroceryListSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroceryListSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListSharesTable,
			Columns: []string{user.GroceryListSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MovieCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionsTable,
			Columns: []string{user.MovieCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMovieCollectionsIDs(); len(nodes) > 0 && !uu.mutation.MovieCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionsTable,
			Columns: []string{user.MovieCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MovieCollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionsTable,
			Columns: []string{user.MovieCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MovieCollectionSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionSharesTable,
			Columns: []string{user.MovieCollectionSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMovieCollectionSharesIDs(); len(nodes) > 0 && !uu.mutation.MovieCollectionSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionSharesTable,
			Columns: []string{user.MovieCollectionSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MovieCollectionSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionSharesTable,
			Columns: []string{user.MovieCollectionSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetDisplayName sets the "display_name" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetNameChanges sets the "name_changes" field.
func (uuo *UserUpdateOne) SetNameChanges(i int8) *UserUpdateOne {
	uuo.mutation.ResetNameChanges()
	uuo.mutation.SetNameChanges(i)
	return uuo
}

// SetNillableNameChanges sets the "name_changes" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNameChanges(i *int8) *UserUpdateOne {
	if i != nil {
		uuo.SetNameChanges(*i)
	}
	return uuo
}

// AddNameChanges adds i to the "name_changes" field.
func (uuo *UserUpdateOne) AddNameChanges(i int8) *UserUpdateOne {
	uuo.mutation.AddNameChanges(i)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetVerified sets the "verified" field.
func (uuo *UserUpdateOne) SetVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetVerified(b)
	return uuo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetVerified(*b)
	}
	return uuo
}

// SetLocked sets the "locked" field.
func (uuo *UserUpdateOne) SetLocked(b bool) *UserUpdateOne {
	uuo.mutation.SetLocked(b)
	return uuo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocked(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetLocked(*b)
	}
	return uuo
}

// SetLastLogin sets the "last_login" field.
func (uuo *UserUpdateOne) SetLastLogin(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastLogin(t)
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// AddAmazonShareIDs adds the "amazon_shares" edge to the AmazonShare entity by IDs.
func (uuo *UserUpdateOne) AddAmazonShareIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAmazonShareIDs(ids...)
	return uuo
}

// AddAmazonShares adds the "amazon_shares" edges to the AmazonShare entity.
func (uuo *UserUpdateOne) AddAmazonShares(a ...*AmazonShare) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAmazonShareIDs(ids...)
}

// AddAmazonListIDs adds the "amazon_lists" edge to the AmazonList entity by IDs.
func (uuo *UserUpdateOne) AddAmazonListIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAmazonListIDs(ids...)
	return uuo
}

// AddAmazonLists adds the "amazon_lists" edges to the AmazonList entity.
func (uuo *UserUpdateOne) AddAmazonLists(a ...*AmazonList) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAmazonListIDs(ids...)
}

// AddDrinkIDs adds the "drinks" edge to the Drink entity by IDs.
func (uuo *UserUpdateOne) AddDrinkIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddDrinkIDs(ids...)
	return uuo
}

// AddDrinks adds the "drinks" edges to the Drink entity.
func (uuo *UserUpdateOne) AddDrinks(d ...*Drink) *UserUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDrinkIDs(ids...)
}

// AddGroceryListIDs adds the "grocery_lists" edge to the GroceryList entity by IDs.
func (uuo *UserUpdateOne) AddGroceryListIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddGroceryListIDs(ids...)
	return uuo
}

// AddGroceryLists adds the "grocery_lists" edges to the GroceryList entity.
func (uuo *UserUpdateOne) AddGroceryLists(g ...*GroceryList) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroceryListIDs(ids...)
}

// AddGroceryListShareIDs adds the "grocery_list_shares" edge to the GroceryListShare entity by IDs.
func (uuo *UserUpdateOne) AddGroceryListShareIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddGroceryListShareIDs(ids...)
	return uuo
}

// AddGroceryListShares adds the "grocery_list_shares" edges to the GroceryListShare entity.
func (uuo *UserUpdateOne) AddGroceryListShares(g ...*GroceryListShare) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroceryListShareIDs(ids...)
}

// AddMovieCollectionIDs adds the "movie_collections" edge to the MovieCollection entity by IDs.
func (uuo *UserUpdateOne) AddMovieCollectionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddMovieCollectionIDs(ids...)
	return uuo
}

// AddMovieCollections adds the "movie_collections" edges to the MovieCollection entity.
func (uuo *UserUpdateOne) AddMovieCollections(m ...*MovieCollection) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMovieCollectionIDs(ids...)
}

// AddMovieCollectionShareIDs adds the "movie_collection_shares" edge to the MovieCollectionShare entity by IDs.
func (uuo *UserUpdateOne) AddMovieCollectionShareIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddMovieCollectionShareIDs(ids...)
	return uuo
}

// AddMovieCollectionShares adds the "movie_collection_shares" edges to the MovieCollectionShare entity.
func (uuo *UserUpdateOne) AddMovieCollectionShares(m ...*MovieCollectionShare) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddMovieCollectionShareIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearAmazonShares clears all "amazon_shares" edges to the AmazonShare entity.
func (uuo *UserUpdateOne) ClearAmazonShares() *UserUpdateOne {
	uuo.mutation.ClearAmazonShares()
	return uuo
}

// RemoveAmazonShareIDs removes the "amazon_shares" edge to AmazonShare entities by IDs.
func (uuo *UserUpdateOne) RemoveAmazonShareIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAmazonShareIDs(ids...)
	return uuo
}

// RemoveAmazonShares removes "amazon_shares" edges to AmazonShare entities.
func (uuo *UserUpdateOne) RemoveAmazonShares(a ...*AmazonShare) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAmazonShareIDs(ids...)
}

// ClearAmazonLists clears all "amazon_lists" edges to the AmazonList entity.
func (uuo *UserUpdateOne) ClearAmazonLists() *UserUpdateOne {
	uuo.mutation.ClearAmazonLists()
	return uuo
}

// RemoveAmazonListIDs removes the "amazon_lists" edge to AmazonList entities by IDs.
func (uuo *UserUpdateOne) RemoveAmazonListIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAmazonListIDs(ids...)
	return uuo
}

// RemoveAmazonLists removes "amazon_lists" edges to AmazonList entities.
func (uuo *UserUpdateOne) RemoveAmazonLists(a ...*AmazonList) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAmazonListIDs(ids...)
}

// ClearDrinks clears all "drinks" edges to the Drink entity.
func (uuo *UserUpdateOne) ClearDrinks() *UserUpdateOne {
	uuo.mutation.ClearDrinks()
	return uuo
}

// RemoveDrinkIDs removes the "drinks" edge to Drink entities by IDs.
func (uuo *UserUpdateOne) RemoveDrinkIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveDrinkIDs(ids...)
	return uuo
}

// RemoveDrinks removes "drinks" edges to Drink entities.
func (uuo *UserUpdateOne) RemoveDrinks(d ...*Drink) *UserUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDrinkIDs(ids...)
}

// ClearGroceryLists clears all "grocery_lists" edges to the GroceryList entity.
func (uuo *UserUpdateOne) ClearGroceryLists() *UserUpdateOne {
	uuo.mutation.ClearGroceryLists()
	return uuo
}

// RemoveGroceryListIDs removes the "grocery_lists" edge to GroceryList entities by IDs.
func (uuo *UserUpdateOne) RemoveGroceryListIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveGroceryListIDs(ids...)
	return uuo
}

// RemoveGroceryLists removes "grocery_lists" edges to GroceryList entities.
func (uuo *UserUpdateOne) RemoveGroceryLists(g ...*GroceryList) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroceryListIDs(ids...)
}

// ClearGroceryListShares clears all "grocery_list_shares" edges to the GroceryListShare entity.
func (uuo *UserUpdateOne) ClearGroceryListShares() *UserUpdateOne {
	uuo.mutation.ClearGroceryListShares()
	return uuo
}

// RemoveGroceryListShareIDs removes the "grocery_list_shares" edge to GroceryListShare entities by IDs.
func (uuo *UserUpdateOne) RemoveGroceryListShareIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveGroceryListShareIDs(ids...)
	return uuo
}

// RemoveGroceryListShares removes "grocery_list_shares" edges to GroceryListShare entities.
func (uuo *UserUpdateOne) RemoveGroceryListShares(g ...*GroceryListShare) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroceryListShareIDs(ids...)
}

// ClearMovieCollections clears all "movie_collections" edges to the MovieCollection entity.
func (uuo *UserUpdateOne) ClearMovieCollections() *UserUpdateOne {
	uuo.mutation.ClearMovieCollections()
	return uuo
}

// RemoveMovieCollectionIDs removes the "movie_collections" edge to MovieCollection entities by IDs.
func (uuo *UserUpdateOne) RemoveMovieCollectionIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveMovieCollectionIDs(ids...)
	return uuo
}

// RemoveMovieCollections removes "movie_collections" edges to MovieCollection entities.
func (uuo *UserUpdateOne) RemoveMovieCollections(m ...*MovieCollection) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMovieCollectionIDs(ids...)
}

// ClearMovieCollectionShares clears all "movie_collection_shares" edges to the MovieCollectionShare entity.
func (uuo *UserUpdateOne) ClearMovieCollectionShares() *UserUpdateOne {
	uuo.mutation.ClearMovieCollectionShares()
	return uuo
}

// RemoveMovieCollectionShareIDs removes the "movie_collection_shares" edge to MovieCollectionShare entities by IDs.
func (uuo *UserUpdateOne) RemoveMovieCollectionShareIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveMovieCollectionShareIDs(ids...)
	return uuo
}

// RemoveMovieCollectionShares removes "movie_collection_shares" edges to MovieCollectionShare entities.
func (uuo *UserUpdateOne) RemoveMovieCollectionShares(m ...*MovieCollectionShare) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveMovieCollectionShareIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.NameChanges(); ok {
		_spec.SetField(user.FieldNameChanges, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.AddedNameChanges(); ok {
		_spec.AddField(user.FieldNameChanges, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Locked(); ok {
		_spec.SetField(user.FieldLocked, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LastLogin(); ok {
		_spec.SetField(user.FieldLastLogin, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if uuo.mutation.AmazonSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AmazonSharesTable,
			Columns: []string{user.AmazonSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAmazonSharesIDs(); len(nodes) > 0 && !uuo.mutation.AmazonSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AmazonSharesTable,
			Columns: []string{user.AmazonSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AmazonSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AmazonSharesTable,
			Columns: []string{user.AmazonSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AmazonListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AmazonListsTable,
			Columns: user.AmazonListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAmazonListsIDs(); len(nodes) > 0 && !uuo.mutation.AmazonListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AmazonListsTable,
			Columns: user.AmazonListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AmazonListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AmazonListsTable,
			Columns: user.AmazonListsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DrinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DrinksTable,
			Columns: []string{user.DrinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(drink.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDrinksIDs(); len(nodes) > 0 && !uuo.mutation.DrinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DrinksTable,
			Columns: []string{user.DrinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(drink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DrinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DrinksTable,
			Columns: []string{user.DrinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(drink.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroceryListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListsTable,
			Columns: []string{user.GroceryListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroceryListsIDs(); len(nodes) > 0 && !uuo.mutation.GroceryListsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListsTable,
			Columns: []string{user.GroceryListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroceryListsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListsTable,
			Columns: []string{user.GroceryListsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroceryListSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListSharesTable,
			Columns: []string{user.GroceryListSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroceryListSharesIDs(); len(nodes) > 0 && !uuo.mutation.GroceryListSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListSharesTable,
			Columns: []string{user.GroceryListSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroceryListSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroceryListSharesTable,
			Columns: []string{user.GroceryListSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MovieCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionsTable,
			Columns: []string{user.MovieCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMovieCollectionsIDs(); len(nodes) > 0 && !uuo.mutation.MovieCollectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionsTable,
			Columns: []string{user.MovieCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MovieCollectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionsTable,
			Columns: []string{user.MovieCollectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollection.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MovieCollectionSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionSharesTable,
			Columns: []string{user.MovieCollectionSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMovieCollectionSharesIDs(); len(nodes) > 0 && !uuo.mutation.MovieCollectionSharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionSharesTable,
			Columns: []string{user.MovieCollectionSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MovieCollectionSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.MovieCollectionSharesTable,
			Columns: []string{user.MovieCollectionSharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
