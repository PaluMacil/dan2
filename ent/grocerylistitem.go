// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PaluMacil/dan2/ent/grocerylist"
	"github.com/PaluMacil/dan2/ent/grocerylistitem"
)

// GroceryListItem is the model entity for the GroceryListItem schema.
type GroceryListItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroceryListItemQuery when eager-loading is set.
	Edges                           GroceryListItemEdges `json:"edges"`
	grocery_list_grocery_list_items *int
	selectValues                    sql.SelectValues
}

// GroceryListItemEdges holds the relations/edges for other nodes in the graph.
type GroceryListItemEdges struct {
	// GroceryList holds the value of the grocery_list edge.
	GroceryList *GroceryList `json:"grocery_list,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroceryListOrErr returns the GroceryList value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroceryListItemEdges) GroceryListOrErr() (*GroceryList, error) {
	if e.loadedTypes[0] {
		if e.GroceryList == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: grocerylist.Label}
		}
		return e.GroceryList, nil
	}
	return nil, &NotLoadedError{edge: "grocery_list"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroceryListItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grocerylistitem.FieldID, grocerylistitem.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case grocerylistitem.FieldName, grocerylistitem.FieldNote:
			values[i] = new(sql.NullString)
		case grocerylistitem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case grocerylistitem.ForeignKeys[0]: // grocery_list_grocery_list_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroceryListItem fields.
func (gli *GroceryListItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grocerylistitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gli.ID = int(value.Int64)
		case grocerylistitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gli.Name = value.String
			}
		case grocerylistitem.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				gli.Quantity = int(value.Int64)
			}
		case grocerylistitem.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				gli.Note = value.String
			}
		case grocerylistitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gli.CreatedAt = value.Time
			}
		case grocerylistitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field grocery_list_grocery_list_items", value)
			} else if value.Valid {
				gli.grocery_list_grocery_list_items = new(int)
				*gli.grocery_list_grocery_list_items = int(value.Int64)
			}
		default:
			gli.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroceryListItem.
// This includes values selected through modifiers, order, etc.
func (gli *GroceryListItem) Value(name string) (ent.Value, error) {
	return gli.selectValues.Get(name)
}

// QueryGroceryList queries the "grocery_list" edge of the GroceryListItem entity.
func (gli *GroceryListItem) QueryGroceryList() *GroceryListQuery {
	return NewGroceryListItemClient(gli.config).QueryGroceryList(gli)
}

// Update returns a builder for updating this GroceryListItem.
// Note that you need to call GroceryListItem.Unwrap() before calling this method if this GroceryListItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (gli *GroceryListItem) Update() *GroceryListItemUpdateOne {
	return NewGroceryListItemClient(gli.config).UpdateOne(gli)
}

// Unwrap unwraps the GroceryListItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gli *GroceryListItem) Unwrap() *GroceryListItem {
	_tx, ok := gli.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroceryListItem is not a transactional entity")
	}
	gli.config.driver = _tx.drv
	return gli
}

// String implements the fmt.Stringer.
func (gli *GroceryListItem) String() string {
	var builder strings.Builder
	builder.WriteString("GroceryListItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gli.ID))
	builder.WriteString("name=")
	builder.WriteString(gli.Name)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", gli.Quantity))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(gli.Note)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gli.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GroceryListItems is a parsable slice of GroceryListItem.
type GroceryListItems []*GroceryListItem
