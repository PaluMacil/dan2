// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/movie"
	"github.com/PaluMacil/dan2/ent/movielist"
	"github.com/PaluMacil/dan2/ent/movielistshare"
	"github.com/PaluMacil/dan2/ent/user"
)

// MovieListCreate is the builder for creating a MovieList entity.
type MovieListCreate struct {
	config
	mutation *MovieListMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mlc *MovieListCreate) SetName(s string) *MovieListCreate {
	mlc.mutation.SetName(s)
	return mlc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mlc *MovieListCreate) SetNillableName(s *string) *MovieListCreate {
	if s != nil {
		mlc.SetName(*s)
	}
	return mlc
}

// SetNote sets the "note" field.
func (mlc *MovieListCreate) SetNote(s string) *MovieListCreate {
	mlc.mutation.SetNote(s)
	return mlc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (mlc *MovieListCreate) SetNillableNote(s *string) *MovieListCreate {
	if s != nil {
		mlc.SetNote(*s)
	}
	return mlc
}

// SetShowWatched sets the "show_watched" field.
func (mlc *MovieListCreate) SetShowWatched(b bool) *MovieListCreate {
	mlc.mutation.SetShowWatched(b)
	return mlc
}

// SetNillableShowWatched sets the "show_watched" field if the given value is not nil.
func (mlc *MovieListCreate) SetNillableShowWatched(b *bool) *MovieListCreate {
	if b != nil {
		mlc.SetShowWatched(*b)
	}
	return mlc
}

// SetCreatedAt sets the "created_at" field.
func (mlc *MovieListCreate) SetCreatedAt(t time.Time) *MovieListCreate {
	mlc.mutation.SetCreatedAt(t)
	return mlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mlc *MovieListCreate) SetNillableCreatedAt(t *time.Time) *MovieListCreate {
	if t != nil {
		mlc.SetCreatedAt(*t)
	}
	return mlc
}

// AddMovieIDs adds the "movies" edge to the Movie entity by IDs.
func (mlc *MovieListCreate) AddMovieIDs(ids ...int) *MovieListCreate {
	mlc.mutation.AddMovieIDs(ids...)
	return mlc
}

// AddMovies adds the "movies" edges to the Movie entity.
func (mlc *MovieListCreate) AddMovies(m ...*Movie) *MovieListCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mlc.AddMovieIDs(ids...)
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (mlc *MovieListCreate) AddOwnerIDs(ids ...int) *MovieListCreate {
	mlc.mutation.AddOwnerIDs(ids...)
	return mlc
}

// AddOwner adds the "owner" edges to the User entity.
func (mlc *MovieListCreate) AddOwner(u ...*User) *MovieListCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mlc.AddOwnerIDs(ids...)
}

// AddMovieListShareIDs adds the "movie_list_shares" edge to the MovieListShare entity by IDs.
func (mlc *MovieListCreate) AddMovieListShareIDs(ids ...int) *MovieListCreate {
	mlc.mutation.AddMovieListShareIDs(ids...)
	return mlc
}

// AddMovieListShares adds the "movie_list_shares" edges to the MovieListShare entity.
func (mlc *MovieListCreate) AddMovieListShares(m ...*MovieListShare) *MovieListCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mlc.AddMovieListShareIDs(ids...)
}

// Mutation returns the MovieListMutation object of the builder.
func (mlc *MovieListCreate) Mutation() *MovieListMutation {
	return mlc.mutation
}

// Save creates the MovieList in the database.
func (mlc *MovieListCreate) Save(ctx context.Context) (*MovieList, error) {
	mlc.defaults()
	return withHooks(ctx, mlc.sqlSave, mlc.mutation, mlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mlc *MovieListCreate) SaveX(ctx context.Context) *MovieList {
	v, err := mlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlc *MovieListCreate) Exec(ctx context.Context) error {
	_, err := mlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlc *MovieListCreate) ExecX(ctx context.Context) {
	if err := mlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlc *MovieListCreate) defaults() {
	if _, ok := mlc.mutation.Name(); !ok {
		v := movielist.DefaultName
		mlc.mutation.SetName(v)
	}
	if _, ok := mlc.mutation.Note(); !ok {
		v := movielist.DefaultNote
		mlc.mutation.SetNote(v)
	}
	if _, ok := mlc.mutation.ShowWatched(); !ok {
		v := movielist.DefaultShowWatched
		mlc.mutation.SetShowWatched(v)
	}
	if _, ok := mlc.mutation.CreatedAt(); !ok {
		v := movielist.DefaultCreatedAt()
		mlc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlc *MovieListCreate) check() error {
	if _, ok := mlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MovieList.name"`)}
	}
	if _, ok := mlc.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "MovieList.note"`)}
	}
	if _, ok := mlc.mutation.ShowWatched(); !ok {
		return &ValidationError{Name: "show_watched", err: errors.New(`ent: missing required field "MovieList.show_watched"`)}
	}
	if _, ok := mlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MovieList.created_at"`)}
	}
	return nil
}

func (mlc *MovieListCreate) sqlSave(ctx context.Context) (*MovieList, error) {
	if err := mlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mlc.mutation.id = &_node.ID
	mlc.mutation.done = true
	return _node, nil
}

func (mlc *MovieListCreate) createSpec() (*MovieList, *sqlgraph.CreateSpec) {
	var (
		_node = &MovieList{config: mlc.config}
		_spec = sqlgraph.NewCreateSpec(movielist.Table, sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt))
	)
	if value, ok := mlc.mutation.Name(); ok {
		_spec.SetField(movielist.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mlc.mutation.Note(); ok {
		_spec.SetField(movielist.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := mlc.mutation.ShowWatched(); ok {
		_spec.SetField(movielist.FieldShowWatched, field.TypeBool, value)
		_node.ShowWatched = value
	}
	if value, ok := mlc.mutation.CreatedAt(); ok {
		_spec.SetField(movielist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mlc.mutation.MoviesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movielist.MoviesTable,
			Columns: movielist.MoviesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mlc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   movielist.OwnerTable,
			Columns: movielist.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mlc.mutation.MovieListSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movielist.MovieListSharesTable,
			Columns: movielist.MovieListSharesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movielistshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MovieListCreateBulk is the builder for creating many MovieList entities in bulk.
type MovieListCreateBulk struct {
	config
	builders []*MovieListCreate
}

// Save creates the MovieList entities in the database.
func (mlcb *MovieListCreateBulk) Save(ctx context.Context) ([]*MovieList, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mlcb.builders))
	nodes := make([]*MovieList, len(mlcb.builders))
	mutators := make([]Mutator, len(mlcb.builders))
	for i := range mlcb.builders {
		func(i int, root context.Context) {
			builder := mlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovieListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mlcb *MovieListCreateBulk) SaveX(ctx context.Context) []*MovieList {
	v, err := mlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlcb *MovieListCreateBulk) Exec(ctx context.Context) error {
	_, err := mlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlcb *MovieListCreateBulk) ExecX(ctx context.Context) {
	if err := mlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
