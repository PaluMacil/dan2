// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/grocerylist"
	"github.com/PaluMacil/dan2/ent/grocerylistshare"
	"github.com/PaluMacil/dan2/ent/predicate"
	"github.com/PaluMacil/dan2/ent/user"
)

// GroceryListShareUpdate is the builder for updating GroceryListShare entities.
type GroceryListShareUpdate struct {
	config
	hooks    []Hook
	mutation *GroceryListShareMutation
}

// Where appends a list predicates to the GroceryListShareUpdate builder.
func (glsu *GroceryListShareUpdate) Where(ps ...predicate.GroceryListShare) *GroceryListShareUpdate {
	glsu.mutation.Where(ps...)
	return glsu
}

// SetCanEdit sets the "can_edit" field.
func (glsu *GroceryListShareUpdate) SetCanEdit(b bool) *GroceryListShareUpdate {
	glsu.mutation.SetCanEdit(b)
	return glsu
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (glsu *GroceryListShareUpdate) SetNillableCanEdit(b *bool) *GroceryListShareUpdate {
	if b != nil {
		glsu.SetCanEdit(*b)
	}
	return glsu
}

// SetCreatedAt sets the "created_at" field.
func (glsu *GroceryListShareUpdate) SetCreatedAt(t time.Time) *GroceryListShareUpdate {
	glsu.mutation.SetCreatedAt(t)
	return glsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (glsu *GroceryListShareUpdate) SetNillableCreatedAt(t *time.Time) *GroceryListShareUpdate {
	if t != nil {
		glsu.SetCreatedAt(*t)
	}
	return glsu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (glsu *GroceryListShareUpdate) AddUserIDs(ids ...int) *GroceryListShareUpdate {
	glsu.mutation.AddUserIDs(ids...)
	return glsu
}

// AddUser adds the "user" edges to the User entity.
func (glsu *GroceryListShareUpdate) AddUser(u ...*User) *GroceryListShareUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return glsu.AddUserIDs(ids...)
}

// AddGroceryListIDs adds the "grocery_list" edge to the GroceryList entity by IDs.
func (glsu *GroceryListShareUpdate) AddGroceryListIDs(ids ...int) *GroceryListShareUpdate {
	glsu.mutation.AddGroceryListIDs(ids...)
	return glsu
}

// AddGroceryList adds the "grocery_list" edges to the GroceryList entity.
func (glsu *GroceryListShareUpdate) AddGroceryList(g ...*GroceryList) *GroceryListShareUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return glsu.AddGroceryListIDs(ids...)
}

// Mutation returns the GroceryListShareMutation object of the builder.
func (glsu *GroceryListShareUpdate) Mutation() *GroceryListShareMutation {
	return glsu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (glsu *GroceryListShareUpdate) ClearUser() *GroceryListShareUpdate {
	glsu.mutation.ClearUser()
	return glsu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (glsu *GroceryListShareUpdate) RemoveUserIDs(ids ...int) *GroceryListShareUpdate {
	glsu.mutation.RemoveUserIDs(ids...)
	return glsu
}

// RemoveUser removes "user" edges to User entities.
func (glsu *GroceryListShareUpdate) RemoveUser(u ...*User) *GroceryListShareUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return glsu.RemoveUserIDs(ids...)
}

// ClearGroceryList clears all "grocery_list" edges to the GroceryList entity.
func (glsu *GroceryListShareUpdate) ClearGroceryList() *GroceryListShareUpdate {
	glsu.mutation.ClearGroceryList()
	return glsu
}

// RemoveGroceryListIDs removes the "grocery_list" edge to GroceryList entities by IDs.
func (glsu *GroceryListShareUpdate) RemoveGroceryListIDs(ids ...int) *GroceryListShareUpdate {
	glsu.mutation.RemoveGroceryListIDs(ids...)
	return glsu
}

// RemoveGroceryList removes "grocery_list" edges to GroceryList entities.
func (glsu *GroceryListShareUpdate) RemoveGroceryList(g ...*GroceryList) *GroceryListShareUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return glsu.RemoveGroceryListIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (glsu *GroceryListShareUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, glsu.sqlSave, glsu.mutation, glsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (glsu *GroceryListShareUpdate) SaveX(ctx context.Context) int {
	affected, err := glsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (glsu *GroceryListShareUpdate) Exec(ctx context.Context) error {
	_, err := glsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glsu *GroceryListShareUpdate) ExecX(ctx context.Context) {
	if err := glsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (glsu *GroceryListShareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(grocerylistshare.Table, grocerylistshare.Columns, sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt))
	if ps := glsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := glsu.mutation.CanEdit(); ok {
		_spec.SetField(grocerylistshare.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := glsu.mutation.CreatedAt(); ok {
		_spec.SetField(grocerylistshare.FieldCreatedAt, field.TypeTime, value)
	}
	if glsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.UserTable,
			Columns: grocerylistshare.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glsu.mutation.RemovedUserIDs(); len(nodes) > 0 && !glsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.UserTable,
			Columns: grocerylistshare.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.UserTable,
			Columns: grocerylistshare.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if glsu.mutation.GroceryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.GroceryListTable,
			Columns: grocerylistshare.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glsu.mutation.RemovedGroceryListIDs(); len(nodes) > 0 && !glsu.mutation.GroceryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.GroceryListTable,
			Columns: grocerylistshare.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glsu.mutation.GroceryListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.GroceryListTable,
			Columns: grocerylistshare.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, glsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grocerylistshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	glsu.mutation.done = true
	return n, nil
}

// GroceryListShareUpdateOne is the builder for updating a single GroceryListShare entity.
type GroceryListShareUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroceryListShareMutation
}

// SetCanEdit sets the "can_edit" field.
func (glsuo *GroceryListShareUpdateOne) SetCanEdit(b bool) *GroceryListShareUpdateOne {
	glsuo.mutation.SetCanEdit(b)
	return glsuo
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (glsuo *GroceryListShareUpdateOne) SetNillableCanEdit(b *bool) *GroceryListShareUpdateOne {
	if b != nil {
		glsuo.SetCanEdit(*b)
	}
	return glsuo
}

// SetCreatedAt sets the "created_at" field.
func (glsuo *GroceryListShareUpdateOne) SetCreatedAt(t time.Time) *GroceryListShareUpdateOne {
	glsuo.mutation.SetCreatedAt(t)
	return glsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (glsuo *GroceryListShareUpdateOne) SetNillableCreatedAt(t *time.Time) *GroceryListShareUpdateOne {
	if t != nil {
		glsuo.SetCreatedAt(*t)
	}
	return glsuo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (glsuo *GroceryListShareUpdateOne) AddUserIDs(ids ...int) *GroceryListShareUpdateOne {
	glsuo.mutation.AddUserIDs(ids...)
	return glsuo
}

// AddUser adds the "user" edges to the User entity.
func (glsuo *GroceryListShareUpdateOne) AddUser(u ...*User) *GroceryListShareUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return glsuo.AddUserIDs(ids...)
}

// AddGroceryListIDs adds the "grocery_list" edge to the GroceryList entity by IDs.
func (glsuo *GroceryListShareUpdateOne) AddGroceryListIDs(ids ...int) *GroceryListShareUpdateOne {
	glsuo.mutation.AddGroceryListIDs(ids...)
	return glsuo
}

// AddGroceryList adds the "grocery_list" edges to the GroceryList entity.
func (glsuo *GroceryListShareUpdateOne) AddGroceryList(g ...*GroceryList) *GroceryListShareUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return glsuo.AddGroceryListIDs(ids...)
}

// Mutation returns the GroceryListShareMutation object of the builder.
func (glsuo *GroceryListShareUpdateOne) Mutation() *GroceryListShareMutation {
	return glsuo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (glsuo *GroceryListShareUpdateOne) ClearUser() *GroceryListShareUpdateOne {
	glsuo.mutation.ClearUser()
	return glsuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (glsuo *GroceryListShareUpdateOne) RemoveUserIDs(ids ...int) *GroceryListShareUpdateOne {
	glsuo.mutation.RemoveUserIDs(ids...)
	return glsuo
}

// RemoveUser removes "user" edges to User entities.
func (glsuo *GroceryListShareUpdateOne) RemoveUser(u ...*User) *GroceryListShareUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return glsuo.RemoveUserIDs(ids...)
}

// ClearGroceryList clears all "grocery_list" edges to the GroceryList entity.
func (glsuo *GroceryListShareUpdateOne) ClearGroceryList() *GroceryListShareUpdateOne {
	glsuo.mutation.ClearGroceryList()
	return glsuo
}

// RemoveGroceryListIDs removes the "grocery_list" edge to GroceryList entities by IDs.
func (glsuo *GroceryListShareUpdateOne) RemoveGroceryListIDs(ids ...int) *GroceryListShareUpdateOne {
	glsuo.mutation.RemoveGroceryListIDs(ids...)
	return glsuo
}

// RemoveGroceryList removes "grocery_list" edges to GroceryList entities.
func (glsuo *GroceryListShareUpdateOne) RemoveGroceryList(g ...*GroceryList) *GroceryListShareUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return glsuo.RemoveGroceryListIDs(ids...)
}

// Where appends a list predicates to the GroceryListShareUpdate builder.
func (glsuo *GroceryListShareUpdateOne) Where(ps ...predicate.GroceryListShare) *GroceryListShareUpdateOne {
	glsuo.mutation.Where(ps...)
	return glsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (glsuo *GroceryListShareUpdateOne) Select(field string, fields ...string) *GroceryListShareUpdateOne {
	glsuo.fields = append([]string{field}, fields...)
	return glsuo
}

// Save executes the query and returns the updated GroceryListShare entity.
func (glsuo *GroceryListShareUpdateOne) Save(ctx context.Context) (*GroceryListShare, error) {
	return withHooks(ctx, glsuo.sqlSave, glsuo.mutation, glsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (glsuo *GroceryListShareUpdateOne) SaveX(ctx context.Context) *GroceryListShare {
	node, err := glsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (glsuo *GroceryListShareUpdateOne) Exec(ctx context.Context) error {
	_, err := glsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glsuo *GroceryListShareUpdateOne) ExecX(ctx context.Context) {
	if err := glsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (glsuo *GroceryListShareUpdateOne) sqlSave(ctx context.Context) (_node *GroceryListShare, err error) {
	_spec := sqlgraph.NewUpdateSpec(grocerylistshare.Table, grocerylistshare.Columns, sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt))
	id, ok := glsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroceryListShare.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := glsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grocerylistshare.FieldID)
		for _, f := range fields {
			if !grocerylistshare.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grocerylistshare.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := glsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := glsuo.mutation.CanEdit(); ok {
		_spec.SetField(grocerylistshare.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := glsuo.mutation.CreatedAt(); ok {
		_spec.SetField(grocerylistshare.FieldCreatedAt, field.TypeTime, value)
	}
	if glsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.UserTable,
			Columns: grocerylistshare.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glsuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !glsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.UserTable,
			Columns: grocerylistshare.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.UserTable,
			Columns: grocerylistshare.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if glsuo.mutation.GroceryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.GroceryListTable,
			Columns: grocerylistshare.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glsuo.mutation.RemovedGroceryListIDs(); len(nodes) > 0 && !glsuo.mutation.GroceryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.GroceryListTable,
			Columns: grocerylistshare.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := glsuo.mutation.GroceryListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistshare.GroceryListTable,
			Columns: grocerylistshare.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroceryListShare{config: glsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, glsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grocerylistshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	glsuo.mutation.done = true
	return _node, nil
}
