// Code generated by ent, DO NOT EDIT.

package moviecollectionshare

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the moviecollectionshare type in the database.
	Label = "movie_collection_share"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCanEdit holds the string denoting the can_edit field in the database.
	FieldCanEdit = "can_edit"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeMovieCollection holds the string denoting the movie_collection edge name in mutations.
	EdgeMovieCollection = "movie_collection"
	// Table holds the table name of the moviecollectionshare in the database.
	Table = "movie_collection_shares"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "movie_collection_shares"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_movie_collection_shares"
	// MovieCollectionTable is the table that holds the movie_collection relation/edge.
	MovieCollectionTable = "movie_collection_shares"
	// MovieCollectionInverseTable is the table name for the MovieCollection entity.
	// It exists in this package in order to avoid circular dependency with the "moviecollection" package.
	MovieCollectionInverseTable = "movie_collections"
	// MovieCollectionColumn is the table column denoting the movie_collection relation/edge.
	MovieCollectionColumn = "movie_collection_movie_collection_shares"
)

// Columns holds all SQL columns for moviecollectionshare fields.
var Columns = []string{
	FieldID,
	FieldCanEdit,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "movie_collection_shares"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"movie_collection_movie_collection_shares",
	"user_movie_collection_shares",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCanEdit holds the default value on creation for the "can_edit" field.
	DefaultCanEdit bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the MovieCollectionShare queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCanEdit orders the results by the can_edit field.
func ByCanEdit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanEdit, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByMovieCollectionField orders the results by movie_collection field.
func ByMovieCollectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMovieCollectionStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newMovieCollectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MovieCollectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MovieCollectionTable, MovieCollectionColumn),
	)
}
