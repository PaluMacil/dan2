// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldNameChanges holds the string denoting the name_changes field in the database.
	FieldNameChanges = "name_changes"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldVerified holds the string denoting the verified field in the database.
	FieldVerified = "verified"
	// FieldLocked holds the string denoting the locked field in the database.
	FieldLocked = "locked"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAmazonShares holds the string denoting the amazon_shares edge name in mutations.
	EdgeAmazonShares = "amazon_shares"
	// EdgeAmazonLists holds the string denoting the amazon_lists edge name in mutations.
	EdgeAmazonLists = "amazon_lists"
	// EdgeDrinks holds the string denoting the drinks edge name in mutations.
	EdgeDrinks = "drinks"
	// EdgeGroceryLists holds the string denoting the grocery_lists edge name in mutations.
	EdgeGroceryLists = "grocery_lists"
	// EdgeGroceryListShares holds the string denoting the grocery_list_shares edge name in mutations.
	EdgeGroceryListShares = "grocery_list_shares"
	// EdgeMovieCollections holds the string denoting the movie_collections edge name in mutations.
	EdgeMovieCollections = "movie_collections"
	// EdgeMovieCollectionShares holds the string denoting the movie_collection_shares edge name in mutations.
	EdgeMovieCollectionShares = "movie_collection_shares"
	// Table holds the table name of the user in the database.
	Table = "users"
	// AmazonSharesTable is the table that holds the amazon_shares relation/edge.
	AmazonSharesTable = "amazon_shares"
	// AmazonSharesInverseTable is the table name for the AmazonShare entity.
	// It exists in this package in order to avoid circular dependency with the "amazonshare" package.
	AmazonSharesInverseTable = "amazon_shares"
	// AmazonSharesColumn is the table column denoting the amazon_shares relation/edge.
	AmazonSharesColumn = "user_amazon_shares"
	// AmazonListsTable is the table that holds the amazon_lists relation/edge. The primary key declared below.
	AmazonListsTable = "user_amazon_lists"
	// AmazonListsInverseTable is the table name for the AmazonList entity.
	// It exists in this package in order to avoid circular dependency with the "amazonlist" package.
	AmazonListsInverseTable = "amazon_lists"
	// DrinksTable is the table that holds the drinks relation/edge.
	DrinksTable = "drinks"
	// DrinksInverseTable is the table name for the Drink entity.
	// It exists in this package in order to avoid circular dependency with the "drink" package.
	DrinksInverseTable = "drinks"
	// DrinksColumn is the table column denoting the drinks relation/edge.
	DrinksColumn = "user_drinks"
	// GroceryListsTable is the table that holds the grocery_lists relation/edge.
	GroceryListsTable = "grocery_lists"
	// GroceryListsInverseTable is the table name for the GroceryList entity.
	// It exists in this package in order to avoid circular dependency with the "grocerylist" package.
	GroceryListsInverseTable = "grocery_lists"
	// GroceryListsColumn is the table column denoting the grocery_lists relation/edge.
	GroceryListsColumn = "user_grocery_lists"
	// GroceryListSharesTable is the table that holds the grocery_list_shares relation/edge.
	GroceryListSharesTable = "grocery_list_shares"
	// GroceryListSharesInverseTable is the table name for the GroceryListShare entity.
	// It exists in this package in order to avoid circular dependency with the "grocerylistshare" package.
	GroceryListSharesInverseTable = "grocery_list_shares"
	// GroceryListSharesColumn is the table column denoting the grocery_list_shares relation/edge.
	GroceryListSharesColumn = "user_grocery_list_shares"
	// MovieCollectionsTable is the table that holds the movie_collections relation/edge.
	MovieCollectionsTable = "movie_collections"
	// MovieCollectionsInverseTable is the table name for the MovieCollection entity.
	// It exists in this package in order to avoid circular dependency with the "moviecollection" package.
	MovieCollectionsInverseTable = "movie_collections"
	// MovieCollectionsColumn is the table column denoting the movie_collections relation/edge.
	MovieCollectionsColumn = "user_movie_collections"
	// MovieCollectionSharesTable is the table that holds the movie_collection_shares relation/edge.
	MovieCollectionSharesTable = "movie_collection_shares"
	// MovieCollectionSharesInverseTable is the table name for the MovieCollectionShare entity.
	// It exists in this package in order to avoid circular dependency with the "moviecollectionshare" package.
	MovieCollectionSharesInverseTable = "movie_collection_shares"
	// MovieCollectionSharesColumn is the table column denoting the movie_collection_shares relation/edge.
	MovieCollectionSharesColumn = "user_movie_collection_shares"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldDisplayName,
	FieldNameChanges,
	FieldEmail,
	FieldVerified,
	FieldLocked,
	FieldLastLogin,
	FieldCreatedAt,
}

var (
	// AmazonListsPrimaryKey and AmazonListsColumn2 are the table columns denoting the
	// primary key for the amazon_lists relation (M2M).
	AmazonListsPrimaryKey = []string{"user_id", "amazon_list_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultNameChanges holds the default value on creation for the "name_changes" field.
	DefaultNameChanges int8
	// DefaultVerified holds the default value on creation for the "verified" field.
	DefaultVerified bool
	// DefaultLocked holds the default value on creation for the "locked" field.
	DefaultLocked bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByNameChanges orders the results by the name_changes field.
func ByNameChanges(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameChanges, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByVerified orders the results by the verified field.
func ByVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerified, opts...).ToFunc()
}

// ByLocked orders the results by the locked field.
func ByLocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocked, opts...).ToFunc()
}

// ByLastLogin orders the results by the last_login field.
func ByLastLogin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLogin, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAmazonSharesCount orders the results by amazon_shares count.
func ByAmazonSharesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAmazonSharesStep(), opts...)
	}
}

// ByAmazonShares orders the results by amazon_shares terms.
func ByAmazonShares(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAmazonSharesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAmazonListsCount orders the results by amazon_lists count.
func ByAmazonListsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAmazonListsStep(), opts...)
	}
}

// ByAmazonLists orders the results by amazon_lists terms.
func ByAmazonLists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAmazonListsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDrinksCount orders the results by drinks count.
func ByDrinksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDrinksStep(), opts...)
	}
}

// ByDrinks orders the results by drinks terms.
func ByDrinks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDrinksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroceryListsCount orders the results by grocery_lists count.
func ByGroceryListsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroceryListsStep(), opts...)
	}
}

// ByGroceryLists orders the results by grocery_lists terms.
func ByGroceryLists(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroceryListsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroceryListSharesCount orders the results by grocery_list_shares count.
func ByGroceryListSharesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroceryListSharesStep(), opts...)
	}
}

// ByGroceryListShares orders the results by grocery_list_shares terms.
func ByGroceryListShares(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroceryListSharesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMovieCollectionsCount orders the results by movie_collections count.
func ByMovieCollectionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMovieCollectionsStep(), opts...)
	}
}

// ByMovieCollections orders the results by movie_collections terms.
func ByMovieCollections(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMovieCollectionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMovieCollectionSharesCount orders the results by movie_collection_shares count.
func ByMovieCollectionSharesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMovieCollectionSharesStep(), opts...)
	}
}

// ByMovieCollectionShares orders the results by movie_collection_shares terms.
func ByMovieCollectionShares(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMovieCollectionSharesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAmazonSharesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AmazonSharesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AmazonSharesTable, AmazonSharesColumn),
	)
}
func newAmazonListsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AmazonListsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AmazonListsTable, AmazonListsPrimaryKey...),
	)
}
func newDrinksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DrinksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DrinksTable, DrinksColumn),
	)
}
func newGroceryListsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroceryListsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroceryListsTable, GroceryListsColumn),
	)
}
func newGroceryListSharesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroceryListSharesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroceryListSharesTable, GroceryListSharesColumn),
	)
}
func newMovieCollectionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MovieCollectionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MovieCollectionsTable, MovieCollectionsColumn),
	)
}
func newMovieCollectionSharesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MovieCollectionSharesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MovieCollectionSharesTable, MovieCollectionSharesColumn),
	)
}
