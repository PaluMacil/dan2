// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PaluMacil/dan2/ent/grocerylist"
)

// GroceryList is the model entity for the GroceryList schema.
type GroceryList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroceryListQuery when eager-loading is set.
	Edges        GroceryListEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GroceryListEdges holds the relations/edges for other nodes in the graph.
type GroceryListEdges struct {
	// GroceryListItems holds the value of the grocery_list_items edge.
	GroceryListItems []*GroceryListItem `json:"grocery_list_items,omitempty"`
	// Owner holds the value of the owner edge.
	Owner []*User `json:"owner,omitempty"`
	// GroceryListShares holds the value of the grocery_list_shares edge.
	GroceryListShares []*GroceryListShare `json:"grocery_list_shares,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GroceryListItemsOrErr returns the GroceryListItems value or an error if the edge
// was not loaded in eager-loading.
func (e GroceryListEdges) GroceryListItemsOrErr() ([]*GroceryListItem, error) {
	if e.loadedTypes[0] {
		return e.GroceryListItems, nil
	}
	return nil, &NotLoadedError{edge: "grocery_list_items"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e GroceryListEdges) OwnerOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// GroceryListSharesOrErr returns the GroceryListShares value or an error if the edge
// was not loaded in eager-loading.
func (e GroceryListEdges) GroceryListSharesOrErr() ([]*GroceryListShare, error) {
	if e.loadedTypes[2] {
		return e.GroceryListShares, nil
	}
	return nil, &NotLoadedError{edge: "grocery_list_shares"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroceryList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case grocerylist.FieldArchived:
			values[i] = new(sql.NullBool)
		case grocerylist.FieldID:
			values[i] = new(sql.NullInt64)
		case grocerylist.FieldName, grocerylist.FieldNote:
			values[i] = new(sql.NullString)
		case grocerylist.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroceryList fields.
func (gl *GroceryList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case grocerylist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gl.ID = int(value.Int64)
		case grocerylist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gl.Name = value.String
			}
		case grocerylist.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				gl.Note = value.String
			}
		case grocerylist.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				gl.Archived = value.Bool
			}
		case grocerylist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gl.CreatedAt = value.Time
			}
		default:
			gl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroceryList.
// This includes values selected through modifiers, order, etc.
func (gl *GroceryList) Value(name string) (ent.Value, error) {
	return gl.selectValues.Get(name)
}

// QueryGroceryListItems queries the "grocery_list_items" edge of the GroceryList entity.
func (gl *GroceryList) QueryGroceryListItems() *GroceryListItemQuery {
	return NewGroceryListClient(gl.config).QueryGroceryListItems(gl)
}

// QueryOwner queries the "owner" edge of the GroceryList entity.
func (gl *GroceryList) QueryOwner() *UserQuery {
	return NewGroceryListClient(gl.config).QueryOwner(gl)
}

// QueryGroceryListShares queries the "grocery_list_shares" edge of the GroceryList entity.
func (gl *GroceryList) QueryGroceryListShares() *GroceryListShareQuery {
	return NewGroceryListClient(gl.config).QueryGroceryListShares(gl)
}

// Update returns a builder for updating this GroceryList.
// Note that you need to call GroceryList.Unwrap() before calling this method if this GroceryList
// was returned from a transaction, and the transaction was committed or rolled back.
func (gl *GroceryList) Update() *GroceryListUpdateOne {
	return NewGroceryListClient(gl.config).UpdateOne(gl)
}

// Unwrap unwraps the GroceryList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gl *GroceryList) Unwrap() *GroceryList {
	_tx, ok := gl.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroceryList is not a transactional entity")
	}
	gl.config.driver = _tx.drv
	return gl
}

// String implements the fmt.Stringer.
func (gl *GroceryList) String() string {
	var builder strings.Builder
	builder.WriteString("GroceryList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gl.ID))
	builder.WriteString("name=")
	builder.WriteString(gl.Name)
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(gl.Note)
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", gl.Archived))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GroceryLists is a parsable slice of GroceryList.
type GroceryLists []*GroceryList
