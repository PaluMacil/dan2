// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/amazonlist"
	"github.com/PaluMacil/dan2/ent/amazonorder"
	"github.com/PaluMacil/dan2/ent/amazonshare"
	"github.com/PaluMacil/dan2/ent/user"
)

// AmazonListCreate is the builder for creating a AmazonList entity.
type AmazonListCreate struct {
	config
	mutation *AmazonListMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (alc *AmazonListCreate) SetCreatedAt(t time.Time) *AmazonListCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *AmazonListCreate) SetNillableCreatedAt(t *time.Time) *AmazonListCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// AddAmazonOrderIDs adds the "amazon_orders" edge to the AmazonOrder entity by IDs.
func (alc *AmazonListCreate) AddAmazonOrderIDs(ids ...int) *AmazonListCreate {
	alc.mutation.AddAmazonOrderIDs(ids...)
	return alc
}

// AddAmazonOrders adds the "amazon_orders" edges to the AmazonOrder entity.
func (alc *AmazonListCreate) AddAmazonOrders(a ...*AmazonOrder) *AmazonListCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return alc.AddAmazonOrderIDs(ids...)
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (alc *AmazonListCreate) AddOwnerIDs(ids ...int) *AmazonListCreate {
	alc.mutation.AddOwnerIDs(ids...)
	return alc
}

// AddOwner adds the "owner" edges to the User entity.
func (alc *AmazonListCreate) AddOwner(u ...*User) *AmazonListCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return alc.AddOwnerIDs(ids...)
}

// AddAmazonShareIDs adds the "amazon_shares" edge to the AmazonShare entity by IDs.
func (alc *AmazonListCreate) AddAmazonShareIDs(ids ...int) *AmazonListCreate {
	alc.mutation.AddAmazonShareIDs(ids...)
	return alc
}

// AddAmazonShares adds the "amazon_shares" edges to the AmazonShare entity.
func (alc *AmazonListCreate) AddAmazonShares(a ...*AmazonShare) *AmazonListCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return alc.AddAmazonShareIDs(ids...)
}

// Mutation returns the AmazonListMutation object of the builder.
func (alc *AmazonListCreate) Mutation() *AmazonListMutation {
	return alc.mutation
}

// Save creates the AmazonList in the database.
func (alc *AmazonListCreate) Save(ctx context.Context) (*AmazonList, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *AmazonListCreate) SaveX(ctx context.Context) *AmazonList {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *AmazonListCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *AmazonListCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *AmazonListCreate) defaults() {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		v := amazonlist.DefaultCreatedAt()
		alc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *AmazonListCreate) check() error {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AmazonList.created_at"`)}
	}
	return nil
}

func (alc *AmazonListCreate) sqlSave(ctx context.Context) (*AmazonList, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *AmazonListCreate) createSpec() (*AmazonList, *sqlgraph.CreateSpec) {
	var (
		_node = &AmazonList{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(amazonlist.Table, sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt))
	)
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(amazonlist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := alc.mutation.AmazonOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   amazonlist.AmazonOrdersTable,
			Columns: amazonlist.AmazonOrdersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonorder.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := alc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amazonlist.OwnerTable,
			Columns: amazonlist.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := alc.mutation.AmazonSharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   amazonlist.AmazonSharesTable,
			Columns: amazonlist.AmazonSharesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AmazonListCreateBulk is the builder for creating many AmazonList entities in bulk.
type AmazonListCreateBulk struct {
	config
	builders []*AmazonListCreate
}

// Save creates the AmazonList entities in the database.
func (alcb *AmazonListCreateBulk) Save(ctx context.Context) ([]*AmazonList, error) {
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*AmazonList, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AmazonListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *AmazonListCreateBulk) SaveX(ctx context.Context) []*AmazonList {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *AmazonListCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *AmazonListCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
