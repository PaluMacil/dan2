// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PaluMacil/dan2/ent/amazonlist"
)

// AmazonList is the model entity for the AmazonList schema.
type AmazonList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AmazonListQuery when eager-loading is set.
	Edges        AmazonListEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AmazonListEdges holds the relations/edges for other nodes in the graph.
type AmazonListEdges struct {
	// AmazonOrders holds the value of the amazon_orders edge.
	AmazonOrders []*AmazonOrder `json:"amazon_orders,omitempty"`
	// Owner holds the value of the owner edge.
	Owner []*User `json:"owner,omitempty"`
	// AmazonShares holds the value of the amazon_shares edge.
	AmazonShares []*AmazonShare `json:"amazon_shares,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AmazonOrdersOrErr returns the AmazonOrders value or an error if the edge
// was not loaded in eager-loading.
func (e AmazonListEdges) AmazonOrdersOrErr() ([]*AmazonOrder, error) {
	if e.loadedTypes[0] {
		return e.AmazonOrders, nil
	}
	return nil, &NotLoadedError{edge: "amazon_orders"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e AmazonListEdges) OwnerOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// AmazonSharesOrErr returns the AmazonShares value or an error if the edge
// was not loaded in eager-loading.
func (e AmazonListEdges) AmazonSharesOrErr() ([]*AmazonShare, error) {
	if e.loadedTypes[2] {
		return e.AmazonShares, nil
	}
	return nil, &NotLoadedError{edge: "amazon_shares"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AmazonList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case amazonlist.FieldID:
			values[i] = new(sql.NullInt64)
		case amazonlist.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AmazonList fields.
func (al *AmazonList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case amazonlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case amazonlist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				al.CreatedAt = value.Time
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AmazonList.
// This includes values selected through modifiers, order, etc.
func (al *AmazonList) Value(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// QueryAmazonOrders queries the "amazon_orders" edge of the AmazonList entity.
func (al *AmazonList) QueryAmazonOrders() *AmazonOrderQuery {
	return NewAmazonListClient(al.config).QueryAmazonOrders(al)
}

// QueryOwner queries the "owner" edge of the AmazonList entity.
func (al *AmazonList) QueryOwner() *UserQuery {
	return NewAmazonListClient(al.config).QueryOwner(al)
}

// QueryAmazonShares queries the "amazon_shares" edge of the AmazonList entity.
func (al *AmazonList) QueryAmazonShares() *AmazonShareQuery {
	return NewAmazonListClient(al.config).QueryAmazonShares(al)
}

// Update returns a builder for updating this AmazonList.
// Note that you need to call AmazonList.Unwrap() before calling this method if this AmazonList
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AmazonList) Update() *AmazonListUpdateOne {
	return NewAmazonListClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AmazonList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AmazonList) Unwrap() *AmazonList {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AmazonList is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AmazonList) String() string {
	var builder strings.Builder
	builder.WriteString("AmazonList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("created_at=")
	builder.WriteString(al.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AmazonLists is a parsable slice of AmazonList.
type AmazonLists []*AmazonList
