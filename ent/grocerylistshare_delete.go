// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/grocerylistshare"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// GroceryListShareDelete is the builder for deleting a GroceryListShare entity.
type GroceryListShareDelete struct {
	config
	hooks    []Hook
	mutation *GroceryListShareMutation
}

// Where appends a list predicates to the GroceryListShareDelete builder.
func (glsd *GroceryListShareDelete) Where(ps ...predicate.GroceryListShare) *GroceryListShareDelete {
	glsd.mutation.Where(ps...)
	return glsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (glsd *GroceryListShareDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, glsd.sqlExec, glsd.mutation, glsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (glsd *GroceryListShareDelete) ExecX(ctx context.Context) int {
	n, err := glsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (glsd *GroceryListShareDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(grocerylistshare.Table, sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt))
	if ps := glsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, glsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	glsd.mutation.done = true
	return affected, err
}

// GroceryListShareDeleteOne is the builder for deleting a single GroceryListShare entity.
type GroceryListShareDeleteOne struct {
	glsd *GroceryListShareDelete
}

// Where appends a list predicates to the GroceryListShareDelete builder.
func (glsdo *GroceryListShareDeleteOne) Where(ps ...predicate.GroceryListShare) *GroceryListShareDeleteOne {
	glsdo.glsd.mutation.Where(ps...)
	return glsdo
}

// Exec executes the deletion query.
func (glsdo *GroceryListShareDeleteOne) Exec(ctx context.Context) error {
	n, err := glsdo.glsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{grocerylistshare.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (glsdo *GroceryListShareDeleteOne) ExecX(ctx context.Context) {
	if err := glsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
