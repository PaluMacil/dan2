// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PaluMacil/dan2/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// NameChanges holds the value of the "name_changes" field.
	NameChanges int8 `json:"name_changes,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Verified holds the value of the "verified" field.
	Verified bool `json:"verified,omitempty"`
	// Locked holds the value of the "locked" field.
	Locked bool `json:"locked,omitempty"`
	// LastLogin holds the value of the "last_login" field.
	LastLogin *time.Time `json:"last_login,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// AmazonShares holds the value of the amazon_shares edge.
	AmazonShares []*AmazonShare `json:"amazon_shares,omitempty"`
	// AmazonLists holds the value of the amazon_lists edge.
	AmazonLists []*AmazonList `json:"amazon_lists,omitempty"`
	// Drinks holds the value of the drinks edge.
	Drinks []*Drink `json:"drinks,omitempty"`
	// GroceryLists holds the value of the grocery_lists edge.
	GroceryLists []*GroceryList `json:"grocery_lists,omitempty"`
	// GroceryListShares holds the value of the grocery_list_shares edge.
	GroceryListShares []*GroceryListShare `json:"grocery_list_shares,omitempty"`
	// MovieCollections holds the value of the movie_collections edge.
	MovieCollections []*MovieCollection `json:"movie_collections,omitempty"`
	// MovieCollectionShares holds the value of the movie_collection_shares edge.
	MovieCollectionShares []*MovieCollectionShare `json:"movie_collection_shares,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// AmazonSharesOrErr returns the AmazonShares value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AmazonSharesOrErr() ([]*AmazonShare, error) {
	if e.loadedTypes[0] {
		return e.AmazonShares, nil
	}
	return nil, &NotLoadedError{edge: "amazon_shares"}
}

// AmazonListsOrErr returns the AmazonLists value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AmazonListsOrErr() ([]*AmazonList, error) {
	if e.loadedTypes[1] {
		return e.AmazonLists, nil
	}
	return nil, &NotLoadedError{edge: "amazon_lists"}
}

// DrinksOrErr returns the Drinks value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DrinksOrErr() ([]*Drink, error) {
	if e.loadedTypes[2] {
		return e.Drinks, nil
	}
	return nil, &NotLoadedError{edge: "drinks"}
}

// GroceryListsOrErr returns the GroceryLists value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroceryListsOrErr() ([]*GroceryList, error) {
	if e.loadedTypes[3] {
		return e.GroceryLists, nil
	}
	return nil, &NotLoadedError{edge: "grocery_lists"}
}

// GroceryListSharesOrErr returns the GroceryListShares value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroceryListSharesOrErr() ([]*GroceryListShare, error) {
	if e.loadedTypes[4] {
		return e.GroceryListShares, nil
	}
	return nil, &NotLoadedError{edge: "grocery_list_shares"}
}

// MovieCollectionsOrErr returns the MovieCollections value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MovieCollectionsOrErr() ([]*MovieCollection, error) {
	if e.loadedTypes[5] {
		return e.MovieCollections, nil
	}
	return nil, &NotLoadedError{edge: "movie_collections"}
}

// MovieCollectionSharesOrErr returns the MovieCollectionShares value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MovieCollectionSharesOrErr() ([]*MovieCollectionShare, error) {
	if e.loadedTypes[6] {
		return e.MovieCollectionShares, nil
	}
	return nil, &NotLoadedError{edge: "movie_collection_shares"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldVerified, user.FieldLocked:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldNameChanges:
			values[i] = new(sql.NullInt64)
		case user.FieldDisplayName, user.FieldEmail:
			values[i] = new(sql.NullString)
		case user.FieldLastLogin, user.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldNameChanges:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field name_changes", values[i])
			} else if value.Valid {
				u.NameChanges = int8(value.Int64)
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				u.Verified = value.Bool
			}
		case user.FieldLocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field locked", values[i])
			} else if value.Valid {
				u.Locked = value.Bool
			}
		case user.FieldLastLogin:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login", values[i])
			} else if value.Valid {
				u.LastLogin = new(time.Time)
				*u.LastLogin = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryAmazonShares queries the "amazon_shares" edge of the User entity.
func (u *User) QueryAmazonShares() *AmazonShareQuery {
	return NewUserClient(u.config).QueryAmazonShares(u)
}

// QueryAmazonLists queries the "amazon_lists" edge of the User entity.
func (u *User) QueryAmazonLists() *AmazonListQuery {
	return NewUserClient(u.config).QueryAmazonLists(u)
}

// QueryDrinks queries the "drinks" edge of the User entity.
func (u *User) QueryDrinks() *DrinkQuery {
	return NewUserClient(u.config).QueryDrinks(u)
}

// QueryGroceryLists queries the "grocery_lists" edge of the User entity.
func (u *User) QueryGroceryLists() *GroceryListQuery {
	return NewUserClient(u.config).QueryGroceryLists(u)
}

// QueryGroceryListShares queries the "grocery_list_shares" edge of the User entity.
func (u *User) QueryGroceryListShares() *GroceryListShareQuery {
	return NewUserClient(u.config).QueryGroceryListShares(u)
}

// QueryMovieCollections queries the "movie_collections" edge of the User entity.
func (u *User) QueryMovieCollections() *MovieCollectionQuery {
	return NewUserClient(u.config).QueryMovieCollections(u)
}

// QueryMovieCollectionShares queries the "movie_collection_shares" edge of the User entity.
func (u *User) QueryMovieCollectionShares() *MovieCollectionShareQuery {
	return NewUserClient(u.config).QueryMovieCollectionShares(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("display_name=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("name_changes=")
	builder.WriteString(fmt.Sprintf("%v", u.NameChanges))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", u.Verified))
	builder.WriteString(", ")
	builder.WriteString("locked=")
	builder.WriteString(fmt.Sprintf("%v", u.Locked))
	builder.WriteString(", ")
	if v := u.LastLogin; v != nil {
		builder.WriteString("last_login=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
