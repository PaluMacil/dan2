// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/grocerylist"
	"github.com/PaluMacil/dan2/ent/grocerylistitem"
)

// GroceryListItemCreate is the builder for creating a GroceryListItem entity.
type GroceryListItemCreate struct {
	config
	mutation *GroceryListItemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (glic *GroceryListItemCreate) SetName(s string) *GroceryListItemCreate {
	glic.mutation.SetName(s)
	return glic
}

// SetQuantity sets the "quantity" field.
func (glic *GroceryListItemCreate) SetQuantity(i int) *GroceryListItemCreate {
	glic.mutation.SetQuantity(i)
	return glic
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (glic *GroceryListItemCreate) SetNillableQuantity(i *int) *GroceryListItemCreate {
	if i != nil {
		glic.SetQuantity(*i)
	}
	return glic
}

// SetNote sets the "note" field.
func (glic *GroceryListItemCreate) SetNote(s string) *GroceryListItemCreate {
	glic.mutation.SetNote(s)
	return glic
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (glic *GroceryListItemCreate) SetNillableNote(s *string) *GroceryListItemCreate {
	if s != nil {
		glic.SetNote(*s)
	}
	return glic
}

// SetCreatedAt sets the "created_at" field.
func (glic *GroceryListItemCreate) SetCreatedAt(t time.Time) *GroceryListItemCreate {
	glic.mutation.SetCreatedAt(t)
	return glic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (glic *GroceryListItemCreate) SetNillableCreatedAt(t *time.Time) *GroceryListItemCreate {
	if t != nil {
		glic.SetCreatedAt(*t)
	}
	return glic
}

// AddGroceryListIDs adds the "grocery_list" edge to the GroceryList entity by IDs.
func (glic *GroceryListItemCreate) AddGroceryListIDs(ids ...int) *GroceryListItemCreate {
	glic.mutation.AddGroceryListIDs(ids...)
	return glic
}

// AddGroceryList adds the "grocery_list" edges to the GroceryList entity.
func (glic *GroceryListItemCreate) AddGroceryList(g ...*GroceryList) *GroceryListItemCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return glic.AddGroceryListIDs(ids...)
}

// Mutation returns the GroceryListItemMutation object of the builder.
func (glic *GroceryListItemCreate) Mutation() *GroceryListItemMutation {
	return glic.mutation
}

// Save creates the GroceryListItem in the database.
func (glic *GroceryListItemCreate) Save(ctx context.Context) (*GroceryListItem, error) {
	glic.defaults()
	return withHooks(ctx, glic.sqlSave, glic.mutation, glic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (glic *GroceryListItemCreate) SaveX(ctx context.Context) *GroceryListItem {
	v, err := glic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glic *GroceryListItemCreate) Exec(ctx context.Context) error {
	_, err := glic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glic *GroceryListItemCreate) ExecX(ctx context.Context) {
	if err := glic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (glic *GroceryListItemCreate) defaults() {
	if _, ok := glic.mutation.Quantity(); !ok {
		v := grocerylistitem.DefaultQuantity
		glic.mutation.SetQuantity(v)
	}
	if _, ok := glic.mutation.Note(); !ok {
		v := grocerylistitem.DefaultNote
		glic.mutation.SetNote(v)
	}
	if _, ok := glic.mutation.CreatedAt(); !ok {
		v := grocerylistitem.DefaultCreatedAt()
		glic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (glic *GroceryListItemCreate) check() error {
	if _, ok := glic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "GroceryListItem.name"`)}
	}
	if _, ok := glic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "GroceryListItem.quantity"`)}
	}
	if _, ok := glic.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "GroceryListItem.note"`)}
	}
	if _, ok := glic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GroceryListItem.created_at"`)}
	}
	return nil
}

func (glic *GroceryListItemCreate) sqlSave(ctx context.Context) (*GroceryListItem, error) {
	if err := glic.check(); err != nil {
		return nil, err
	}
	_node, _spec := glic.createSpec()
	if err := sqlgraph.CreateNode(ctx, glic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	glic.mutation.id = &_node.ID
	glic.mutation.done = true
	return _node, nil
}

func (glic *GroceryListItemCreate) createSpec() (*GroceryListItem, *sqlgraph.CreateSpec) {
	var (
		_node = &GroceryListItem{config: glic.config}
		_spec = sqlgraph.NewCreateSpec(grocerylistitem.Table, sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt))
	)
	if value, ok := glic.mutation.Name(); ok {
		_spec.SetField(grocerylistitem.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := glic.mutation.Quantity(); ok {
		_spec.SetField(grocerylistitem.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := glic.mutation.Note(); ok {
		_spec.SetField(grocerylistitem.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := glic.mutation.CreatedAt(); ok {
		_spec.SetField(grocerylistitem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := glic.mutation.GroceryListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistitem.GroceryListTable,
			Columns: grocerylistitem.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroceryListItemCreateBulk is the builder for creating many GroceryListItem entities in bulk.
type GroceryListItemCreateBulk struct {
	config
	builders []*GroceryListItemCreate
}

// Save creates the GroceryListItem entities in the database.
func (glicb *GroceryListItemCreateBulk) Save(ctx context.Context) ([]*GroceryListItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(glicb.builders))
	nodes := make([]*GroceryListItem, len(glicb.builders))
	mutators := make([]Mutator, len(glicb.builders))
	for i := range glicb.builders {
		func(i int, root context.Context) {
			builder := glicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroceryListItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, glicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, glicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, glicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (glicb *GroceryListItemCreateBulk) SaveX(ctx context.Context) []*GroceryListItem {
	v, err := glicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glicb *GroceryListItemCreateBulk) Exec(ctx context.Context) error {
	_, err := glicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glicb *GroceryListItemCreateBulk) ExecX(ctx context.Context) {
	if err := glicb.Exec(ctx); err != nil {
		panic(err)
	}
}
