// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/moviecollection"
	"github.com/PaluMacil/dan2/ent/moviecollectionshare"
	"github.com/PaluMacil/dan2/ent/predicate"
	"github.com/PaluMacil/dan2/ent/user"
)

// MovieCollectionShareQuery is the builder for querying MovieCollectionShare entities.
type MovieCollectionShareQuery struct {
	config
	ctx                 *QueryContext
	order               []moviecollectionshare.OrderOption
	inters              []Interceptor
	predicates          []predicate.MovieCollectionShare
	withUser            *UserQuery
	withMovieCollection *MovieCollectionQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MovieCollectionShareQuery builder.
func (mcsq *MovieCollectionShareQuery) Where(ps ...predicate.MovieCollectionShare) *MovieCollectionShareQuery {
	mcsq.predicates = append(mcsq.predicates, ps...)
	return mcsq
}

// Limit the number of records to be returned by this query.
func (mcsq *MovieCollectionShareQuery) Limit(limit int) *MovieCollectionShareQuery {
	mcsq.ctx.Limit = &limit
	return mcsq
}

// Offset to start from.
func (mcsq *MovieCollectionShareQuery) Offset(offset int) *MovieCollectionShareQuery {
	mcsq.ctx.Offset = &offset
	return mcsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mcsq *MovieCollectionShareQuery) Unique(unique bool) *MovieCollectionShareQuery {
	mcsq.ctx.Unique = &unique
	return mcsq
}

// Order specifies how the records should be ordered.
func (mcsq *MovieCollectionShareQuery) Order(o ...moviecollectionshare.OrderOption) *MovieCollectionShareQuery {
	mcsq.order = append(mcsq.order, o...)
	return mcsq
}

// QueryUser chains the current query on the "user" edge.
func (mcsq *MovieCollectionShareQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: mcsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mcsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mcsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(moviecollectionshare.Table, moviecollectionshare.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, moviecollectionshare.UserTable, moviecollectionshare.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(mcsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMovieCollection chains the current query on the "movie_collection" edge.
func (mcsq *MovieCollectionShareQuery) QueryMovieCollection() *MovieCollectionQuery {
	query := (&MovieCollectionClient{config: mcsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mcsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mcsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(moviecollectionshare.Table, moviecollectionshare.FieldID, selector),
			sqlgraph.To(moviecollection.Table, moviecollection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, moviecollectionshare.MovieCollectionTable, moviecollectionshare.MovieCollectionColumn),
		)
		fromU = sqlgraph.SetNeighbors(mcsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MovieCollectionShare entity from the query.
// Returns a *NotFoundError when no MovieCollectionShare was found.
func (mcsq *MovieCollectionShareQuery) First(ctx context.Context) (*MovieCollectionShare, error) {
	nodes, err := mcsq.Limit(1).All(setContextOp(ctx, mcsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{moviecollectionshare.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mcsq *MovieCollectionShareQuery) FirstX(ctx context.Context) *MovieCollectionShare {
	node, err := mcsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MovieCollectionShare ID from the query.
// Returns a *NotFoundError when no MovieCollectionShare ID was found.
func (mcsq *MovieCollectionShareQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mcsq.Limit(1).IDs(setContextOp(ctx, mcsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{moviecollectionshare.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mcsq *MovieCollectionShareQuery) FirstIDX(ctx context.Context) int {
	id, err := mcsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MovieCollectionShare entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MovieCollectionShare entity is found.
// Returns a *NotFoundError when no MovieCollectionShare entities are found.
func (mcsq *MovieCollectionShareQuery) Only(ctx context.Context) (*MovieCollectionShare, error) {
	nodes, err := mcsq.Limit(2).All(setContextOp(ctx, mcsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{moviecollectionshare.Label}
	default:
		return nil, &NotSingularError{moviecollectionshare.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mcsq *MovieCollectionShareQuery) OnlyX(ctx context.Context) *MovieCollectionShare {
	node, err := mcsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MovieCollectionShare ID in the query.
// Returns a *NotSingularError when more than one MovieCollectionShare ID is found.
// Returns a *NotFoundError when no entities are found.
func (mcsq *MovieCollectionShareQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mcsq.Limit(2).IDs(setContextOp(ctx, mcsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{moviecollectionshare.Label}
	default:
		err = &NotSingularError{moviecollectionshare.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mcsq *MovieCollectionShareQuery) OnlyIDX(ctx context.Context) int {
	id, err := mcsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MovieCollectionShares.
func (mcsq *MovieCollectionShareQuery) All(ctx context.Context) ([]*MovieCollectionShare, error) {
	ctx = setContextOp(ctx, mcsq.ctx, "All")
	if err := mcsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MovieCollectionShare, *MovieCollectionShareQuery]()
	return withInterceptors[[]*MovieCollectionShare](ctx, mcsq, qr, mcsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mcsq *MovieCollectionShareQuery) AllX(ctx context.Context) []*MovieCollectionShare {
	nodes, err := mcsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MovieCollectionShare IDs.
func (mcsq *MovieCollectionShareQuery) IDs(ctx context.Context) (ids []int, err error) {
	if mcsq.ctx.Unique == nil && mcsq.path != nil {
		mcsq.Unique(true)
	}
	ctx = setContextOp(ctx, mcsq.ctx, "IDs")
	if err = mcsq.Select(moviecollectionshare.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mcsq *MovieCollectionShareQuery) IDsX(ctx context.Context) []int {
	ids, err := mcsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mcsq *MovieCollectionShareQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mcsq.ctx, "Count")
	if err := mcsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mcsq, querierCount[*MovieCollectionShareQuery](), mcsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mcsq *MovieCollectionShareQuery) CountX(ctx context.Context) int {
	count, err := mcsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mcsq *MovieCollectionShareQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mcsq.ctx, "Exist")
	switch _, err := mcsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mcsq *MovieCollectionShareQuery) ExistX(ctx context.Context) bool {
	exist, err := mcsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MovieCollectionShareQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mcsq *MovieCollectionShareQuery) Clone() *MovieCollectionShareQuery {
	if mcsq == nil {
		return nil
	}
	return &MovieCollectionShareQuery{
		config:              mcsq.config,
		ctx:                 mcsq.ctx.Clone(),
		order:               append([]moviecollectionshare.OrderOption{}, mcsq.order...),
		inters:              append([]Interceptor{}, mcsq.inters...),
		predicates:          append([]predicate.MovieCollectionShare{}, mcsq.predicates...),
		withUser:            mcsq.withUser.Clone(),
		withMovieCollection: mcsq.withMovieCollection.Clone(),
		// clone intermediate query.
		sql:  mcsq.sql.Clone(),
		path: mcsq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (mcsq *MovieCollectionShareQuery) WithUser(opts ...func(*UserQuery)) *MovieCollectionShareQuery {
	query := (&UserClient{config: mcsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mcsq.withUser = query
	return mcsq
}

// WithMovieCollection tells the query-builder to eager-load the nodes that are connected to
// the "movie_collection" edge. The optional arguments are used to configure the query builder of the edge.
func (mcsq *MovieCollectionShareQuery) WithMovieCollection(opts ...func(*MovieCollectionQuery)) *MovieCollectionShareQuery {
	query := (&MovieCollectionClient{config: mcsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mcsq.withMovieCollection = query
	return mcsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CanEdit bool `json:"can_edit,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MovieCollectionShare.Query().
//		GroupBy(moviecollectionshare.FieldCanEdit).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mcsq *MovieCollectionShareQuery) GroupBy(field string, fields ...string) *MovieCollectionShareGroupBy {
	mcsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MovieCollectionShareGroupBy{build: mcsq}
	grbuild.flds = &mcsq.ctx.Fields
	grbuild.label = moviecollectionshare.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CanEdit bool `json:"can_edit,omitempty"`
//	}
//
//	client.MovieCollectionShare.Query().
//		Select(moviecollectionshare.FieldCanEdit).
//		Scan(ctx, &v)
func (mcsq *MovieCollectionShareQuery) Select(fields ...string) *MovieCollectionShareSelect {
	mcsq.ctx.Fields = append(mcsq.ctx.Fields, fields...)
	sbuild := &MovieCollectionShareSelect{MovieCollectionShareQuery: mcsq}
	sbuild.label = moviecollectionshare.Label
	sbuild.flds, sbuild.scan = &mcsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MovieCollectionShareSelect configured with the given aggregations.
func (mcsq *MovieCollectionShareQuery) Aggregate(fns ...AggregateFunc) *MovieCollectionShareSelect {
	return mcsq.Select().Aggregate(fns...)
}

func (mcsq *MovieCollectionShareQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mcsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mcsq); err != nil {
				return err
			}
		}
	}
	for _, f := range mcsq.ctx.Fields {
		if !moviecollectionshare.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mcsq.path != nil {
		prev, err := mcsq.path(ctx)
		if err != nil {
			return err
		}
		mcsq.sql = prev
	}
	return nil
}

func (mcsq *MovieCollectionShareQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MovieCollectionShare, error) {
	var (
		nodes       = []*MovieCollectionShare{}
		withFKs     = mcsq.withFKs
		_spec       = mcsq.querySpec()
		loadedTypes = [2]bool{
			mcsq.withUser != nil,
			mcsq.withMovieCollection != nil,
		}
	)
	if mcsq.withUser != nil || mcsq.withMovieCollection != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, moviecollectionshare.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MovieCollectionShare).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MovieCollectionShare{config: mcsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mcsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mcsq.withUser; query != nil {
		if err := mcsq.loadUser(ctx, query, nodes, nil,
			func(n *MovieCollectionShare, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := mcsq.withMovieCollection; query != nil {
		if err := mcsq.loadMovieCollection(ctx, query, nodes, nil,
			func(n *MovieCollectionShare, e *MovieCollection) { n.Edges.MovieCollection = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mcsq *MovieCollectionShareQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*MovieCollectionShare, init func(*MovieCollectionShare), assign func(*MovieCollectionShare, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MovieCollectionShare)
	for i := range nodes {
		if nodes[i].user_movie_collection_shares == nil {
			continue
		}
		fk := *nodes[i].user_movie_collection_shares
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_movie_collection_shares" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mcsq *MovieCollectionShareQuery) loadMovieCollection(ctx context.Context, query *MovieCollectionQuery, nodes []*MovieCollectionShare, init func(*MovieCollectionShare), assign func(*MovieCollectionShare, *MovieCollection)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MovieCollectionShare)
	for i := range nodes {
		if nodes[i].movie_collection_movie_collection_shares == nil {
			continue
		}
		fk := *nodes[i].movie_collection_movie_collection_shares
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(moviecollection.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "movie_collection_movie_collection_shares" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mcsq *MovieCollectionShareQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mcsq.querySpec()
	_spec.Node.Columns = mcsq.ctx.Fields
	if len(mcsq.ctx.Fields) > 0 {
		_spec.Unique = mcsq.ctx.Unique != nil && *mcsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mcsq.driver, _spec)
}

func (mcsq *MovieCollectionShareQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(moviecollectionshare.Table, moviecollectionshare.Columns, sqlgraph.NewFieldSpec(moviecollectionshare.FieldID, field.TypeInt))
	_spec.From = mcsq.sql
	if unique := mcsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mcsq.path != nil {
		_spec.Unique = true
	}
	if fields := mcsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moviecollectionshare.FieldID)
		for i := range fields {
			if fields[i] != moviecollectionshare.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mcsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mcsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mcsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mcsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mcsq *MovieCollectionShareQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mcsq.driver.Dialect())
	t1 := builder.Table(moviecollectionshare.Table)
	columns := mcsq.ctx.Fields
	if len(columns) == 0 {
		columns = moviecollectionshare.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mcsq.sql != nil {
		selector = mcsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mcsq.ctx.Unique != nil && *mcsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mcsq.predicates {
		p(selector)
	}
	for _, p := range mcsq.order {
		p(selector)
	}
	if offset := mcsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mcsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MovieCollectionShareGroupBy is the group-by builder for MovieCollectionShare entities.
type MovieCollectionShareGroupBy struct {
	selector
	build *MovieCollectionShareQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mcsgb *MovieCollectionShareGroupBy) Aggregate(fns ...AggregateFunc) *MovieCollectionShareGroupBy {
	mcsgb.fns = append(mcsgb.fns, fns...)
	return mcsgb
}

// Scan applies the selector query and scans the result into the given value.
func (mcsgb *MovieCollectionShareGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mcsgb.build.ctx, "GroupBy")
	if err := mcsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MovieCollectionShareQuery, *MovieCollectionShareGroupBy](ctx, mcsgb.build, mcsgb, mcsgb.build.inters, v)
}

func (mcsgb *MovieCollectionShareGroupBy) sqlScan(ctx context.Context, root *MovieCollectionShareQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mcsgb.fns))
	for _, fn := range mcsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mcsgb.flds)+len(mcsgb.fns))
		for _, f := range *mcsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mcsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mcsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MovieCollectionShareSelect is the builder for selecting fields of MovieCollectionShare entities.
type MovieCollectionShareSelect struct {
	*MovieCollectionShareQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mcss *MovieCollectionShareSelect) Aggregate(fns ...AggregateFunc) *MovieCollectionShareSelect {
	mcss.fns = append(mcss.fns, fns...)
	return mcss
}

// Scan applies the selector query and scans the result into the given value.
func (mcss *MovieCollectionShareSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mcss.ctx, "Select")
	if err := mcss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MovieCollectionShareQuery, *MovieCollectionShareSelect](ctx, mcss.MovieCollectionShareQuery, mcss, mcss.inters, v)
}

func (mcss *MovieCollectionShareSelect) sqlScan(ctx context.Context, root *MovieCollectionShareQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mcss.fns))
	for _, fn := range mcss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mcss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mcss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
