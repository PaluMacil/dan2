// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/drink"
	"github.com/PaluMacil/dan2/ent/predicate"
	"github.com/PaluMacil/dan2/ent/user"
)

// DrinkUpdate is the builder for updating Drink entities.
type DrinkUpdate struct {
	config
	hooks    []Hook
	mutation *DrinkMutation
}

// Where appends a list predicates to the DrinkUpdate builder.
func (du *DrinkUpdate) Where(ps ...predicate.Drink) *DrinkUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetType sets the "type" field.
func (du *DrinkUpdate) SetType(d drink.Type) *DrinkUpdate {
	du.mutation.SetType(d)
	return du
}

// SetNillableType sets the "type" field if the given value is not nil.
func (du *DrinkUpdate) SetNillableType(d *drink.Type) *DrinkUpdate {
	if d != nil {
		du.SetType(*d)
	}
	return du
}

// SetAbv sets the "abv" field.
func (du *DrinkUpdate) SetAbv(i int8) *DrinkUpdate {
	du.mutation.ResetAbv()
	du.mutation.SetAbv(i)
	return du
}

// SetNillableAbv sets the "abv" field if the given value is not nil.
func (du *DrinkUpdate) SetNillableAbv(i *int8) *DrinkUpdate {
	if i != nil {
		du.SetAbv(*i)
	}
	return du
}

// AddAbv adds i to the "abv" field.
func (du *DrinkUpdate) AddAbv(i int8) *DrinkUpdate {
	du.mutation.AddAbv(i)
	return du
}

// SetOunces sets the "ounces" field.
func (du *DrinkUpdate) SetOunces(i int8) *DrinkUpdate {
	du.mutation.ResetOunces()
	du.mutation.SetOunces(i)
	return du
}

// SetNillableOunces sets the "ounces" field if the given value is not nil.
func (du *DrinkUpdate) SetNillableOunces(i *int8) *DrinkUpdate {
	if i != nil {
		du.SetOunces(*i)
	}
	return du
}

// AddOunces adds i to the "ounces" field.
func (du *DrinkUpdate) AddOunces(i int8) *DrinkUpdate {
	du.mutation.AddOunces(i)
	return du
}

// SetYear sets the "year" field.
func (du *DrinkUpdate) SetYear(i int) *DrinkUpdate {
	du.mutation.ResetYear()
	du.mutation.SetYear(i)
	return du
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (du *DrinkUpdate) SetNillableYear(i *int) *DrinkUpdate {
	if i != nil {
		du.SetYear(*i)
	}
	return du
}

// AddYear adds i to the "year" field.
func (du *DrinkUpdate) AddYear(i int) *DrinkUpdate {
	du.mutation.AddYear(i)
	return du
}

// SetMonth sets the "month" field.
func (du *DrinkUpdate) SetMonth(i int) *DrinkUpdate {
	du.mutation.ResetMonth()
	du.mutation.SetMonth(i)
	return du
}

// SetNillableMonth sets the "month" field if the given value is not nil.
func (du *DrinkUpdate) SetNillableMonth(i *int) *DrinkUpdate {
	if i != nil {
		du.SetMonth(*i)
	}
	return du
}

// AddMonth adds i to the "month" field.
func (du *DrinkUpdate) AddMonth(i int) *DrinkUpdate {
	du.mutation.AddMonth(i)
	return du
}

// SetDay sets the "day" field.
func (du *DrinkUpdate) SetDay(i int) *DrinkUpdate {
	du.mutation.ResetDay()
	du.mutation.SetDay(i)
	return du
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (du *DrinkUpdate) SetNillableDay(i *int) *DrinkUpdate {
	if i != nil {
		du.SetDay(*i)
	}
	return du
}

// AddDay adds i to the "day" field.
func (du *DrinkUpdate) AddDay(i int) *DrinkUpdate {
	du.mutation.AddDay(i)
	return du
}

// SetNote sets the "note" field.
func (du *DrinkUpdate) SetNote(s string) *DrinkUpdate {
	du.mutation.SetNote(s)
	return du
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (du *DrinkUpdate) SetNillableNote(s *string) *DrinkUpdate {
	if s != nil {
		du.SetNote(*s)
	}
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DrinkUpdate) SetCreatedAt(t time.Time) *DrinkUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DrinkUpdate) SetNillableCreatedAt(t *time.Time) *DrinkUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (du *DrinkUpdate) SetOwnerID(id int) *DrinkUpdate {
	du.mutation.SetOwnerID(id)
	return du
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (du *DrinkUpdate) SetNillableOwnerID(id *int) *DrinkUpdate {
	if id != nil {
		du = du.SetOwnerID(*id)
	}
	return du
}

// SetOwner sets the "owner" edge to the User entity.
func (du *DrinkUpdate) SetOwner(u *User) *DrinkUpdate {
	return du.SetOwnerID(u.ID)
}

// Mutation returns the DrinkMutation object of the builder.
func (du *DrinkUpdate) Mutation() *DrinkMutation {
	return du.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (du *DrinkUpdate) ClearOwner() *DrinkUpdate {
	du.mutation.ClearOwner()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DrinkUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DrinkUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DrinkUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DrinkUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DrinkUpdate) check() error {
	if v, ok := du.mutation.GetType(); ok {
		if err := drink.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Drink.type": %w`, err)}
		}
	}
	return nil
}

func (du *DrinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(drink.Table, drink.Columns, sqlgraph.NewFieldSpec(drink.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.GetType(); ok {
		_spec.SetField(drink.FieldType, field.TypeEnum, value)
	}
	if value, ok := du.mutation.Abv(); ok {
		_spec.SetField(drink.FieldAbv, field.TypeInt8, value)
	}
	if value, ok := du.mutation.AddedAbv(); ok {
		_spec.AddField(drink.FieldAbv, field.TypeInt8, value)
	}
	if value, ok := du.mutation.Ounces(); ok {
		_spec.SetField(drink.FieldOunces, field.TypeInt8, value)
	}
	if value, ok := du.mutation.AddedOunces(); ok {
		_spec.AddField(drink.FieldOunces, field.TypeInt8, value)
	}
	if value, ok := du.mutation.Year(); ok {
		_spec.SetField(drink.FieldYear, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedYear(); ok {
		_spec.AddField(drink.FieldYear, field.TypeInt, value)
	}
	if value, ok := du.mutation.Month(); ok {
		_spec.SetField(drink.FieldMonth, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedMonth(); ok {
		_spec.AddField(drink.FieldMonth, field.TypeInt, value)
	}
	if value, ok := du.mutation.Day(); ok {
		_spec.SetField(drink.FieldDay, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedDay(); ok {
		_spec.AddField(drink.FieldDay, field.TypeInt, value)
	}
	if value, ok := du.mutation.Note(); ok {
		_spec.SetField(drink.FieldNote, field.TypeString, value)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(drink.FieldCreatedAt, field.TypeTime, value)
	}
	if du.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drink.OwnerTable,
			Columns: []string{drink.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drink.OwnerTable,
			Columns: []string{drink.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DrinkUpdateOne is the builder for updating a single Drink entity.
type DrinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DrinkMutation
}

// SetType sets the "type" field.
func (duo *DrinkUpdateOne) SetType(d drink.Type) *DrinkUpdateOne {
	duo.mutation.SetType(d)
	return duo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (duo *DrinkUpdateOne) SetNillableType(d *drink.Type) *DrinkUpdateOne {
	if d != nil {
		duo.SetType(*d)
	}
	return duo
}

// SetAbv sets the "abv" field.
func (duo *DrinkUpdateOne) SetAbv(i int8) *DrinkUpdateOne {
	duo.mutation.ResetAbv()
	duo.mutation.SetAbv(i)
	return duo
}

// SetNillableAbv sets the "abv" field if the given value is not nil.
func (duo *DrinkUpdateOne) SetNillableAbv(i *int8) *DrinkUpdateOne {
	if i != nil {
		duo.SetAbv(*i)
	}
	return duo
}

// AddAbv adds i to the "abv" field.
func (duo *DrinkUpdateOne) AddAbv(i int8) *DrinkUpdateOne {
	duo.mutation.AddAbv(i)
	return duo
}

// SetOunces sets the "ounces" field.
func (duo *DrinkUpdateOne) SetOunces(i int8) *DrinkUpdateOne {
	duo.mutation.ResetOunces()
	duo.mutation.SetOunces(i)
	return duo
}

// SetNillableOunces sets the "ounces" field if the given value is not nil.
func (duo *DrinkUpdateOne) SetNillableOunces(i *int8) *DrinkUpdateOne {
	if i != nil {
		duo.SetOunces(*i)
	}
	return duo
}

// AddOunces adds i to the "ounces" field.
func (duo *DrinkUpdateOne) AddOunces(i int8) *DrinkUpdateOne {
	duo.mutation.AddOunces(i)
	return duo
}

// SetYear sets the "year" field.
func (duo *DrinkUpdateOne) SetYear(i int) *DrinkUpdateOne {
	duo.mutation.ResetYear()
	duo.mutation.SetYear(i)
	return duo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (duo *DrinkUpdateOne) SetNillableYear(i *int) *DrinkUpdateOne {
	if i != nil {
		duo.SetYear(*i)
	}
	return duo
}

// AddYear adds i to the "year" field.
func (duo *DrinkUpdateOne) AddYear(i int) *DrinkUpdateOne {
	duo.mutation.AddYear(i)
	return duo
}

// SetMonth sets the "month" field.
func (duo *DrinkUpdateOne) SetMonth(i int) *DrinkUpdateOne {
	duo.mutation.ResetMonth()
	duo.mutation.SetMonth(i)
	return duo
}

// SetNillableMonth sets the "month" field if the given value is not nil.
func (duo *DrinkUpdateOne) SetNillableMonth(i *int) *DrinkUpdateOne {
	if i != nil {
		duo.SetMonth(*i)
	}
	return duo
}

// AddMonth adds i to the "month" field.
func (duo *DrinkUpdateOne) AddMonth(i int) *DrinkUpdateOne {
	duo.mutation.AddMonth(i)
	return duo
}

// SetDay sets the "day" field.
func (duo *DrinkUpdateOne) SetDay(i int) *DrinkUpdateOne {
	duo.mutation.ResetDay()
	duo.mutation.SetDay(i)
	return duo
}

// SetNillableDay sets the "day" field if the given value is not nil.
func (duo *DrinkUpdateOne) SetNillableDay(i *int) *DrinkUpdateOne {
	if i != nil {
		duo.SetDay(*i)
	}
	return duo
}

// AddDay adds i to the "day" field.
func (duo *DrinkUpdateOne) AddDay(i int) *DrinkUpdateOne {
	duo.mutation.AddDay(i)
	return duo
}

// SetNote sets the "note" field.
func (duo *DrinkUpdateOne) SetNote(s string) *DrinkUpdateOne {
	duo.mutation.SetNote(s)
	return duo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (duo *DrinkUpdateOne) SetNillableNote(s *string) *DrinkUpdateOne {
	if s != nil {
		duo.SetNote(*s)
	}
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DrinkUpdateOne) SetCreatedAt(t time.Time) *DrinkUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DrinkUpdateOne) SetNillableCreatedAt(t *time.Time) *DrinkUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (duo *DrinkUpdateOne) SetOwnerID(id int) *DrinkUpdateOne {
	duo.mutation.SetOwnerID(id)
	return duo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (duo *DrinkUpdateOne) SetNillableOwnerID(id *int) *DrinkUpdateOne {
	if id != nil {
		duo = duo.SetOwnerID(*id)
	}
	return duo
}

// SetOwner sets the "owner" edge to the User entity.
func (duo *DrinkUpdateOne) SetOwner(u *User) *DrinkUpdateOne {
	return duo.SetOwnerID(u.ID)
}

// Mutation returns the DrinkMutation object of the builder.
func (duo *DrinkUpdateOne) Mutation() *DrinkMutation {
	return duo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (duo *DrinkUpdateOne) ClearOwner() *DrinkUpdateOne {
	duo.mutation.ClearOwner()
	return duo
}

// Where appends a list predicates to the DrinkUpdate builder.
func (duo *DrinkUpdateOne) Where(ps ...predicate.Drink) *DrinkUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DrinkUpdateOne) Select(field string, fields ...string) *DrinkUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Drink entity.
func (duo *DrinkUpdateOne) Save(ctx context.Context) (*Drink, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DrinkUpdateOne) SaveX(ctx context.Context) *Drink {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DrinkUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DrinkUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DrinkUpdateOne) check() error {
	if v, ok := duo.mutation.GetType(); ok {
		if err := drink.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Drink.type": %w`, err)}
		}
	}
	return nil
}

func (duo *DrinkUpdateOne) sqlSave(ctx context.Context) (_node *Drink, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(drink.Table, drink.Columns, sqlgraph.NewFieldSpec(drink.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Drink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, drink.FieldID)
		for _, f := range fields {
			if !drink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != drink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.GetType(); ok {
		_spec.SetField(drink.FieldType, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.Abv(); ok {
		_spec.SetField(drink.FieldAbv, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.AddedAbv(); ok {
		_spec.AddField(drink.FieldAbv, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.Ounces(); ok {
		_spec.SetField(drink.FieldOunces, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.AddedOunces(); ok {
		_spec.AddField(drink.FieldOunces, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.Year(); ok {
		_spec.SetField(drink.FieldYear, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedYear(); ok {
		_spec.AddField(drink.FieldYear, field.TypeInt, value)
	}
	if value, ok := duo.mutation.Month(); ok {
		_spec.SetField(drink.FieldMonth, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedMonth(); ok {
		_spec.AddField(drink.FieldMonth, field.TypeInt, value)
	}
	if value, ok := duo.mutation.Day(); ok {
		_spec.SetField(drink.FieldDay, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedDay(); ok {
		_spec.AddField(drink.FieldDay, field.TypeInt, value)
	}
	if value, ok := duo.mutation.Note(); ok {
		_spec.SetField(drink.FieldNote, field.TypeString, value)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(drink.FieldCreatedAt, field.TypeTime, value)
	}
	if duo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drink.OwnerTable,
			Columns: []string{drink.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   drink.OwnerTable,
			Columns: []string{drink.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Drink{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{drink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
