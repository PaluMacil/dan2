// Code generated by ent, DO NOT EDIT.

package grocerylistshare

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grocerylistshare type in the database.
	Label = "grocery_list_share"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCanEdit holds the string denoting the can_edit field in the database.
	FieldCanEdit = "can_edit"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeGroceryList holds the string denoting the grocery_list edge name in mutations.
	EdgeGroceryList = "grocery_list"
	// Table holds the table name of the grocerylistshare in the database.
	Table = "grocery_list_shares"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "user_grocery_list_shares"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// GroceryListTable is the table that holds the grocery_list relation/edge. The primary key declared below.
	GroceryListTable = "grocery_list_grocery_list_shares"
	// GroceryListInverseTable is the table name for the GroceryList entity.
	// It exists in this package in order to avoid circular dependency with the "grocerylist" package.
	GroceryListInverseTable = "grocery_lists"
)

// Columns holds all SQL columns for grocerylistshare fields.
var Columns = []string{
	FieldID,
	FieldCanEdit,
	FieldCreatedAt,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"user_id", "grocery_list_share_id"}
	// GroceryListPrimaryKey and GroceryListColumn2 are the table columns denoting the
	// primary key for the grocery_list relation (M2M).
	GroceryListPrimaryKey = []string{"grocery_list_id", "grocery_list_share_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCanEdit holds the default value on creation for the "can_edit" field.
	DefaultCanEdit bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the GroceryListShare queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCanEdit orders the results by the can_edit field.
func ByCanEdit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanEdit, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserCount orders the results by user count.
func ByUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStep(), opts...)
	}
}

// ByUser orders the results by user terms.
func ByUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroceryListCount orders the results by grocery_list count.
func ByGroceryListCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroceryListStep(), opts...)
	}
}

// ByGroceryList orders the results by grocery_list terms.
func ByGroceryList(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroceryListStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
	)
}
func newGroceryListStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroceryListInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GroceryListTable, GroceryListPrimaryKey...),
	)
}
