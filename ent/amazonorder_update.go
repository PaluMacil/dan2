// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/amazonlist"
	"github.com/PaluMacil/dan2/ent/amazonorder"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// AmazonOrderUpdate is the builder for updating AmazonOrder entities.
type AmazonOrderUpdate struct {
	config
	hooks    []Hook
	mutation *AmazonOrderMutation
}

// Where appends a list predicates to the AmazonOrderUpdate builder.
func (aou *AmazonOrderUpdate) Where(ps ...predicate.AmazonOrder) *AmazonOrderUpdate {
	aou.mutation.Where(ps...)
	return aou
}

// SetName sets the "name" field.
func (aou *AmazonOrderUpdate) SetName(s string) *AmazonOrderUpdate {
	aou.mutation.SetName(s)
	return aou
}

// SetCategory sets the "category" field.
func (aou *AmazonOrderUpdate) SetCategory(s string) *AmazonOrderUpdate {
	aou.mutation.SetCategory(s)
	return aou
}

// SetBrand sets the "brand" field.
func (aou *AmazonOrderUpdate) SetBrand(s string) *AmazonOrderUpdate {
	aou.mutation.SetBrand(s)
	return aou
}

// SetSeller sets the "seller" field.
func (aou *AmazonOrderUpdate) SetSeller(s string) *AmazonOrderUpdate {
	aou.mutation.SetSeller(s)
	return aou
}

// SetAddress1 sets the "address1" field.
func (aou *AmazonOrderUpdate) SetAddress1(s string) *AmazonOrderUpdate {
	aou.mutation.SetAddress1(s)
	return aou
}

// SetAddress2 sets the "address2" field.
func (aou *AmazonOrderUpdate) SetAddress2(s string) *AmazonOrderUpdate {
	aou.mutation.SetAddress2(s)
	return aou
}

// SetCity sets the "city" field.
func (aou *AmazonOrderUpdate) SetCity(s string) *AmazonOrderUpdate {
	aou.mutation.SetCity(s)
	return aou
}

// SetState sets the "state" field.
func (aou *AmazonOrderUpdate) SetState(s string) *AmazonOrderUpdate {
	aou.mutation.SetState(s)
	return aou
}

// SetZip sets the "zip" field.
func (aou *AmazonOrderUpdate) SetZip(s string) *AmazonOrderUpdate {
	aou.mutation.SetZip(s)
	return aou
}

// SetPrice sets the "price" field.
func (aou *AmazonOrderUpdate) SetPrice(f float32) *AmazonOrderUpdate {
	aou.mutation.ResetPrice()
	aou.mutation.SetPrice(f)
	return aou
}

// AddPrice adds f to the "price" field.
func (aou *AmazonOrderUpdate) AddPrice(f float32) *AmazonOrderUpdate {
	aou.mutation.AddPrice(f)
	return aou
}

// SetTax sets the "tax" field.
func (aou *AmazonOrderUpdate) SetTax(f float32) *AmazonOrderUpdate {
	aou.mutation.ResetTax()
	aou.mutation.SetTax(f)
	return aou
}

// AddTax adds f to the "tax" field.
func (aou *AmazonOrderUpdate) AddTax(f float32) *AmazonOrderUpdate {
	aou.mutation.AddTax(f)
	return aou
}

// SetRefund sets the "refund" field.
func (aou *AmazonOrderUpdate) SetRefund(b bool) *AmazonOrderUpdate {
	aou.mutation.SetRefund(b)
	return aou
}

// SetOrderedAt sets the "ordered_at" field.
func (aou *AmazonOrderUpdate) SetOrderedAt(t time.Time) *AmazonOrderUpdate {
	aou.mutation.SetOrderedAt(t)
	return aou
}

// SetCreatedAt sets the "created_at" field.
func (aou *AmazonOrderUpdate) SetCreatedAt(t time.Time) *AmazonOrderUpdate {
	aou.mutation.SetCreatedAt(t)
	return aou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aou *AmazonOrderUpdate) SetNillableCreatedAt(t *time.Time) *AmazonOrderUpdate {
	if t != nil {
		aou.SetCreatedAt(*t)
	}
	return aou
}

// SetAmazonListID sets the "amazon_list" edge to the AmazonList entity by ID.
func (aou *AmazonOrderUpdate) SetAmazonListID(id int) *AmazonOrderUpdate {
	aou.mutation.SetAmazonListID(id)
	return aou
}

// SetNillableAmazonListID sets the "amazon_list" edge to the AmazonList entity by ID if the given value is not nil.
func (aou *AmazonOrderUpdate) SetNillableAmazonListID(id *int) *AmazonOrderUpdate {
	if id != nil {
		aou = aou.SetAmazonListID(*id)
	}
	return aou
}

// SetAmazonList sets the "amazon_list" edge to the AmazonList entity.
func (aou *AmazonOrderUpdate) SetAmazonList(a *AmazonList) *AmazonOrderUpdate {
	return aou.SetAmazonListID(a.ID)
}

// Mutation returns the AmazonOrderMutation object of the builder.
func (aou *AmazonOrderUpdate) Mutation() *AmazonOrderMutation {
	return aou.mutation
}

// ClearAmazonList clears the "amazon_list" edge to the AmazonList entity.
func (aou *AmazonOrderUpdate) ClearAmazonList() *AmazonOrderUpdate {
	aou.mutation.ClearAmazonList()
	return aou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aou *AmazonOrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aou.sqlSave, aou.mutation, aou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aou *AmazonOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := aou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aou *AmazonOrderUpdate) Exec(ctx context.Context) error {
	_, err := aou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aou *AmazonOrderUpdate) ExecX(ctx context.Context) {
	if err := aou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aou *AmazonOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(amazonorder.Table, amazonorder.Columns, sqlgraph.NewFieldSpec(amazonorder.FieldID, field.TypeInt))
	if ps := aou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aou.mutation.Name(); ok {
		_spec.SetField(amazonorder.FieldName, field.TypeString, value)
	}
	if value, ok := aou.mutation.Category(); ok {
		_spec.SetField(amazonorder.FieldCategory, field.TypeString, value)
	}
	if value, ok := aou.mutation.Brand(); ok {
		_spec.SetField(amazonorder.FieldBrand, field.TypeString, value)
	}
	if value, ok := aou.mutation.Seller(); ok {
		_spec.SetField(amazonorder.FieldSeller, field.TypeString, value)
	}
	if value, ok := aou.mutation.Address1(); ok {
		_spec.SetField(amazonorder.FieldAddress1, field.TypeString, value)
	}
	if value, ok := aou.mutation.Address2(); ok {
		_spec.SetField(amazonorder.FieldAddress2, field.TypeString, value)
	}
	if value, ok := aou.mutation.City(); ok {
		_spec.SetField(amazonorder.FieldCity, field.TypeString, value)
	}
	if value, ok := aou.mutation.State(); ok {
		_spec.SetField(amazonorder.FieldState, field.TypeString, value)
	}
	if value, ok := aou.mutation.Zip(); ok {
		_spec.SetField(amazonorder.FieldZip, field.TypeString, value)
	}
	if value, ok := aou.mutation.Price(); ok {
		_spec.SetField(amazonorder.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := aou.mutation.AddedPrice(); ok {
		_spec.AddField(amazonorder.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := aou.mutation.Tax(); ok {
		_spec.SetField(amazonorder.FieldTax, field.TypeFloat32, value)
	}
	if value, ok := aou.mutation.AddedTax(); ok {
		_spec.AddField(amazonorder.FieldTax, field.TypeFloat32, value)
	}
	if value, ok := aou.mutation.Refund(); ok {
		_spec.SetField(amazonorder.FieldRefund, field.TypeBool, value)
	}
	if value, ok := aou.mutation.OrderedAt(); ok {
		_spec.SetField(amazonorder.FieldOrderedAt, field.TypeTime, value)
	}
	if value, ok := aou.mutation.CreatedAt(); ok {
		_spec.SetField(amazonorder.FieldCreatedAt, field.TypeTime, value)
	}
	if aou.mutation.AmazonListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonorder.AmazonListTable,
			Columns: []string{amazonorder.AmazonListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aou.mutation.AmazonListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonorder.AmazonListTable,
			Columns: []string{amazonorder.AmazonListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amazonorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aou.mutation.done = true
	return n, nil
}

// AmazonOrderUpdateOne is the builder for updating a single AmazonOrder entity.
type AmazonOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AmazonOrderMutation
}

// SetName sets the "name" field.
func (aouo *AmazonOrderUpdateOne) SetName(s string) *AmazonOrderUpdateOne {
	aouo.mutation.SetName(s)
	return aouo
}

// SetCategory sets the "category" field.
func (aouo *AmazonOrderUpdateOne) SetCategory(s string) *AmazonOrderUpdateOne {
	aouo.mutation.SetCategory(s)
	return aouo
}

// SetBrand sets the "brand" field.
func (aouo *AmazonOrderUpdateOne) SetBrand(s string) *AmazonOrderUpdateOne {
	aouo.mutation.SetBrand(s)
	return aouo
}

// SetSeller sets the "seller" field.
func (aouo *AmazonOrderUpdateOne) SetSeller(s string) *AmazonOrderUpdateOne {
	aouo.mutation.SetSeller(s)
	return aouo
}

// SetAddress1 sets the "address1" field.
func (aouo *AmazonOrderUpdateOne) SetAddress1(s string) *AmazonOrderUpdateOne {
	aouo.mutation.SetAddress1(s)
	return aouo
}

// SetAddress2 sets the "address2" field.
func (aouo *AmazonOrderUpdateOne) SetAddress2(s string) *AmazonOrderUpdateOne {
	aouo.mutation.SetAddress2(s)
	return aouo
}

// SetCity sets the "city" field.
func (aouo *AmazonOrderUpdateOne) SetCity(s string) *AmazonOrderUpdateOne {
	aouo.mutation.SetCity(s)
	return aouo
}

// SetState sets the "state" field.
func (aouo *AmazonOrderUpdateOne) SetState(s string) *AmazonOrderUpdateOne {
	aouo.mutation.SetState(s)
	return aouo
}

// SetZip sets the "zip" field.
func (aouo *AmazonOrderUpdateOne) SetZip(s string) *AmazonOrderUpdateOne {
	aouo.mutation.SetZip(s)
	return aouo
}

// SetPrice sets the "price" field.
func (aouo *AmazonOrderUpdateOne) SetPrice(f float32) *AmazonOrderUpdateOne {
	aouo.mutation.ResetPrice()
	aouo.mutation.SetPrice(f)
	return aouo
}

// AddPrice adds f to the "price" field.
func (aouo *AmazonOrderUpdateOne) AddPrice(f float32) *AmazonOrderUpdateOne {
	aouo.mutation.AddPrice(f)
	return aouo
}

// SetTax sets the "tax" field.
func (aouo *AmazonOrderUpdateOne) SetTax(f float32) *AmazonOrderUpdateOne {
	aouo.mutation.ResetTax()
	aouo.mutation.SetTax(f)
	return aouo
}

// AddTax adds f to the "tax" field.
func (aouo *AmazonOrderUpdateOne) AddTax(f float32) *AmazonOrderUpdateOne {
	aouo.mutation.AddTax(f)
	return aouo
}

// SetRefund sets the "refund" field.
func (aouo *AmazonOrderUpdateOne) SetRefund(b bool) *AmazonOrderUpdateOne {
	aouo.mutation.SetRefund(b)
	return aouo
}

// SetOrderedAt sets the "ordered_at" field.
func (aouo *AmazonOrderUpdateOne) SetOrderedAt(t time.Time) *AmazonOrderUpdateOne {
	aouo.mutation.SetOrderedAt(t)
	return aouo
}

// SetCreatedAt sets the "created_at" field.
func (aouo *AmazonOrderUpdateOne) SetCreatedAt(t time.Time) *AmazonOrderUpdateOne {
	aouo.mutation.SetCreatedAt(t)
	return aouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aouo *AmazonOrderUpdateOne) SetNillableCreatedAt(t *time.Time) *AmazonOrderUpdateOne {
	if t != nil {
		aouo.SetCreatedAt(*t)
	}
	return aouo
}

// SetAmazonListID sets the "amazon_list" edge to the AmazonList entity by ID.
func (aouo *AmazonOrderUpdateOne) SetAmazonListID(id int) *AmazonOrderUpdateOne {
	aouo.mutation.SetAmazonListID(id)
	return aouo
}

// SetNillableAmazonListID sets the "amazon_list" edge to the AmazonList entity by ID if the given value is not nil.
func (aouo *AmazonOrderUpdateOne) SetNillableAmazonListID(id *int) *AmazonOrderUpdateOne {
	if id != nil {
		aouo = aouo.SetAmazonListID(*id)
	}
	return aouo
}

// SetAmazonList sets the "amazon_list" edge to the AmazonList entity.
func (aouo *AmazonOrderUpdateOne) SetAmazonList(a *AmazonList) *AmazonOrderUpdateOne {
	return aouo.SetAmazonListID(a.ID)
}

// Mutation returns the AmazonOrderMutation object of the builder.
func (aouo *AmazonOrderUpdateOne) Mutation() *AmazonOrderMutation {
	return aouo.mutation
}

// ClearAmazonList clears the "amazon_list" edge to the AmazonList entity.
func (aouo *AmazonOrderUpdateOne) ClearAmazonList() *AmazonOrderUpdateOne {
	aouo.mutation.ClearAmazonList()
	return aouo
}

// Where appends a list predicates to the AmazonOrderUpdate builder.
func (aouo *AmazonOrderUpdateOne) Where(ps ...predicate.AmazonOrder) *AmazonOrderUpdateOne {
	aouo.mutation.Where(ps...)
	return aouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aouo *AmazonOrderUpdateOne) Select(field string, fields ...string) *AmazonOrderUpdateOne {
	aouo.fields = append([]string{field}, fields...)
	return aouo
}

// Save executes the query and returns the updated AmazonOrder entity.
func (aouo *AmazonOrderUpdateOne) Save(ctx context.Context) (*AmazonOrder, error) {
	return withHooks(ctx, aouo.sqlSave, aouo.mutation, aouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aouo *AmazonOrderUpdateOne) SaveX(ctx context.Context) *AmazonOrder {
	node, err := aouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aouo *AmazonOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := aouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aouo *AmazonOrderUpdateOne) ExecX(ctx context.Context) {
	if err := aouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aouo *AmazonOrderUpdateOne) sqlSave(ctx context.Context) (_node *AmazonOrder, err error) {
	_spec := sqlgraph.NewUpdateSpec(amazonorder.Table, amazonorder.Columns, sqlgraph.NewFieldSpec(amazonorder.FieldID, field.TypeInt))
	id, ok := aouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AmazonOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, amazonorder.FieldID)
		for _, f := range fields {
			if !amazonorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != amazonorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aouo.mutation.Name(); ok {
		_spec.SetField(amazonorder.FieldName, field.TypeString, value)
	}
	if value, ok := aouo.mutation.Category(); ok {
		_spec.SetField(amazonorder.FieldCategory, field.TypeString, value)
	}
	if value, ok := aouo.mutation.Brand(); ok {
		_spec.SetField(amazonorder.FieldBrand, field.TypeString, value)
	}
	if value, ok := aouo.mutation.Seller(); ok {
		_spec.SetField(amazonorder.FieldSeller, field.TypeString, value)
	}
	if value, ok := aouo.mutation.Address1(); ok {
		_spec.SetField(amazonorder.FieldAddress1, field.TypeString, value)
	}
	if value, ok := aouo.mutation.Address2(); ok {
		_spec.SetField(amazonorder.FieldAddress2, field.TypeString, value)
	}
	if value, ok := aouo.mutation.City(); ok {
		_spec.SetField(amazonorder.FieldCity, field.TypeString, value)
	}
	if value, ok := aouo.mutation.State(); ok {
		_spec.SetField(amazonorder.FieldState, field.TypeString, value)
	}
	if value, ok := aouo.mutation.Zip(); ok {
		_spec.SetField(amazonorder.FieldZip, field.TypeString, value)
	}
	if value, ok := aouo.mutation.Price(); ok {
		_spec.SetField(amazonorder.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := aouo.mutation.AddedPrice(); ok {
		_spec.AddField(amazonorder.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := aouo.mutation.Tax(); ok {
		_spec.SetField(amazonorder.FieldTax, field.TypeFloat32, value)
	}
	if value, ok := aouo.mutation.AddedTax(); ok {
		_spec.AddField(amazonorder.FieldTax, field.TypeFloat32, value)
	}
	if value, ok := aouo.mutation.Refund(); ok {
		_spec.SetField(amazonorder.FieldRefund, field.TypeBool, value)
	}
	if value, ok := aouo.mutation.OrderedAt(); ok {
		_spec.SetField(amazonorder.FieldOrderedAt, field.TypeTime, value)
	}
	if value, ok := aouo.mutation.CreatedAt(); ok {
		_spec.SetField(amazonorder.FieldCreatedAt, field.TypeTime, value)
	}
	if aouo.mutation.AmazonListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonorder.AmazonListTable,
			Columns: []string{amazonorder.AmazonListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aouo.mutation.AmazonListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonorder.AmazonListTable,
			Columns: []string{amazonorder.AmazonListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AmazonOrder{config: aouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amazonorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aouo.mutation.done = true
	return _node, nil
}
