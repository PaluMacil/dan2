// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/amazonlist"
	"github.com/PaluMacil/dan2/ent/amazonshare"
	"github.com/PaluMacil/dan2/ent/user"
)

// AmazonShareCreate is the builder for creating a AmazonShare entity.
type AmazonShareCreate struct {
	config
	mutation *AmazonShareMutation
	hooks    []Hook
}

// SetCanEdit sets the "can_edit" field.
func (asc *AmazonShareCreate) SetCanEdit(b bool) *AmazonShareCreate {
	asc.mutation.SetCanEdit(b)
	return asc
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (asc *AmazonShareCreate) SetNillableCanEdit(b *bool) *AmazonShareCreate {
	if b != nil {
		asc.SetCanEdit(*b)
	}
	return asc
}

// SetCreatedAt sets the "created_at" field.
func (asc *AmazonShareCreate) SetCreatedAt(t time.Time) *AmazonShareCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (asc *AmazonShareCreate) AddUserIDs(ids ...int) *AmazonShareCreate {
	asc.mutation.AddUserIDs(ids...)
	return asc
}

// AddUser adds the "user" edges to the User entity.
func (asc *AmazonShareCreate) AddUser(u ...*User) *AmazonShareCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return asc.AddUserIDs(ids...)
}

// AddAmazonListIDs adds the "amazon_list" edge to the AmazonList entity by IDs.
func (asc *AmazonShareCreate) AddAmazonListIDs(ids ...int) *AmazonShareCreate {
	asc.mutation.AddAmazonListIDs(ids...)
	return asc
}

// AddAmazonList adds the "amazon_list" edges to the AmazonList entity.
func (asc *AmazonShareCreate) AddAmazonList(a ...*AmazonList) *AmazonShareCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asc.AddAmazonListIDs(ids...)
}

// Mutation returns the AmazonShareMutation object of the builder.
func (asc *AmazonShareCreate) Mutation() *AmazonShareMutation {
	return asc.mutation
}

// Save creates the AmazonShare in the database.
func (asc *AmazonShareCreate) Save(ctx context.Context) (*AmazonShare, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AmazonShareCreate) SaveX(ctx context.Context) *AmazonShare {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AmazonShareCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AmazonShareCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AmazonShareCreate) defaults() {
	if _, ok := asc.mutation.CanEdit(); !ok {
		v := amazonshare.DefaultCanEdit
		asc.mutation.SetCanEdit(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AmazonShareCreate) check() error {
	if _, ok := asc.mutation.CanEdit(); !ok {
		return &ValidationError{Name: "can_edit", err: errors.New(`ent: missing required field "AmazonShare.can_edit"`)}
	}
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AmazonShare.created_at"`)}
	}
	return nil
}

func (asc *AmazonShareCreate) sqlSave(ctx context.Context) (*AmazonShare, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AmazonShareCreate) createSpec() (*AmazonShare, *sqlgraph.CreateSpec) {
	var (
		_node = &AmazonShare{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(amazonshare.Table, sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt))
	)
	if value, ok := asc.mutation.CanEdit(); ok {
		_spec.SetField(amazonshare.FieldCanEdit, field.TypeBool, value)
		_node.CanEdit = value
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.SetField(amazonshare.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := asc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amazonshare.UserTable,
			Columns: amazonshare.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.AmazonListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   amazonshare.AmazonListTable,
			Columns: amazonshare.AmazonListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AmazonShareCreateBulk is the builder for creating many AmazonShare entities in bulk.
type AmazonShareCreateBulk struct {
	config
	builders []*AmazonShareCreate
}

// Save creates the AmazonShare entities in the database.
func (ascb *AmazonShareCreateBulk) Save(ctx context.Context) ([]*AmazonShare, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AmazonShare, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AmazonShareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AmazonShareCreateBulk) SaveX(ctx context.Context) []*AmazonShare {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AmazonShareCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AmazonShareCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
