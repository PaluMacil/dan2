// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/movie"
	"github.com/PaluMacil/dan2/ent/movielist"
	"github.com/PaluMacil/dan2/ent/movielistshare"
	"github.com/PaluMacil/dan2/ent/predicate"
	"github.com/PaluMacil/dan2/ent/user"
)

// MovieListQuery is the builder for querying MovieList entities.
type MovieListQuery struct {
	config
	ctx                 *QueryContext
	order               []movielist.OrderOption
	inters              []Interceptor
	predicates          []predicate.MovieList
	withMovies          *MovieQuery
	withOwner           *UserQuery
	withMovieListShares *MovieListShareQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MovieListQuery builder.
func (mlq *MovieListQuery) Where(ps ...predicate.MovieList) *MovieListQuery {
	mlq.predicates = append(mlq.predicates, ps...)
	return mlq
}

// Limit the number of records to be returned by this query.
func (mlq *MovieListQuery) Limit(limit int) *MovieListQuery {
	mlq.ctx.Limit = &limit
	return mlq
}

// Offset to start from.
func (mlq *MovieListQuery) Offset(offset int) *MovieListQuery {
	mlq.ctx.Offset = &offset
	return mlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mlq *MovieListQuery) Unique(unique bool) *MovieListQuery {
	mlq.ctx.Unique = &unique
	return mlq
}

// Order specifies how the records should be ordered.
func (mlq *MovieListQuery) Order(o ...movielist.OrderOption) *MovieListQuery {
	mlq.order = append(mlq.order, o...)
	return mlq
}

// QueryMovies chains the current query on the "movies" edge.
func (mlq *MovieListQuery) QueryMovies() *MovieQuery {
	query := (&MovieClient{config: mlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(movielist.Table, movielist.FieldID, selector),
			sqlgraph.To(movie.Table, movie.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, movielist.MoviesTable, movielist.MoviesColumn),
		)
		fromU = sqlgraph.SetNeighbors(mlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwner chains the current query on the "owner" edge.
func (mlq *MovieListQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: mlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(movielist.Table, movielist.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, movielist.OwnerTable, movielist.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(mlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMovieListShares chains the current query on the "movie_list_shares" edge.
func (mlq *MovieListQuery) QueryMovieListShares() *MovieListShareQuery {
	query := (&MovieListShareClient{config: mlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(movielist.Table, movielist.FieldID, selector),
			sqlgraph.To(movielistshare.Table, movielistshare.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, movielist.MovieListSharesTable, movielist.MovieListSharesColumn),
		)
		fromU = sqlgraph.SetNeighbors(mlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MovieList entity from the query.
// Returns a *NotFoundError when no MovieList was found.
func (mlq *MovieListQuery) First(ctx context.Context) (*MovieList, error) {
	nodes, err := mlq.Limit(1).All(setContextOp(ctx, mlq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{movielist.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mlq *MovieListQuery) FirstX(ctx context.Context) *MovieList {
	node, err := mlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MovieList ID from the query.
// Returns a *NotFoundError when no MovieList ID was found.
func (mlq *MovieListQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mlq.Limit(1).IDs(setContextOp(ctx, mlq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{movielist.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mlq *MovieListQuery) FirstIDX(ctx context.Context) int {
	id, err := mlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MovieList entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MovieList entity is found.
// Returns a *NotFoundError when no MovieList entities are found.
func (mlq *MovieListQuery) Only(ctx context.Context) (*MovieList, error) {
	nodes, err := mlq.Limit(2).All(setContextOp(ctx, mlq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{movielist.Label}
	default:
		return nil, &NotSingularError{movielist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mlq *MovieListQuery) OnlyX(ctx context.Context) *MovieList {
	node, err := mlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MovieList ID in the query.
// Returns a *NotSingularError when more than one MovieList ID is found.
// Returns a *NotFoundError when no entities are found.
func (mlq *MovieListQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mlq.Limit(2).IDs(setContextOp(ctx, mlq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{movielist.Label}
	default:
		err = &NotSingularError{movielist.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mlq *MovieListQuery) OnlyIDX(ctx context.Context) int {
	id, err := mlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MovieLists.
func (mlq *MovieListQuery) All(ctx context.Context) ([]*MovieList, error) {
	ctx = setContextOp(ctx, mlq.ctx, "All")
	if err := mlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MovieList, *MovieListQuery]()
	return withInterceptors[[]*MovieList](ctx, mlq, qr, mlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mlq *MovieListQuery) AllX(ctx context.Context) []*MovieList {
	nodes, err := mlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MovieList IDs.
func (mlq *MovieListQuery) IDs(ctx context.Context) (ids []int, err error) {
	if mlq.ctx.Unique == nil && mlq.path != nil {
		mlq.Unique(true)
	}
	ctx = setContextOp(ctx, mlq.ctx, "IDs")
	if err = mlq.Select(movielist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mlq *MovieListQuery) IDsX(ctx context.Context) []int {
	ids, err := mlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mlq *MovieListQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mlq.ctx, "Count")
	if err := mlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mlq, querierCount[*MovieListQuery](), mlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mlq *MovieListQuery) CountX(ctx context.Context) int {
	count, err := mlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mlq *MovieListQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mlq.ctx, "Exist")
	switch _, err := mlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mlq *MovieListQuery) ExistX(ctx context.Context) bool {
	exist, err := mlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MovieListQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mlq *MovieListQuery) Clone() *MovieListQuery {
	if mlq == nil {
		return nil
	}
	return &MovieListQuery{
		config:              mlq.config,
		ctx:                 mlq.ctx.Clone(),
		order:               append([]movielist.OrderOption{}, mlq.order...),
		inters:              append([]Interceptor{}, mlq.inters...),
		predicates:          append([]predicate.MovieList{}, mlq.predicates...),
		withMovies:          mlq.withMovies.Clone(),
		withOwner:           mlq.withOwner.Clone(),
		withMovieListShares: mlq.withMovieListShares.Clone(),
		// clone intermediate query.
		sql:  mlq.sql.Clone(),
		path: mlq.path,
	}
}

// WithMovies tells the query-builder to eager-load the nodes that are connected to
// the "movies" edge. The optional arguments are used to configure the query builder of the edge.
func (mlq *MovieListQuery) WithMovies(opts ...func(*MovieQuery)) *MovieListQuery {
	query := (&MovieClient{config: mlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mlq.withMovies = query
	return mlq
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (mlq *MovieListQuery) WithOwner(opts ...func(*UserQuery)) *MovieListQuery {
	query := (&UserClient{config: mlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mlq.withOwner = query
	return mlq
}

// WithMovieListShares tells the query-builder to eager-load the nodes that are connected to
// the "movie_list_shares" edge. The optional arguments are used to configure the query builder of the edge.
func (mlq *MovieListQuery) WithMovieListShares(opts ...func(*MovieListShareQuery)) *MovieListQuery {
	query := (&MovieListShareClient{config: mlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mlq.withMovieListShares = query
	return mlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MovieList.Query().
//		GroupBy(movielist.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mlq *MovieListQuery) GroupBy(field string, fields ...string) *MovieListGroupBy {
	mlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MovieListGroupBy{build: mlq}
	grbuild.flds = &mlq.ctx.Fields
	grbuild.label = movielist.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.MovieList.Query().
//		Select(movielist.FieldName).
//		Scan(ctx, &v)
func (mlq *MovieListQuery) Select(fields ...string) *MovieListSelect {
	mlq.ctx.Fields = append(mlq.ctx.Fields, fields...)
	sbuild := &MovieListSelect{MovieListQuery: mlq}
	sbuild.label = movielist.Label
	sbuild.flds, sbuild.scan = &mlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MovieListSelect configured with the given aggregations.
func (mlq *MovieListQuery) Aggregate(fns ...AggregateFunc) *MovieListSelect {
	return mlq.Select().Aggregate(fns...)
}

func (mlq *MovieListQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mlq); err != nil {
				return err
			}
		}
	}
	for _, f := range mlq.ctx.Fields {
		if !movielist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mlq.path != nil {
		prev, err := mlq.path(ctx)
		if err != nil {
			return err
		}
		mlq.sql = prev
	}
	return nil
}

func (mlq *MovieListQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MovieList, error) {
	var (
		nodes       = []*MovieList{}
		withFKs     = mlq.withFKs
		_spec       = mlq.querySpec()
		loadedTypes = [3]bool{
			mlq.withMovies != nil,
			mlq.withOwner != nil,
			mlq.withMovieListShares != nil,
		}
	)
	if mlq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, movielist.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MovieList).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MovieList{config: mlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mlq.withMovies; query != nil {
		if err := mlq.loadMovies(ctx, query, nodes,
			func(n *MovieList) { n.Edges.Movies = []*Movie{} },
			func(n *MovieList, e *Movie) { n.Edges.Movies = append(n.Edges.Movies, e) }); err != nil {
			return nil, err
		}
	}
	if query := mlq.withOwner; query != nil {
		if err := mlq.loadOwner(ctx, query, nodes, nil,
			func(n *MovieList, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := mlq.withMovieListShares; query != nil {
		if err := mlq.loadMovieListShares(ctx, query, nodes,
			func(n *MovieList) { n.Edges.MovieListShares = []*MovieListShare{} },
			func(n *MovieList, e *MovieListShare) { n.Edges.MovieListShares = append(n.Edges.MovieListShares, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mlq *MovieListQuery) loadMovies(ctx context.Context, query *MovieQuery, nodes []*MovieList, init func(*MovieList), assign func(*MovieList, *Movie)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*MovieList)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Movie(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(movielist.MoviesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.movie_list_movies
		if fk == nil {
			return fmt.Errorf(`foreign-key "movie_list_movies" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "movie_list_movies" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (mlq *MovieListQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*MovieList, init func(*MovieList), assign func(*MovieList, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MovieList)
	for i := range nodes {
		if nodes[i].user_movie_lists == nil {
			continue
		}
		fk := *nodes[i].user_movie_lists
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_movie_lists" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mlq *MovieListQuery) loadMovieListShares(ctx context.Context, query *MovieListShareQuery, nodes []*MovieList, init func(*MovieList), assign func(*MovieList, *MovieListShare)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*MovieList)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MovieListShare(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(movielist.MovieListSharesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.movie_list_movie_list_shares
		if fk == nil {
			return fmt.Errorf(`foreign-key "movie_list_movie_list_shares" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "movie_list_movie_list_shares" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (mlq *MovieListQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mlq.querySpec()
	_spec.Node.Columns = mlq.ctx.Fields
	if len(mlq.ctx.Fields) > 0 {
		_spec.Unique = mlq.ctx.Unique != nil && *mlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mlq.driver, _spec)
}

func (mlq *MovieListQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(movielist.Table, movielist.Columns, sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt))
	_spec.From = mlq.sql
	if unique := mlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mlq.path != nil {
		_spec.Unique = true
	}
	if fields := mlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, movielist.FieldID)
		for i := range fields {
			if fields[i] != movielist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mlq *MovieListQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mlq.driver.Dialect())
	t1 := builder.Table(movielist.Table)
	columns := mlq.ctx.Fields
	if len(columns) == 0 {
		columns = movielist.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mlq.sql != nil {
		selector = mlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mlq.ctx.Unique != nil && *mlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mlq.predicates {
		p(selector)
	}
	for _, p := range mlq.order {
		p(selector)
	}
	if offset := mlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MovieListGroupBy is the group-by builder for MovieList entities.
type MovieListGroupBy struct {
	selector
	build *MovieListQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mlgb *MovieListGroupBy) Aggregate(fns ...AggregateFunc) *MovieListGroupBy {
	mlgb.fns = append(mlgb.fns, fns...)
	return mlgb
}

// Scan applies the selector query and scans the result into the given value.
func (mlgb *MovieListGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mlgb.build.ctx, "GroupBy")
	if err := mlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MovieListQuery, *MovieListGroupBy](ctx, mlgb.build, mlgb, mlgb.build.inters, v)
}

func (mlgb *MovieListGroupBy) sqlScan(ctx context.Context, root *MovieListQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mlgb.fns))
	for _, fn := range mlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mlgb.flds)+len(mlgb.fns))
		for _, f := range *mlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MovieListSelect is the builder for selecting fields of MovieList entities.
type MovieListSelect struct {
	*MovieListQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mls *MovieListSelect) Aggregate(fns ...AggregateFunc) *MovieListSelect {
	mls.fns = append(mls.fns, fns...)
	return mls
}

// Scan applies the selector query and scans the result into the given value.
func (mls *MovieListSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mls.ctx, "Select")
	if err := mls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MovieListQuery, *MovieListSelect](ctx, mls.MovieListQuery, mls, mls.inters, v)
}

func (mls *MovieListSelect) sqlScan(ctx context.Context, root *MovieListQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mls.fns))
	for _, fn := range mls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
