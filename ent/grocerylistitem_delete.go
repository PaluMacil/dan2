// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/grocerylistitem"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// GroceryListItemDelete is the builder for deleting a GroceryListItem entity.
type GroceryListItemDelete struct {
	config
	hooks    []Hook
	mutation *GroceryListItemMutation
}

// Where appends a list predicates to the GroceryListItemDelete builder.
func (glid *GroceryListItemDelete) Where(ps ...predicate.GroceryListItem) *GroceryListItemDelete {
	glid.mutation.Where(ps...)
	return glid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (glid *GroceryListItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, glid.sqlExec, glid.mutation, glid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (glid *GroceryListItemDelete) ExecX(ctx context.Context) int {
	n, err := glid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (glid *GroceryListItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(grocerylistitem.Table, sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt))
	if ps := glid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, glid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	glid.mutation.done = true
	return affected, err
}

// GroceryListItemDeleteOne is the builder for deleting a single GroceryListItem entity.
type GroceryListItemDeleteOne struct {
	glid *GroceryListItemDelete
}

// Where appends a list predicates to the GroceryListItemDelete builder.
func (glido *GroceryListItemDeleteOne) Where(ps ...predicate.GroceryListItem) *GroceryListItemDeleteOne {
	glido.glid.mutation.Where(ps...)
	return glido
}

// Exec executes the deletion query.
func (glido *GroceryListItemDeleteOne) Exec(ctx context.Context) error {
	n, err := glido.glid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{grocerylistitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (glido *GroceryListItemDeleteOne) ExecX(ctx context.Context) {
	if err := glido.Exec(ctx); err != nil {
		panic(err)
	}
}
