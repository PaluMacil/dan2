// Code generated by ent, DO NOT EDIT.

package amazonorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldName, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldCategory, v))
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldBrand, v))
}

// Seller applies equality check predicate on the "seller" field. It's identical to SellerEQ.
func Seller(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldSeller, v))
}

// Address1 applies equality check predicate on the "address1" field. It's identical to Address1EQ.
func Address1(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldAddress1, v))
}

// Address2 applies equality check predicate on the "address2" field. It's identical to Address2EQ.
func Address2(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldAddress2, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldCity, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldState, v))
}

// Zip applies equality check predicate on the "zip" field. It's identical to ZipEQ.
func Zip(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldZip, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldPrice, v))
}

// Tax applies equality check predicate on the "tax" field. It's identical to TaxEQ.
func Tax(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldTax, v))
}

// Refund applies equality check predicate on the "refund" field. It's identical to RefundEQ.
func Refund(v bool) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldRefund, v))
}

// OrderedAt applies equality check predicate on the "ordered_at" field. It's identical to OrderedAtEQ.
func OrderedAt(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldOrderedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContainsFold(FieldName, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContainsFold(FieldCategory, v))
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldBrand, v))
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldBrand, v))
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldBrand, vs...))
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldBrand, vs...))
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldBrand, v))
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldBrand, v))
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldBrand, v))
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldBrand, v))
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContains(FieldBrand, v))
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasPrefix(FieldBrand, v))
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasSuffix(FieldBrand, v))
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEqualFold(FieldBrand, v))
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContainsFold(FieldBrand, v))
}

// SellerEQ applies the EQ predicate on the "seller" field.
func SellerEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldSeller, v))
}

// SellerNEQ applies the NEQ predicate on the "seller" field.
func SellerNEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldSeller, v))
}

// SellerIn applies the In predicate on the "seller" field.
func SellerIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldSeller, vs...))
}

// SellerNotIn applies the NotIn predicate on the "seller" field.
func SellerNotIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldSeller, vs...))
}

// SellerGT applies the GT predicate on the "seller" field.
func SellerGT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldSeller, v))
}

// SellerGTE applies the GTE predicate on the "seller" field.
func SellerGTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldSeller, v))
}

// SellerLT applies the LT predicate on the "seller" field.
func SellerLT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldSeller, v))
}

// SellerLTE applies the LTE predicate on the "seller" field.
func SellerLTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldSeller, v))
}

// SellerContains applies the Contains predicate on the "seller" field.
func SellerContains(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContains(FieldSeller, v))
}

// SellerHasPrefix applies the HasPrefix predicate on the "seller" field.
func SellerHasPrefix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasPrefix(FieldSeller, v))
}

// SellerHasSuffix applies the HasSuffix predicate on the "seller" field.
func SellerHasSuffix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasSuffix(FieldSeller, v))
}

// SellerEqualFold applies the EqualFold predicate on the "seller" field.
func SellerEqualFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEqualFold(FieldSeller, v))
}

// SellerContainsFold applies the ContainsFold predicate on the "seller" field.
func SellerContainsFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContainsFold(FieldSeller, v))
}

// Address1EQ applies the EQ predicate on the "address1" field.
func Address1EQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldAddress1, v))
}

// Address1NEQ applies the NEQ predicate on the "address1" field.
func Address1NEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldAddress1, v))
}

// Address1In applies the In predicate on the "address1" field.
func Address1In(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldAddress1, vs...))
}

// Address1NotIn applies the NotIn predicate on the "address1" field.
func Address1NotIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldAddress1, vs...))
}

// Address1GT applies the GT predicate on the "address1" field.
func Address1GT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldAddress1, v))
}

// Address1GTE applies the GTE predicate on the "address1" field.
func Address1GTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldAddress1, v))
}

// Address1LT applies the LT predicate on the "address1" field.
func Address1LT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldAddress1, v))
}

// Address1LTE applies the LTE predicate on the "address1" field.
func Address1LTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldAddress1, v))
}

// Address1Contains applies the Contains predicate on the "address1" field.
func Address1Contains(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContains(FieldAddress1, v))
}

// Address1HasPrefix applies the HasPrefix predicate on the "address1" field.
func Address1HasPrefix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasPrefix(FieldAddress1, v))
}

// Address1HasSuffix applies the HasSuffix predicate on the "address1" field.
func Address1HasSuffix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasSuffix(FieldAddress1, v))
}

// Address1EqualFold applies the EqualFold predicate on the "address1" field.
func Address1EqualFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEqualFold(FieldAddress1, v))
}

// Address1ContainsFold applies the ContainsFold predicate on the "address1" field.
func Address1ContainsFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContainsFold(FieldAddress1, v))
}

// Address2EQ applies the EQ predicate on the "address2" field.
func Address2EQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldAddress2, v))
}

// Address2NEQ applies the NEQ predicate on the "address2" field.
func Address2NEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldAddress2, v))
}

// Address2In applies the In predicate on the "address2" field.
func Address2In(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldAddress2, vs...))
}

// Address2NotIn applies the NotIn predicate on the "address2" field.
func Address2NotIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldAddress2, vs...))
}

// Address2GT applies the GT predicate on the "address2" field.
func Address2GT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldAddress2, v))
}

// Address2GTE applies the GTE predicate on the "address2" field.
func Address2GTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldAddress2, v))
}

// Address2LT applies the LT predicate on the "address2" field.
func Address2LT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldAddress2, v))
}

// Address2LTE applies the LTE predicate on the "address2" field.
func Address2LTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldAddress2, v))
}

// Address2Contains applies the Contains predicate on the "address2" field.
func Address2Contains(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContains(FieldAddress2, v))
}

// Address2HasPrefix applies the HasPrefix predicate on the "address2" field.
func Address2HasPrefix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasPrefix(FieldAddress2, v))
}

// Address2HasSuffix applies the HasSuffix predicate on the "address2" field.
func Address2HasSuffix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasSuffix(FieldAddress2, v))
}

// Address2EqualFold applies the EqualFold predicate on the "address2" field.
func Address2EqualFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEqualFold(FieldAddress2, v))
}

// Address2ContainsFold applies the ContainsFold predicate on the "address2" field.
func Address2ContainsFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContainsFold(FieldAddress2, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldState, v))
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContains(FieldState, v))
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasPrefix(FieldState, v))
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasSuffix(FieldState, v))
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEqualFold(FieldState, v))
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContainsFold(FieldState, v))
}

// ZipEQ applies the EQ predicate on the "zip" field.
func ZipEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldZip, v))
}

// ZipNEQ applies the NEQ predicate on the "zip" field.
func ZipNEQ(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldZip, v))
}

// ZipIn applies the In predicate on the "zip" field.
func ZipIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldZip, vs...))
}

// ZipNotIn applies the NotIn predicate on the "zip" field.
func ZipNotIn(vs ...string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldZip, vs...))
}

// ZipGT applies the GT predicate on the "zip" field.
func ZipGT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldZip, v))
}

// ZipGTE applies the GTE predicate on the "zip" field.
func ZipGTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldZip, v))
}

// ZipLT applies the LT predicate on the "zip" field.
func ZipLT(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldZip, v))
}

// ZipLTE applies the LTE predicate on the "zip" field.
func ZipLTE(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldZip, v))
}

// ZipContains applies the Contains predicate on the "zip" field.
func ZipContains(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContains(FieldZip, v))
}

// ZipHasPrefix applies the HasPrefix predicate on the "zip" field.
func ZipHasPrefix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasPrefix(FieldZip, v))
}

// ZipHasSuffix applies the HasSuffix predicate on the "zip" field.
func ZipHasSuffix(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldHasSuffix(FieldZip, v))
}

// ZipEqualFold applies the EqualFold predicate on the "zip" field.
func ZipEqualFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEqualFold(FieldZip, v))
}

// ZipContainsFold applies the ContainsFold predicate on the "zip" field.
func ZipContainsFold(v string) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldContainsFold(FieldZip, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldPrice, v))
}

// TaxEQ applies the EQ predicate on the "tax" field.
func TaxEQ(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldTax, v))
}

// TaxNEQ applies the NEQ predicate on the "tax" field.
func TaxNEQ(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldTax, v))
}

// TaxIn applies the In predicate on the "tax" field.
func TaxIn(vs ...float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldTax, vs...))
}

// TaxNotIn applies the NotIn predicate on the "tax" field.
func TaxNotIn(vs ...float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldTax, vs...))
}

// TaxGT applies the GT predicate on the "tax" field.
func TaxGT(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldTax, v))
}

// TaxGTE applies the GTE predicate on the "tax" field.
func TaxGTE(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldTax, v))
}

// TaxLT applies the LT predicate on the "tax" field.
func TaxLT(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldTax, v))
}

// TaxLTE applies the LTE predicate on the "tax" field.
func TaxLTE(v float32) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldTax, v))
}

// RefundEQ applies the EQ predicate on the "refund" field.
func RefundEQ(v bool) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldRefund, v))
}

// RefundNEQ applies the NEQ predicate on the "refund" field.
func RefundNEQ(v bool) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldRefund, v))
}

// OrderedAtEQ applies the EQ predicate on the "ordered_at" field.
func OrderedAtEQ(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldOrderedAt, v))
}

// OrderedAtNEQ applies the NEQ predicate on the "ordered_at" field.
func OrderedAtNEQ(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldOrderedAt, v))
}

// OrderedAtIn applies the In predicate on the "ordered_at" field.
func OrderedAtIn(vs ...time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldOrderedAt, vs...))
}

// OrderedAtNotIn applies the NotIn predicate on the "ordered_at" field.
func OrderedAtNotIn(vs ...time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldOrderedAt, vs...))
}

// OrderedAtGT applies the GT predicate on the "ordered_at" field.
func OrderedAtGT(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldOrderedAt, v))
}

// OrderedAtGTE applies the GTE predicate on the "ordered_at" field.
func OrderedAtGTE(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldOrderedAt, v))
}

// OrderedAtLT applies the LT predicate on the "ordered_at" field.
func OrderedAtLT(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldOrderedAt, v))
}

// OrderedAtLTE applies the LTE predicate on the "ordered_at" field.
func OrderedAtLTE(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldOrderedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AmazonOrder {
	return predicate.AmazonOrder(sql.FieldLTE(FieldCreatedAt, v))
}

// HasAmazonList applies the HasEdge predicate on the "amazon_list" edge.
func HasAmazonList() predicate.AmazonOrder {
	return predicate.AmazonOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AmazonListTable, AmazonListPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAmazonListWith applies the HasEdge predicate on the "amazon_list" edge with a given conditions (other predicates).
func HasAmazonListWith(preds ...predicate.AmazonList) predicate.AmazonOrder {
	return predicate.AmazonOrder(func(s *sql.Selector) {
		step := newAmazonListStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AmazonOrder) predicate.AmazonOrder {
	return predicate.AmazonOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AmazonOrder) predicate.AmazonOrder {
	return predicate.AmazonOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AmazonOrder) predicate.AmazonOrder {
	return predicate.AmazonOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
