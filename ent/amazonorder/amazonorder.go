// Code generated by ent, DO NOT EDIT.

package amazonorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the amazonorder type in the database.
	Label = "amazon_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldSeller holds the string denoting the seller field in the database.
	FieldSeller = "seller"
	// FieldAddress1 holds the string denoting the address1 field in the database.
	FieldAddress1 = "address1"
	// FieldAddress2 holds the string denoting the address2 field in the database.
	FieldAddress2 = "address2"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldZip holds the string denoting the zip field in the database.
	FieldZip = "zip"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldTax holds the string denoting the tax field in the database.
	FieldTax = "tax"
	// FieldRefund holds the string denoting the refund field in the database.
	FieldRefund = "refund"
	// FieldOrderedAt holds the string denoting the ordered_at field in the database.
	FieldOrderedAt = "ordered_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAmazonList holds the string denoting the amazon_list edge name in mutations.
	EdgeAmazonList = "amazon_list"
	// Table holds the table name of the amazonorder in the database.
	Table = "amazon_orders"
	// AmazonListTable is the table that holds the amazon_list relation/edge.
	AmazonListTable = "amazon_orders"
	// AmazonListInverseTable is the table name for the AmazonList entity.
	// It exists in this package in order to avoid circular dependency with the "amazonlist" package.
	AmazonListInverseTable = "amazon_lists"
	// AmazonListColumn is the table column denoting the amazon_list relation/edge.
	AmazonListColumn = "amazon_list_amazon_orders"
)

// Columns holds all SQL columns for amazonorder fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCategory,
	FieldBrand,
	FieldSeller,
	FieldAddress1,
	FieldAddress2,
	FieldCity,
	FieldState,
	FieldZip,
	FieldPrice,
	FieldTax,
	FieldRefund,
	FieldOrderedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "amazon_orders"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"amazon_list_amazon_orders",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the AmazonOrder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// BySeller orders the results by the seller field.
func BySeller(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeller, opts...).ToFunc()
}

// ByAddress1 orders the results by the address1 field.
func ByAddress1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress1, opts...).ToFunc()
}

// ByAddress2 orders the results by the address2 field.
func ByAddress2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress2, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByZip orders the results by the zip field.
func ByZip(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZip, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByTax orders the results by the tax field.
func ByTax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTax, opts...).ToFunc()
}

// ByRefund orders the results by the refund field.
func ByRefund(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefund, opts...).ToFunc()
}

// ByOrderedAt orders the results by the ordered_at field.
func ByOrderedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAmazonListField orders the results by amazon_list field.
func ByAmazonListField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAmazonListStep(), sql.OrderByField(field, opts...))
	}
}
func newAmazonListStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AmazonListInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AmazonListTable, AmazonListColumn),
	)
}
