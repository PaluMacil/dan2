// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/movielist"
	"github.com/PaluMacil/dan2/ent/movielistshare"
	"github.com/PaluMacil/dan2/ent/predicate"
	"github.com/PaluMacil/dan2/ent/user"
)

// MovieListShareUpdate is the builder for updating MovieListShare entities.
type MovieListShareUpdate struct {
	config
	hooks    []Hook
	mutation *MovieListShareMutation
}

// Where appends a list predicates to the MovieListShareUpdate builder.
func (mlsu *MovieListShareUpdate) Where(ps ...predicate.MovieListShare) *MovieListShareUpdate {
	mlsu.mutation.Where(ps...)
	return mlsu
}

// SetCanEdit sets the "can_edit" field.
func (mlsu *MovieListShareUpdate) SetCanEdit(b bool) *MovieListShareUpdate {
	mlsu.mutation.SetCanEdit(b)
	return mlsu
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (mlsu *MovieListShareUpdate) SetNillableCanEdit(b *bool) *MovieListShareUpdate {
	if b != nil {
		mlsu.SetCanEdit(*b)
	}
	return mlsu
}

// SetCreatedAt sets the "created_at" field.
func (mlsu *MovieListShareUpdate) SetCreatedAt(t time.Time) *MovieListShareUpdate {
	mlsu.mutation.SetCreatedAt(t)
	return mlsu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mlsu *MovieListShareUpdate) SetNillableCreatedAt(t *time.Time) *MovieListShareUpdate {
	if t != nil {
		mlsu.SetCreatedAt(*t)
	}
	return mlsu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mlsu *MovieListShareUpdate) SetUserID(id int) *MovieListShareUpdate {
	mlsu.mutation.SetUserID(id)
	return mlsu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mlsu *MovieListShareUpdate) SetNillableUserID(id *int) *MovieListShareUpdate {
	if id != nil {
		mlsu = mlsu.SetUserID(*id)
	}
	return mlsu
}

// SetUser sets the "user" edge to the User entity.
func (mlsu *MovieListShareUpdate) SetUser(u *User) *MovieListShareUpdate {
	return mlsu.SetUserID(u.ID)
}

// SetMovieListID sets the "movie_list" edge to the MovieList entity by ID.
func (mlsu *MovieListShareUpdate) SetMovieListID(id int) *MovieListShareUpdate {
	mlsu.mutation.SetMovieListID(id)
	return mlsu
}

// SetNillableMovieListID sets the "movie_list" edge to the MovieList entity by ID if the given value is not nil.
func (mlsu *MovieListShareUpdate) SetNillableMovieListID(id *int) *MovieListShareUpdate {
	if id != nil {
		mlsu = mlsu.SetMovieListID(*id)
	}
	return mlsu
}

// SetMovieList sets the "movie_list" edge to the MovieList entity.
func (mlsu *MovieListShareUpdate) SetMovieList(m *MovieList) *MovieListShareUpdate {
	return mlsu.SetMovieListID(m.ID)
}

// Mutation returns the MovieListShareMutation object of the builder.
func (mlsu *MovieListShareUpdate) Mutation() *MovieListShareMutation {
	return mlsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mlsu *MovieListShareUpdate) ClearUser() *MovieListShareUpdate {
	mlsu.mutation.ClearUser()
	return mlsu
}

// ClearMovieList clears the "movie_list" edge to the MovieList entity.
func (mlsu *MovieListShareUpdate) ClearMovieList() *MovieListShareUpdate {
	mlsu.mutation.ClearMovieList()
	return mlsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mlsu *MovieListShareUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mlsu.sqlSave, mlsu.mutation, mlsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlsu *MovieListShareUpdate) SaveX(ctx context.Context) int {
	affected, err := mlsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mlsu *MovieListShareUpdate) Exec(ctx context.Context) error {
	_, err := mlsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlsu *MovieListShareUpdate) ExecX(ctx context.Context) {
	if err := mlsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mlsu *MovieListShareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(movielistshare.Table, movielistshare.Columns, sqlgraph.NewFieldSpec(movielistshare.FieldID, field.TypeInt))
	if ps := mlsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mlsu.mutation.CanEdit(); ok {
		_spec.SetField(movielistshare.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := mlsu.mutation.CreatedAt(); ok {
		_spec.SetField(movielistshare.FieldCreatedAt, field.TypeTime, value)
	}
	if mlsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movielistshare.UserTable,
			Columns: []string{movielistshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movielistshare.UserTable,
			Columns: []string{movielistshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mlsu.mutation.MovieListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movielistshare.MovieListTable,
			Columns: []string{movielistshare.MovieListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlsu.mutation.MovieListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movielistshare.MovieListTable,
			Columns: []string{movielistshare.MovieListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mlsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movielistshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mlsu.mutation.done = true
	return n, nil
}

// MovieListShareUpdateOne is the builder for updating a single MovieListShare entity.
type MovieListShareUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovieListShareMutation
}

// SetCanEdit sets the "can_edit" field.
func (mlsuo *MovieListShareUpdateOne) SetCanEdit(b bool) *MovieListShareUpdateOne {
	mlsuo.mutation.SetCanEdit(b)
	return mlsuo
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (mlsuo *MovieListShareUpdateOne) SetNillableCanEdit(b *bool) *MovieListShareUpdateOne {
	if b != nil {
		mlsuo.SetCanEdit(*b)
	}
	return mlsuo
}

// SetCreatedAt sets the "created_at" field.
func (mlsuo *MovieListShareUpdateOne) SetCreatedAt(t time.Time) *MovieListShareUpdateOne {
	mlsuo.mutation.SetCreatedAt(t)
	return mlsuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mlsuo *MovieListShareUpdateOne) SetNillableCreatedAt(t *time.Time) *MovieListShareUpdateOne {
	if t != nil {
		mlsuo.SetCreatedAt(*t)
	}
	return mlsuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mlsuo *MovieListShareUpdateOne) SetUserID(id int) *MovieListShareUpdateOne {
	mlsuo.mutation.SetUserID(id)
	return mlsuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mlsuo *MovieListShareUpdateOne) SetNillableUserID(id *int) *MovieListShareUpdateOne {
	if id != nil {
		mlsuo = mlsuo.SetUserID(*id)
	}
	return mlsuo
}

// SetUser sets the "user" edge to the User entity.
func (mlsuo *MovieListShareUpdateOne) SetUser(u *User) *MovieListShareUpdateOne {
	return mlsuo.SetUserID(u.ID)
}

// SetMovieListID sets the "movie_list" edge to the MovieList entity by ID.
func (mlsuo *MovieListShareUpdateOne) SetMovieListID(id int) *MovieListShareUpdateOne {
	mlsuo.mutation.SetMovieListID(id)
	return mlsuo
}

// SetNillableMovieListID sets the "movie_list" edge to the MovieList entity by ID if the given value is not nil.
func (mlsuo *MovieListShareUpdateOne) SetNillableMovieListID(id *int) *MovieListShareUpdateOne {
	if id != nil {
		mlsuo = mlsuo.SetMovieListID(*id)
	}
	return mlsuo
}

// SetMovieList sets the "movie_list" edge to the MovieList entity.
func (mlsuo *MovieListShareUpdateOne) SetMovieList(m *MovieList) *MovieListShareUpdateOne {
	return mlsuo.SetMovieListID(m.ID)
}

// Mutation returns the MovieListShareMutation object of the builder.
func (mlsuo *MovieListShareUpdateOne) Mutation() *MovieListShareMutation {
	return mlsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mlsuo *MovieListShareUpdateOne) ClearUser() *MovieListShareUpdateOne {
	mlsuo.mutation.ClearUser()
	return mlsuo
}

// ClearMovieList clears the "movie_list" edge to the MovieList entity.
func (mlsuo *MovieListShareUpdateOne) ClearMovieList() *MovieListShareUpdateOne {
	mlsuo.mutation.ClearMovieList()
	return mlsuo
}

// Where appends a list predicates to the MovieListShareUpdate builder.
func (mlsuo *MovieListShareUpdateOne) Where(ps ...predicate.MovieListShare) *MovieListShareUpdateOne {
	mlsuo.mutation.Where(ps...)
	return mlsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mlsuo *MovieListShareUpdateOne) Select(field string, fields ...string) *MovieListShareUpdateOne {
	mlsuo.fields = append([]string{field}, fields...)
	return mlsuo
}

// Save executes the query and returns the updated MovieListShare entity.
func (mlsuo *MovieListShareUpdateOne) Save(ctx context.Context) (*MovieListShare, error) {
	return withHooks(ctx, mlsuo.sqlSave, mlsuo.mutation, mlsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlsuo *MovieListShareUpdateOne) SaveX(ctx context.Context) *MovieListShare {
	node, err := mlsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mlsuo *MovieListShareUpdateOne) Exec(ctx context.Context) error {
	_, err := mlsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlsuo *MovieListShareUpdateOne) ExecX(ctx context.Context) {
	if err := mlsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mlsuo *MovieListShareUpdateOne) sqlSave(ctx context.Context) (_node *MovieListShare, err error) {
	_spec := sqlgraph.NewUpdateSpec(movielistshare.Table, movielistshare.Columns, sqlgraph.NewFieldSpec(movielistshare.FieldID, field.TypeInt))
	id, ok := mlsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MovieListShare.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mlsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, movielistshare.FieldID)
		for _, f := range fields {
			if !movielistshare.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != movielistshare.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mlsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mlsuo.mutation.CanEdit(); ok {
		_spec.SetField(movielistshare.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := mlsuo.mutation.CreatedAt(); ok {
		_spec.SetField(movielistshare.FieldCreatedAt, field.TypeTime, value)
	}
	if mlsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movielistshare.UserTable,
			Columns: []string{movielistshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movielistshare.UserTable,
			Columns: []string{movielistshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mlsuo.mutation.MovieListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movielistshare.MovieListTable,
			Columns: []string{movielistshare.MovieListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlsuo.mutation.MovieListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   movielistshare.MovieListTable,
			Columns: []string{movielistshare.MovieListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MovieListShare{config: mlsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mlsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movielistshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mlsuo.mutation.done = true
	return _node, nil
}
