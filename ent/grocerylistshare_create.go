// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/grocerylist"
	"github.com/PaluMacil/dan2/ent/grocerylistshare"
	"github.com/PaluMacil/dan2/ent/user"
)

// GroceryListShareCreate is the builder for creating a GroceryListShare entity.
type GroceryListShareCreate struct {
	config
	mutation *GroceryListShareMutation
	hooks    []Hook
}

// SetCanEdit sets the "can_edit" field.
func (glsc *GroceryListShareCreate) SetCanEdit(b bool) *GroceryListShareCreate {
	glsc.mutation.SetCanEdit(b)
	return glsc
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (glsc *GroceryListShareCreate) SetNillableCanEdit(b *bool) *GroceryListShareCreate {
	if b != nil {
		glsc.SetCanEdit(*b)
	}
	return glsc
}

// SetCreatedAt sets the "created_at" field.
func (glsc *GroceryListShareCreate) SetCreatedAt(t time.Time) *GroceryListShareCreate {
	glsc.mutation.SetCreatedAt(t)
	return glsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (glsc *GroceryListShareCreate) SetNillableCreatedAt(t *time.Time) *GroceryListShareCreate {
	if t != nil {
		glsc.SetCreatedAt(*t)
	}
	return glsc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (glsc *GroceryListShareCreate) SetUserID(id int) *GroceryListShareCreate {
	glsc.mutation.SetUserID(id)
	return glsc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (glsc *GroceryListShareCreate) SetNillableUserID(id *int) *GroceryListShareCreate {
	if id != nil {
		glsc = glsc.SetUserID(*id)
	}
	return glsc
}

// SetUser sets the "user" edge to the User entity.
func (glsc *GroceryListShareCreate) SetUser(u *User) *GroceryListShareCreate {
	return glsc.SetUserID(u.ID)
}

// SetGroceryListID sets the "grocery_list" edge to the GroceryList entity by ID.
func (glsc *GroceryListShareCreate) SetGroceryListID(id int) *GroceryListShareCreate {
	glsc.mutation.SetGroceryListID(id)
	return glsc
}

// SetNillableGroceryListID sets the "grocery_list" edge to the GroceryList entity by ID if the given value is not nil.
func (glsc *GroceryListShareCreate) SetNillableGroceryListID(id *int) *GroceryListShareCreate {
	if id != nil {
		glsc = glsc.SetGroceryListID(*id)
	}
	return glsc
}

// SetGroceryList sets the "grocery_list" edge to the GroceryList entity.
func (glsc *GroceryListShareCreate) SetGroceryList(g *GroceryList) *GroceryListShareCreate {
	return glsc.SetGroceryListID(g.ID)
}

// Mutation returns the GroceryListShareMutation object of the builder.
func (glsc *GroceryListShareCreate) Mutation() *GroceryListShareMutation {
	return glsc.mutation
}

// Save creates the GroceryListShare in the database.
func (glsc *GroceryListShareCreate) Save(ctx context.Context) (*GroceryListShare, error) {
	glsc.defaults()
	return withHooks(ctx, glsc.sqlSave, glsc.mutation, glsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (glsc *GroceryListShareCreate) SaveX(ctx context.Context) *GroceryListShare {
	v, err := glsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glsc *GroceryListShareCreate) Exec(ctx context.Context) error {
	_, err := glsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glsc *GroceryListShareCreate) ExecX(ctx context.Context) {
	if err := glsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (glsc *GroceryListShareCreate) defaults() {
	if _, ok := glsc.mutation.CanEdit(); !ok {
		v := grocerylistshare.DefaultCanEdit
		glsc.mutation.SetCanEdit(v)
	}
	if _, ok := glsc.mutation.CreatedAt(); !ok {
		v := grocerylistshare.DefaultCreatedAt()
		glsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (glsc *GroceryListShareCreate) check() error {
	if _, ok := glsc.mutation.CanEdit(); !ok {
		return &ValidationError{Name: "can_edit", err: errors.New(`ent: missing required field "GroceryListShare.can_edit"`)}
	}
	if _, ok := glsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GroceryListShare.created_at"`)}
	}
	return nil
}

func (glsc *GroceryListShareCreate) sqlSave(ctx context.Context) (*GroceryListShare, error) {
	if err := glsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := glsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, glsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	glsc.mutation.id = &_node.ID
	glsc.mutation.done = true
	return _node, nil
}

func (glsc *GroceryListShareCreate) createSpec() (*GroceryListShare, *sqlgraph.CreateSpec) {
	var (
		_node = &GroceryListShare{config: glsc.config}
		_spec = sqlgraph.NewCreateSpec(grocerylistshare.Table, sqlgraph.NewFieldSpec(grocerylistshare.FieldID, field.TypeInt))
	)
	if value, ok := glsc.mutation.CanEdit(); ok {
		_spec.SetField(grocerylistshare.FieldCanEdit, field.TypeBool, value)
		_node.CanEdit = value
	}
	if value, ok := glsc.mutation.CreatedAt(); ok {
		_spec.SetField(grocerylistshare.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := glsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grocerylistshare.UserTable,
			Columns: []string{grocerylistshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_grocery_list_shares = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := glsc.mutation.GroceryListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grocerylistshare.GroceryListTable,
			Columns: []string{grocerylistshare.GroceryListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.grocery_list_grocery_list_shares = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroceryListShareCreateBulk is the builder for creating many GroceryListShare entities in bulk.
type GroceryListShareCreateBulk struct {
	config
	builders []*GroceryListShareCreate
}

// Save creates the GroceryListShare entities in the database.
func (glscb *GroceryListShareCreateBulk) Save(ctx context.Context) ([]*GroceryListShare, error) {
	specs := make([]*sqlgraph.CreateSpec, len(glscb.builders))
	nodes := make([]*GroceryListShare, len(glscb.builders))
	mutators := make([]Mutator, len(glscb.builders))
	for i := range glscb.builders {
		func(i int, root context.Context) {
			builder := glscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroceryListShareMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, glscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, glscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, glscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (glscb *GroceryListShareCreateBulk) SaveX(ctx context.Context) []*GroceryListShare {
	v, err := glscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (glscb *GroceryListShareCreateBulk) Exec(ctx context.Context) error {
	_, err := glscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (glscb *GroceryListShareCreateBulk) ExecX(ctx context.Context) {
	if err := glscb.Exec(ctx); err != nil {
		panic(err)
	}
}
