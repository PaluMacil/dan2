// Code generated by ent, DO NOT EDIT.

package grocerylist

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grocerylist type in the database.
	Label = "grocery_list"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldArchived holds the string denoting the archived field in the database.
	FieldArchived = "archived"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeGroceryListItems holds the string denoting the grocery_list_items edge name in mutations.
	EdgeGroceryListItems = "grocery_list_items"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeGroceryListShares holds the string denoting the grocery_list_shares edge name in mutations.
	EdgeGroceryListShares = "grocery_list_shares"
	// Table holds the table name of the grocerylist in the database.
	Table = "grocery_lists"
	// GroceryListItemsTable is the table that holds the grocery_list_items relation/edge.
	GroceryListItemsTable = "grocery_list_items"
	// GroceryListItemsInverseTable is the table name for the GroceryListItem entity.
	// It exists in this package in order to avoid circular dependency with the "grocerylistitem" package.
	GroceryListItemsInverseTable = "grocery_list_items"
	// GroceryListItemsColumn is the table column denoting the grocery_list_items relation/edge.
	GroceryListItemsColumn = "grocery_list_grocery_list_items"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "grocery_lists"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_grocery_lists"
	// GroceryListSharesTable is the table that holds the grocery_list_shares relation/edge.
	GroceryListSharesTable = "grocery_list_shares"
	// GroceryListSharesInverseTable is the table name for the GroceryListShare entity.
	// It exists in this package in order to avoid circular dependency with the "grocerylistshare" package.
	GroceryListSharesInverseTable = "grocery_list_shares"
	// GroceryListSharesColumn is the table column denoting the grocery_list_shares relation/edge.
	GroceryListSharesColumn = "grocery_list_grocery_list_shares"
)

// Columns holds all SQL columns for grocerylist fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNote,
	FieldArchived,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "grocery_lists"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_grocery_lists",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultNote holds the default value on creation for the "note" field.
	DefaultNote string
	// DefaultArchived holds the default value on creation for the "archived" field.
	DefaultArchived bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the GroceryList queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByArchived orders the results by the archived field.
func ByArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchived, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByGroceryListItemsCount orders the results by grocery_list_items count.
func ByGroceryListItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroceryListItemsStep(), opts...)
	}
}

// ByGroceryListItems orders the results by grocery_list_items terms.
func ByGroceryListItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroceryListItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroceryListSharesCount orders the results by grocery_list_shares count.
func ByGroceryListSharesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroceryListSharesStep(), opts...)
	}
}

// ByGroceryListShares orders the results by grocery_list_shares terms.
func ByGroceryListShares(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroceryListSharesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGroceryListItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroceryListItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroceryListItemsTable, GroceryListItemsColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newGroceryListSharesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroceryListSharesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroceryListSharesTable, GroceryListSharesColumn),
	)
}
