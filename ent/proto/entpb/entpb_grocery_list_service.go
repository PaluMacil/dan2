// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/PaluMacil/dan2/ent"
	grocerylist "github.com/PaluMacil/dan2/ent/grocerylist"
	grocerylistitem "github.com/PaluMacil/dan2/ent/grocerylistitem"
	grocerylistshare "github.com/PaluMacil/dan2/ent/grocerylistshare"
	user "github.com/PaluMacil/dan2/ent/user"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
)

// GroceryListService implements GroceryListServiceServer
type GroceryListService struct {
	client *ent.Client
	UnimplementedGroceryListServiceServer
}

// NewGroceryListService returns a new GroceryListService
func NewGroceryListService(client *ent.Client) *GroceryListService {
	return &GroceryListService{
		client: client,
	}
}

// toProtoGroceryList transforms the ent type to the pb type
func toProtoGroceryList(e *ent.GroceryList) (*GroceryList, error) {
	v := &GroceryList{}
	archived := e.Archived
	v.Archived = archived
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id := int64(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	note := e.Note
	v.Note = note
	for _, edg := range e.Edges.GroceryListItems {
		id := int64(edg.ID)
		v.GroceryListItems = append(v.GroceryListItems, &GroceryListItem{
			Id: id,
		})
	}
	for _, edg := range e.Edges.GroceryListShares {
		id := int64(edg.ID)
		v.GroceryListShares = append(v.GroceryListShares, &GroceryListShare{
			Id: id,
		})
	}
	if edg := e.Edges.Owner; edg != nil {
		id := int64(edg.ID)
		v.Owner = &User{
			Id: id,
		}
	}
	return v, nil
}

// toProtoGroceryListList transforms a list of ent type to a list of pb type
func toProtoGroceryListList(e []*ent.GroceryList) ([]*GroceryList, error) {
	var pbList []*GroceryList
	for _, entEntity := range e {
		pbEntity, err := toProtoGroceryList(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements GroceryListServiceServer.Create
func (svc *GroceryListService) Create(ctx context.Context, req *CreateGroceryListRequest) (*GroceryList, error) {
	grocerylist := req.GetGroceryList()
	m, err := svc.createBuilder(grocerylist)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGroceryList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements GroceryListServiceServer.Get
func (svc *GroceryListService) Get(ctx context.Context, req *GetGroceryListRequest) (*GroceryList, error) {
	var (
		err error
		get *ent.GroceryList
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetGroceryListRequest_VIEW_UNSPECIFIED, GetGroceryListRequest_BASIC:
		get, err = svc.client.GroceryList.Get(ctx, id)
	case GetGroceryListRequest_WITH_EDGE_IDS:
		get, err = svc.client.GroceryList.Query().
			Where(grocerylist.ID(id)).
			WithGroceryListItems(func(query *ent.GroceryListItemQuery) {
				query.Select(grocerylistitem.FieldID)
			}).
			WithGroceryListShares(func(query *ent.GroceryListShareQuery) {
				query.Select(grocerylistshare.FieldID)
			}).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoGroceryList(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements GroceryListServiceServer.Update
func (svc *GroceryListService) Update(ctx context.Context, req *UpdateGroceryListRequest) (*GroceryList, error) {
	grocerylist := req.GetGroceryList()
	grocerylistID := int(grocerylist.GetId())
	m := svc.client.GroceryList.UpdateOneID(grocerylistID)
	grocerylistArchived := grocerylist.GetArchived()
	m.SetArchived(grocerylistArchived)
	grocerylistCreatedAt := runtime.ExtractTime(grocerylist.GetCreatedAt())
	m.SetCreatedAt(grocerylistCreatedAt)
	grocerylistName := grocerylist.GetName()
	m.SetName(grocerylistName)
	grocerylistNote := grocerylist.GetNote()
	m.SetNote(grocerylistNote)
	for _, item := range grocerylist.GetGroceryListItems() {
		grocerylistitems := int(item.GetId())
		m.AddGroceryListItemIDs(grocerylistitems)
	}
	for _, item := range grocerylist.GetGroceryListShares() {
		grocerylistshares := int(item.GetId())
		m.AddGroceryListShareIDs(grocerylistshares)
	}
	if grocerylist.GetOwner() != nil {
		grocerylistOwner := int(grocerylist.GetOwner().GetId())
		m.SetOwnerID(grocerylistOwner)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoGroceryList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements GroceryListServiceServer.Delete
func (svc *GroceryListService) Delete(ctx context.Context, req *DeleteGroceryListRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.GroceryList.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements GroceryListServiceServer.List
func (svc *GroceryListService) List(ctx context.Context, req *ListGroceryListRequest) (*ListGroceryListResponse, error) {
	var (
		err      error
		entList  []*ent.GroceryList
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.GroceryList.Query().
		Order(ent.Desc(grocerylist.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(grocerylist.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListGroceryListRequest_VIEW_UNSPECIFIED, ListGroceryListRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListGroceryListRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithGroceryListItems(func(query *ent.GroceryListItemQuery) {
				query.Select(grocerylistitem.FieldID)
			}).
			WithGroceryListShares(func(query *ent.GroceryListShareQuery) {
				query.Select(grocerylistshare.FieldID)
			}).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoGroceryListList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListGroceryListResponse{
			GroceryListList: protoList,
			NextPageToken:   nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements GroceryListServiceServer.BatchCreate
func (svc *GroceryListService) BatchCreate(ctx context.Context, req *BatchCreateGroceryListsRequest) (*BatchCreateGroceryListsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.GroceryListCreate, len(requests))
	for i, req := range requests {
		grocerylist := req.GetGroceryList()
		var err error
		bulk[i], err = svc.createBuilder(grocerylist)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.GroceryList.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoGroceryListList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateGroceryListsResponse{
			GroceryLists: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *GroceryListService) createBuilder(grocerylist *GroceryList) (*ent.GroceryListCreate, error) {
	m := svc.client.GroceryList.Create()
	grocerylistArchived := grocerylist.GetArchived()
	m.SetArchived(grocerylistArchived)
	grocerylistCreatedAt := runtime.ExtractTime(grocerylist.GetCreatedAt())
	m.SetCreatedAt(grocerylistCreatedAt)
	grocerylistName := grocerylist.GetName()
	m.SetName(grocerylistName)
	grocerylistNote := grocerylist.GetNote()
	m.SetNote(grocerylistNote)
	for _, item := range grocerylist.GetGroceryListItems() {
		grocerylistitems := int(item.GetId())
		m.AddGroceryListItemIDs(grocerylistitems)
	}
	for _, item := range grocerylist.GetGroceryListShares() {
		grocerylistshares := int(item.GetId())
		m.AddGroceryListShareIDs(grocerylistshares)
	}
	if grocerylist.GetOwner() != nil {
		grocerylistOwner := int(grocerylist.GetOwner().GetId())
		m.SetOwnerID(grocerylistOwner)
	}
	return m, nil
}
