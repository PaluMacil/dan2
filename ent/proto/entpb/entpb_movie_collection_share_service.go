// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/PaluMacil/dan2/ent"
	moviecollection "github.com/PaluMacil/dan2/ent/moviecollection"
	moviecollectionshare "github.com/PaluMacil/dan2/ent/moviecollectionshare"
	user "github.com/PaluMacil/dan2/ent/user"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
)

// MovieCollectionShareService implements MovieCollectionShareServiceServer
type MovieCollectionShareService struct {
	client *ent.Client
	UnimplementedMovieCollectionShareServiceServer
}

// NewMovieCollectionShareService returns a new MovieCollectionShareService
func NewMovieCollectionShareService(client *ent.Client) *MovieCollectionShareService {
	return &MovieCollectionShareService{
		client: client,
	}
}

// toProtoMovieCollectionShare transforms the ent type to the pb type
func toProtoMovieCollectionShare(e *ent.MovieCollectionShare) (*MovieCollectionShare, error) {
	v := &MovieCollectionShare{}
	can_edit := e.CanEdit
	v.CanEdit = can_edit
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id := int64(e.ID)
	v.Id = id
	if edg := e.Edges.MovieCollection; edg != nil {
		id := int64(edg.ID)
		v.MovieCollection = &MovieCollection{
			Id: id,
		}
	}
	if edg := e.Edges.User; edg != nil {
		id := int64(edg.ID)
		v.User = &User{
			Id: id,
		}
	}
	return v, nil
}

// toProtoMovieCollectionShareList transforms a list of ent type to a list of pb type
func toProtoMovieCollectionShareList(e []*ent.MovieCollectionShare) ([]*MovieCollectionShare, error) {
	var pbList []*MovieCollectionShare
	for _, entEntity := range e {
		pbEntity, err := toProtoMovieCollectionShare(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements MovieCollectionShareServiceServer.Create
func (svc *MovieCollectionShareService) Create(ctx context.Context, req *CreateMovieCollectionShareRequest) (*MovieCollectionShare, error) {
	moviecollectionshare := req.GetMovieCollectionShare()
	m, err := svc.createBuilder(moviecollectionshare)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoMovieCollectionShare(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements MovieCollectionShareServiceServer.Get
func (svc *MovieCollectionShareService) Get(ctx context.Context, req *GetMovieCollectionShareRequest) (*MovieCollectionShare, error) {
	var (
		err error
		get *ent.MovieCollectionShare
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetMovieCollectionShareRequest_VIEW_UNSPECIFIED, GetMovieCollectionShareRequest_BASIC:
		get, err = svc.client.MovieCollectionShare.Get(ctx, id)
	case GetMovieCollectionShareRequest_WITH_EDGE_IDS:
		get, err = svc.client.MovieCollectionShare.Query().
			Where(moviecollectionshare.ID(id)).
			WithMovieCollection(func(query *ent.MovieCollectionQuery) {
				query.Select(moviecollection.FieldID)
			}).
			WithUser(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoMovieCollectionShare(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements MovieCollectionShareServiceServer.Update
func (svc *MovieCollectionShareService) Update(ctx context.Context, req *UpdateMovieCollectionShareRequest) (*MovieCollectionShare, error) {
	moviecollectionshare := req.GetMovieCollectionShare()
	moviecollectionshareID := int(moviecollectionshare.GetId())
	m := svc.client.MovieCollectionShare.UpdateOneID(moviecollectionshareID)
	moviecollectionshareCanEdit := moviecollectionshare.GetCanEdit()
	m.SetCanEdit(moviecollectionshareCanEdit)
	moviecollectionshareCreatedAt := runtime.ExtractTime(moviecollectionshare.GetCreatedAt())
	m.SetCreatedAt(moviecollectionshareCreatedAt)
	if moviecollectionshare.GetMovieCollection() != nil {
		moviecollectionshareMovieCollection := int(moviecollectionshare.GetMovieCollection().GetId())
		m.SetMovieCollectionID(moviecollectionshareMovieCollection)
	}
	if moviecollectionshare.GetUser() != nil {
		moviecollectionshareUser := int(moviecollectionshare.GetUser().GetId())
		m.SetUserID(moviecollectionshareUser)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoMovieCollectionShare(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements MovieCollectionShareServiceServer.Delete
func (svc *MovieCollectionShareService) Delete(ctx context.Context, req *DeleteMovieCollectionShareRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.MovieCollectionShare.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements MovieCollectionShareServiceServer.List
func (svc *MovieCollectionShareService) List(ctx context.Context, req *ListMovieCollectionShareRequest) (*ListMovieCollectionShareResponse, error) {
	var (
		err      error
		entList  []*ent.MovieCollectionShare
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.MovieCollectionShare.Query().
		Order(ent.Desc(moviecollectionshare.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(moviecollectionshare.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListMovieCollectionShareRequest_VIEW_UNSPECIFIED, ListMovieCollectionShareRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListMovieCollectionShareRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithMovieCollection(func(query *ent.MovieCollectionQuery) {
				query.Select(moviecollection.FieldID)
			}).
			WithUser(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoMovieCollectionShareList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListMovieCollectionShareResponse{
			MovieCollectionShareList: protoList,
			NextPageToken:            nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements MovieCollectionShareServiceServer.BatchCreate
func (svc *MovieCollectionShareService) BatchCreate(ctx context.Context, req *BatchCreateMovieCollectionSharesRequest) (*BatchCreateMovieCollectionSharesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.MovieCollectionShareCreate, len(requests))
	for i, req := range requests {
		moviecollectionshare := req.GetMovieCollectionShare()
		var err error
		bulk[i], err = svc.createBuilder(moviecollectionshare)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.MovieCollectionShare.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoMovieCollectionShareList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateMovieCollectionSharesResponse{
			MovieCollectionShares: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *MovieCollectionShareService) createBuilder(moviecollectionshare *MovieCollectionShare) (*ent.MovieCollectionShareCreate, error) {
	m := svc.client.MovieCollectionShare.Create()
	moviecollectionshareCanEdit := moviecollectionshare.GetCanEdit()
	m.SetCanEdit(moviecollectionshareCanEdit)
	moviecollectionshareCreatedAt := runtime.ExtractTime(moviecollectionshare.GetCreatedAt())
	m.SetCreatedAt(moviecollectionshareCreatedAt)
	if moviecollectionshare.GetMovieCollection() != nil {
		moviecollectionshareMovieCollection := int(moviecollectionshare.GetMovieCollection().GetId())
		m.SetMovieCollectionID(moviecollectionshareMovieCollection)
	}
	if moviecollectionshare.GetUser() != nil {
		moviecollectionshareUser := int(moviecollectionshare.GetUser().GetId())
		m.SetUserID(moviecollectionshareUser)
	}
	return m, nil
}
