// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/PaluMacil/dan2/ent"
	amazonlist "github.com/PaluMacil/dan2/ent/amazonlist"
	amazonorder "github.com/PaluMacil/dan2/ent/amazonorder"
	amazonshare "github.com/PaluMacil/dan2/ent/amazonshare"
	user "github.com/PaluMacil/dan2/ent/user"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
)

// AmazonListService implements AmazonListServiceServer
type AmazonListService struct {
	client *ent.Client
	UnimplementedAmazonListServiceServer
}

// NewAmazonListService returns a new AmazonListService
func NewAmazonListService(client *ent.Client) *AmazonListService {
	return &AmazonListService{
		client: client,
	}
}

// toProtoAmazonList transforms the ent type to the pb type
func toProtoAmazonList(e *ent.AmazonList) (*AmazonList, error) {
	v := &AmazonList{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id := int64(e.ID)
	v.Id = id
	for _, edg := range e.Edges.AmazonOrders {
		id := int64(edg.ID)
		v.AmazonOrders = append(v.AmazonOrders, &AmazonOrder{
			Id: id,
		})
	}
	for _, edg := range e.Edges.AmazonShares {
		id := int64(edg.ID)
		v.AmazonShares = append(v.AmazonShares, &AmazonShare{
			Id: id,
		})
	}
	for _, edg := range e.Edges.Owner {
		id := int64(edg.ID)
		v.Owner = append(v.Owner, &User{
			Id: id,
		})
	}
	return v, nil
}

// toProtoAmazonListList transforms a list of ent type to a list of pb type
func toProtoAmazonListList(e []*ent.AmazonList) ([]*AmazonList, error) {
	var pbList []*AmazonList
	for _, entEntity := range e {
		pbEntity, err := toProtoAmazonList(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements AmazonListServiceServer.Create
func (svc *AmazonListService) Create(ctx context.Context, req *CreateAmazonListRequest) (*AmazonList, error) {
	amazonlist := req.GetAmazonList()
	m, err := svc.createBuilder(amazonlist)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAmazonList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements AmazonListServiceServer.Get
func (svc *AmazonListService) Get(ctx context.Context, req *GetAmazonListRequest) (*AmazonList, error) {
	var (
		err error
		get *ent.AmazonList
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetAmazonListRequest_VIEW_UNSPECIFIED, GetAmazonListRequest_BASIC:
		get, err = svc.client.AmazonList.Get(ctx, id)
	case GetAmazonListRequest_WITH_EDGE_IDS:
		get, err = svc.client.AmazonList.Query().
			Where(amazonlist.ID(id)).
			WithAmazonOrders(func(query *ent.AmazonOrderQuery) {
				query.Select(amazonorder.FieldID)
			}).
			WithAmazonShares(func(query *ent.AmazonShareQuery) {
				query.Select(amazonshare.FieldID)
			}).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoAmazonList(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements AmazonListServiceServer.Update
func (svc *AmazonListService) Update(ctx context.Context, req *UpdateAmazonListRequest) (*AmazonList, error) {
	amazonlist := req.GetAmazonList()
	amazonlistID := int(amazonlist.GetId())
	m := svc.client.AmazonList.UpdateOneID(amazonlistID)
	amazonlistCreatedAt := runtime.ExtractTime(amazonlist.GetCreatedAt())
	m.SetCreatedAt(amazonlistCreatedAt)
	for _, item := range amazonlist.GetAmazonOrders() {
		amazonorders := int(item.GetId())
		m.AddAmazonOrderIDs(amazonorders)
	}
	for _, item := range amazonlist.GetAmazonShares() {
		amazonshares := int(item.GetId())
		m.AddAmazonShareIDs(amazonshares)
	}
	for _, item := range amazonlist.GetOwner() {
		owner := int(item.GetId())
		m.AddOwnerIDs(owner)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAmazonList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements AmazonListServiceServer.Delete
func (svc *AmazonListService) Delete(ctx context.Context, req *DeleteAmazonListRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.AmazonList.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements AmazonListServiceServer.List
func (svc *AmazonListService) List(ctx context.Context, req *ListAmazonListRequest) (*ListAmazonListResponse, error) {
	var (
		err      error
		entList  []*ent.AmazonList
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.AmazonList.Query().
		Order(ent.Desc(amazonlist.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(amazonlist.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListAmazonListRequest_VIEW_UNSPECIFIED, ListAmazonListRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListAmazonListRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithAmazonOrders(func(query *ent.AmazonOrderQuery) {
				query.Select(amazonorder.FieldID)
			}).
			WithAmazonShares(func(query *ent.AmazonShareQuery) {
				query.Select(amazonshare.FieldID)
			}).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoAmazonListList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListAmazonListResponse{
			AmazonListList: protoList,
			NextPageToken:  nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements AmazonListServiceServer.BatchCreate
func (svc *AmazonListService) BatchCreate(ctx context.Context, req *BatchCreateAmazonListsRequest) (*BatchCreateAmazonListsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.AmazonListCreate, len(requests))
	for i, req := range requests {
		amazonlist := req.GetAmazonList()
		var err error
		bulk[i], err = svc.createBuilder(amazonlist)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.AmazonList.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoAmazonListList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateAmazonListsResponse{
			AmazonLists: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *AmazonListService) createBuilder(amazonlist *AmazonList) (*ent.AmazonListCreate, error) {
	m := svc.client.AmazonList.Create()
	amazonlistCreatedAt := runtime.ExtractTime(amazonlist.GetCreatedAt())
	m.SetCreatedAt(amazonlistCreatedAt)
	for _, item := range amazonlist.GetAmazonOrders() {
		amazonorders := int(item.GetId())
		m.AddAmazonOrderIDs(amazonorders)
	}
	for _, item := range amazonlist.GetAmazonShares() {
		amazonshares := int(item.GetId())
		m.AddAmazonShareIDs(amazonshares)
	}
	for _, item := range amazonlist.GetOwner() {
		owner := int(item.GetId())
		m.AddOwnerIDs(owner)
	}
	return m, nil
}
