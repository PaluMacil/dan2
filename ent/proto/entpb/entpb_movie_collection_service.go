// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/PaluMacil/dan2/ent"
	movie "github.com/PaluMacil/dan2/ent/movie"
	moviecollection "github.com/PaluMacil/dan2/ent/moviecollection"
	moviecollectionshare "github.com/PaluMacil/dan2/ent/moviecollectionshare"
	user "github.com/PaluMacil/dan2/ent/user"
	empty "github.com/golang/protobuf/ptypes/empty"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strconv "strconv"
)

// MovieCollectionService implements MovieCollectionServiceServer
type MovieCollectionService struct {
	client *ent.Client
	UnimplementedMovieCollectionServiceServer
}

// NewMovieCollectionService returns a new MovieCollectionService
func NewMovieCollectionService(client *ent.Client) *MovieCollectionService {
	return &MovieCollectionService{
		client: client,
	}
}

// toProtoMovieCollection transforms the ent type to the pb type
func toProtoMovieCollection(e *ent.MovieCollection) (*MovieCollection, error) {
	v := &MovieCollection{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id := int64(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	note := e.Note
	v.Note = note
	show_watched := e.ShowWatched
	v.ShowWatched = show_watched
	for _, edg := range e.Edges.MovieCollectionShares {
		id := int64(edg.ID)
		v.MovieCollectionShares = append(v.MovieCollectionShares, &MovieCollectionShare{
			Id: id,
		})
	}
	for _, edg := range e.Edges.Movies {
		id := int64(edg.ID)
		v.Movies = append(v.Movies, &Movie{
			Id: id,
		})
	}
	if edg := e.Edges.Owner; edg != nil {
		id := int64(edg.ID)
		v.Owner = &User{
			Id: id,
		}
	}
	return v, nil
}

// toProtoMovieCollectionList transforms a list of ent type to a list of pb type
func toProtoMovieCollectionList(e []*ent.MovieCollection) ([]*MovieCollection, error) {
	var pbList []*MovieCollection
	for _, entEntity := range e {
		pbEntity, err := toProtoMovieCollection(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements MovieCollectionServiceServer.Create
func (svc *MovieCollectionService) Create(ctx context.Context, req *CreateMovieCollectionRequest) (*MovieCollection, error) {
	moviecollection := req.GetMovieCollection()
	m, err := svc.createBuilder(moviecollection)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoMovieCollection(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements MovieCollectionServiceServer.Get
func (svc *MovieCollectionService) Get(ctx context.Context, req *GetMovieCollectionRequest) (*MovieCollection, error) {
	var (
		err error
		get *ent.MovieCollection
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetMovieCollectionRequest_VIEW_UNSPECIFIED, GetMovieCollectionRequest_BASIC:
		get, err = svc.client.MovieCollection.Get(ctx, id)
	case GetMovieCollectionRequest_WITH_EDGE_IDS:
		get, err = svc.client.MovieCollection.Query().
			Where(moviecollection.ID(id)).
			WithMovieCollectionShares(func(query *ent.MovieCollectionShareQuery) {
				query.Select(moviecollectionshare.FieldID)
			}).
			WithMovies(func(query *ent.MovieQuery) {
				query.Select(movie.FieldID)
			}).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoMovieCollection(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements MovieCollectionServiceServer.Update
func (svc *MovieCollectionService) Update(ctx context.Context, req *UpdateMovieCollectionRequest) (*MovieCollection, error) {
	moviecollection := req.GetMovieCollection()
	moviecollectionID := int(moviecollection.GetId())
	m := svc.client.MovieCollection.UpdateOneID(moviecollectionID)
	moviecollectionCreatedAt := runtime.ExtractTime(moviecollection.GetCreatedAt())
	m.SetCreatedAt(moviecollectionCreatedAt)
	moviecollectionName := moviecollection.GetName()
	m.SetName(moviecollectionName)
	moviecollectionNote := moviecollection.GetNote()
	m.SetNote(moviecollectionNote)
	moviecollectionShowWatched := moviecollection.GetShowWatched()
	m.SetShowWatched(moviecollectionShowWatched)
	for _, item := range moviecollection.GetMovieCollectionShares() {
		moviecollectionshares := int(item.GetId())
		m.AddMovieCollectionShareIDs(moviecollectionshares)
	}
	for _, item := range moviecollection.GetMovies() {
		movies := int(item.GetId())
		m.AddMovieIDs(movies)
	}
	if moviecollection.GetOwner() != nil {
		moviecollectionOwner := int(moviecollection.GetOwner().GetId())
		m.SetOwnerID(moviecollectionOwner)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoMovieCollection(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements MovieCollectionServiceServer.Delete
func (svc *MovieCollectionService) Delete(ctx context.Context, req *DeleteMovieCollectionRequest) (*empty.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.MovieCollection.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements MovieCollectionServiceServer.List
func (svc *MovieCollectionService) List(ctx context.Context, req *ListMovieCollectionRequest) (*ListMovieCollectionResponse, error) {
	var (
		err      error
		entList  []*ent.MovieCollection
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.MovieCollection.Query().
		Order(ent.Desc(moviecollection.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(moviecollection.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListMovieCollectionRequest_VIEW_UNSPECIFIED, ListMovieCollectionRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListMovieCollectionRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithMovieCollectionShares(func(query *ent.MovieCollectionShareQuery) {
				query.Select(moviecollectionshare.FieldID)
			}).
			WithMovies(func(query *ent.MovieQuery) {
				query.Select(movie.FieldID)
			}).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoMovieCollectionList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListMovieCollectionResponse{
			MovieCollectionList: protoList,
			NextPageToken:       nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements MovieCollectionServiceServer.BatchCreate
func (svc *MovieCollectionService) BatchCreate(ctx context.Context, req *BatchCreateMovieCollectionsRequest) (*BatchCreateMovieCollectionsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.MovieCollectionCreate, len(requests))
	for i, req := range requests {
		moviecollection := req.GetMovieCollection()
		var err error
		bulk[i], err = svc.createBuilder(moviecollection)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.MovieCollection.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoMovieCollectionList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateMovieCollectionsResponse{
			MovieCollections: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *MovieCollectionService) createBuilder(moviecollection *MovieCollection) (*ent.MovieCollectionCreate, error) {
	m := svc.client.MovieCollection.Create()
	moviecollectionCreatedAt := runtime.ExtractTime(moviecollection.GetCreatedAt())
	m.SetCreatedAt(moviecollectionCreatedAt)
	moviecollectionName := moviecollection.GetName()
	m.SetName(moviecollectionName)
	moviecollectionNote := moviecollection.GetNote()
	m.SetNote(moviecollectionNote)
	moviecollectionShowWatched := moviecollection.GetShowWatched()
	m.SetShowWatched(moviecollectionShowWatched)
	for _, item := range moviecollection.GetMovieCollectionShares() {
		moviecollectionshares := int(item.GetId())
		m.AddMovieCollectionShareIDs(moviecollectionshares)
	}
	for _, item := range moviecollection.GetMovies() {
		movies := int(item.GetId())
		m.AddMovieIDs(movies)
	}
	if moviecollection.GetOwner() != nil {
		moviecollectionOwner := int(moviecollection.GetOwner().GetId())
		m.SetOwnerID(moviecollectionOwner)
	}
	return m, nil
}
