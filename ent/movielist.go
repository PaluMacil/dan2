// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PaluMacil/dan2/ent/movielist"
	"github.com/PaluMacil/dan2/ent/user"
)

// MovieList is the model entity for the MovieList schema.
type MovieList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// ShowWatched holds the value of the "show_watched" field.
	ShowWatched bool `json:"show_watched,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovieListQuery when eager-loading is set.
	Edges            MovieListEdges `json:"edges"`
	user_movie_lists *int
	selectValues     sql.SelectValues
}

// MovieListEdges holds the relations/edges for other nodes in the graph.
type MovieListEdges struct {
	// Movies holds the value of the movies edge.
	Movies []*Movie `json:"movies,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// MovieListShares holds the value of the movie_list_shares edge.
	MovieListShares []*MovieListShare `json:"movie_list_shares,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MoviesOrErr returns the Movies value or an error if the edge
// was not loaded in eager-loading.
func (e MovieListEdges) MoviesOrErr() ([]*Movie, error) {
	if e.loadedTypes[0] {
		return e.Movies, nil
	}
	return nil, &NotLoadedError{edge: "movies"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MovieListEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// MovieListSharesOrErr returns the MovieListShares value or an error if the edge
// was not loaded in eager-loading.
func (e MovieListEdges) MovieListSharesOrErr() ([]*MovieListShare, error) {
	if e.loadedTypes[2] {
		return e.MovieListShares, nil
	}
	return nil, &NotLoadedError{edge: "movie_list_shares"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MovieList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case movielist.FieldShowWatched:
			values[i] = new(sql.NullBool)
		case movielist.FieldID:
			values[i] = new(sql.NullInt64)
		case movielist.FieldName, movielist.FieldNote:
			values[i] = new(sql.NullString)
		case movielist.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case movielist.ForeignKeys[0]: // user_movie_lists
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MovieList fields.
func (ml *MovieList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movielist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ml.ID = int(value.Int64)
		case movielist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ml.Name = value.String
			}
		case movielist.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				ml.Note = value.String
			}
		case movielist.FieldShowWatched:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field show_watched", values[i])
			} else if value.Valid {
				ml.ShowWatched = value.Bool
			}
		case movielist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ml.CreatedAt = value.Time
			}
		case movielist.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_movie_lists", value)
			} else if value.Valid {
				ml.user_movie_lists = new(int)
				*ml.user_movie_lists = int(value.Int64)
			}
		default:
			ml.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MovieList.
// This includes values selected through modifiers, order, etc.
func (ml *MovieList) Value(name string) (ent.Value, error) {
	return ml.selectValues.Get(name)
}

// QueryMovies queries the "movies" edge of the MovieList entity.
func (ml *MovieList) QueryMovies() *MovieQuery {
	return NewMovieListClient(ml.config).QueryMovies(ml)
}

// QueryOwner queries the "owner" edge of the MovieList entity.
func (ml *MovieList) QueryOwner() *UserQuery {
	return NewMovieListClient(ml.config).QueryOwner(ml)
}

// QueryMovieListShares queries the "movie_list_shares" edge of the MovieList entity.
func (ml *MovieList) QueryMovieListShares() *MovieListShareQuery {
	return NewMovieListClient(ml.config).QueryMovieListShares(ml)
}

// Update returns a builder for updating this MovieList.
// Note that you need to call MovieList.Unwrap() before calling this method if this MovieList
// was returned from a transaction, and the transaction was committed or rolled back.
func (ml *MovieList) Update() *MovieListUpdateOne {
	return NewMovieListClient(ml.config).UpdateOne(ml)
}

// Unwrap unwraps the MovieList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ml *MovieList) Unwrap() *MovieList {
	_tx, ok := ml.config.driver.(*txDriver)
	if !ok {
		panic("ent: MovieList is not a transactional entity")
	}
	ml.config.driver = _tx.drv
	return ml
}

// String implements the fmt.Stringer.
func (ml *MovieList) String() string {
	var builder strings.Builder
	builder.WriteString("MovieList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ml.ID))
	builder.WriteString("name=")
	builder.WriteString(ml.Name)
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(ml.Note)
	builder.WriteString(", ")
	builder.WriteString("show_watched=")
	builder.WriteString(fmt.Sprintf("%v", ml.ShowWatched))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ml.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MovieLists is a parsable slice of MovieList.
type MovieLists []*MovieList
