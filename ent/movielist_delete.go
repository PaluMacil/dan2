// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/movielist"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// MovieListDelete is the builder for deleting a MovieList entity.
type MovieListDelete struct {
	config
	hooks    []Hook
	mutation *MovieListMutation
}

// Where appends a list predicates to the MovieListDelete builder.
func (mld *MovieListDelete) Where(ps ...predicate.MovieList) *MovieListDelete {
	mld.mutation.Where(ps...)
	return mld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mld *MovieListDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mld.sqlExec, mld.mutation, mld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mld *MovieListDelete) ExecX(ctx context.Context) int {
	n, err := mld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mld *MovieListDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(movielist.Table, sqlgraph.NewFieldSpec(movielist.FieldID, field.TypeInt))
	if ps := mld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mld.mutation.done = true
	return affected, err
}

// MovieListDeleteOne is the builder for deleting a single MovieList entity.
type MovieListDeleteOne struct {
	mld *MovieListDelete
}

// Where appends a list predicates to the MovieListDelete builder.
func (mldo *MovieListDeleteOne) Where(ps ...predicate.MovieList) *MovieListDeleteOne {
	mldo.mld.mutation.Where(ps...)
	return mldo
}

// Exec executes the deletion query.
func (mldo *MovieListDeleteOne) Exec(ctx context.Context) error {
	n, err := mldo.mld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{movielist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mldo *MovieListDeleteOne) ExecX(ctx context.Context) {
	if err := mldo.Exec(ctx); err != nil {
		panic(err)
	}
}
