// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/amazonlist"
	"github.com/PaluMacil/dan2/ent/amazonshare"
	"github.com/PaluMacil/dan2/ent/predicate"
	"github.com/PaluMacil/dan2/ent/user"
)

// AmazonShareUpdate is the builder for updating AmazonShare entities.
type AmazonShareUpdate struct {
	config
	hooks    []Hook
	mutation *AmazonShareMutation
}

// Where appends a list predicates to the AmazonShareUpdate builder.
func (asu *AmazonShareUpdate) Where(ps ...predicate.AmazonShare) *AmazonShareUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetCanEdit sets the "can_edit" field.
func (asu *AmazonShareUpdate) SetCanEdit(b bool) *AmazonShareUpdate {
	asu.mutation.SetCanEdit(b)
	return asu
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (asu *AmazonShareUpdate) SetNillableCanEdit(b *bool) *AmazonShareUpdate {
	if b != nil {
		asu.SetCanEdit(*b)
	}
	return asu
}

// SetCreatedAt sets the "created_at" field.
func (asu *AmazonShareUpdate) SetCreatedAt(t time.Time) *AmazonShareUpdate {
	asu.mutation.SetCreatedAt(t)
	return asu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (asu *AmazonShareUpdate) SetUserID(id int) *AmazonShareUpdate {
	asu.mutation.SetUserID(id)
	return asu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (asu *AmazonShareUpdate) SetNillableUserID(id *int) *AmazonShareUpdate {
	if id != nil {
		asu = asu.SetUserID(*id)
	}
	return asu
}

// SetUser sets the "user" edge to the User entity.
func (asu *AmazonShareUpdate) SetUser(u *User) *AmazonShareUpdate {
	return asu.SetUserID(u.ID)
}

// SetAmazonListID sets the "amazon_list" edge to the AmazonList entity by ID.
func (asu *AmazonShareUpdate) SetAmazonListID(id int) *AmazonShareUpdate {
	asu.mutation.SetAmazonListID(id)
	return asu
}

// SetNillableAmazonListID sets the "amazon_list" edge to the AmazonList entity by ID if the given value is not nil.
func (asu *AmazonShareUpdate) SetNillableAmazonListID(id *int) *AmazonShareUpdate {
	if id != nil {
		asu = asu.SetAmazonListID(*id)
	}
	return asu
}

// SetAmazonList sets the "amazon_list" edge to the AmazonList entity.
func (asu *AmazonShareUpdate) SetAmazonList(a *AmazonList) *AmazonShareUpdate {
	return asu.SetAmazonListID(a.ID)
}

// Mutation returns the AmazonShareMutation object of the builder.
func (asu *AmazonShareUpdate) Mutation() *AmazonShareMutation {
	return asu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (asu *AmazonShareUpdate) ClearUser() *AmazonShareUpdate {
	asu.mutation.ClearUser()
	return asu
}

// ClearAmazonList clears the "amazon_list" edge to the AmazonList entity.
func (asu *AmazonShareUpdate) ClearAmazonList() *AmazonShareUpdate {
	asu.mutation.ClearAmazonList()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AmazonShareUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AmazonShareUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AmazonShareUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AmazonShareUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asu *AmazonShareUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(amazonshare.Table, amazonshare.Columns, sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.CanEdit(); ok {
		_spec.SetField(amazonshare.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := asu.mutation.CreatedAt(); ok {
		_spec.SetField(amazonshare.FieldCreatedAt, field.TypeTime, value)
	}
	if asu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonshare.UserTable,
			Columns: []string{amazonshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonshare.UserTable,
			Columns: []string{amazonshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.AmazonListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonshare.AmazonListTable,
			Columns: []string{amazonshare.AmazonListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.AmazonListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonshare.AmazonListTable,
			Columns: []string{amazonshare.AmazonListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amazonshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AmazonShareUpdateOne is the builder for updating a single AmazonShare entity.
type AmazonShareUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AmazonShareMutation
}

// SetCanEdit sets the "can_edit" field.
func (asuo *AmazonShareUpdateOne) SetCanEdit(b bool) *AmazonShareUpdateOne {
	asuo.mutation.SetCanEdit(b)
	return asuo
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (asuo *AmazonShareUpdateOne) SetNillableCanEdit(b *bool) *AmazonShareUpdateOne {
	if b != nil {
		asuo.SetCanEdit(*b)
	}
	return asuo
}

// SetCreatedAt sets the "created_at" field.
func (asuo *AmazonShareUpdateOne) SetCreatedAt(t time.Time) *AmazonShareUpdateOne {
	asuo.mutation.SetCreatedAt(t)
	return asuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (asuo *AmazonShareUpdateOne) SetUserID(id int) *AmazonShareUpdateOne {
	asuo.mutation.SetUserID(id)
	return asuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (asuo *AmazonShareUpdateOne) SetNillableUserID(id *int) *AmazonShareUpdateOne {
	if id != nil {
		asuo = asuo.SetUserID(*id)
	}
	return asuo
}

// SetUser sets the "user" edge to the User entity.
func (asuo *AmazonShareUpdateOne) SetUser(u *User) *AmazonShareUpdateOne {
	return asuo.SetUserID(u.ID)
}

// SetAmazonListID sets the "amazon_list" edge to the AmazonList entity by ID.
func (asuo *AmazonShareUpdateOne) SetAmazonListID(id int) *AmazonShareUpdateOne {
	asuo.mutation.SetAmazonListID(id)
	return asuo
}

// SetNillableAmazonListID sets the "amazon_list" edge to the AmazonList entity by ID if the given value is not nil.
func (asuo *AmazonShareUpdateOne) SetNillableAmazonListID(id *int) *AmazonShareUpdateOne {
	if id != nil {
		asuo = asuo.SetAmazonListID(*id)
	}
	return asuo
}

// SetAmazonList sets the "amazon_list" edge to the AmazonList entity.
func (asuo *AmazonShareUpdateOne) SetAmazonList(a *AmazonList) *AmazonShareUpdateOne {
	return asuo.SetAmazonListID(a.ID)
}

// Mutation returns the AmazonShareMutation object of the builder.
func (asuo *AmazonShareUpdateOne) Mutation() *AmazonShareMutation {
	return asuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (asuo *AmazonShareUpdateOne) ClearUser() *AmazonShareUpdateOne {
	asuo.mutation.ClearUser()
	return asuo
}

// ClearAmazonList clears the "amazon_list" edge to the AmazonList entity.
func (asuo *AmazonShareUpdateOne) ClearAmazonList() *AmazonShareUpdateOne {
	asuo.mutation.ClearAmazonList()
	return asuo
}

// Where appends a list predicates to the AmazonShareUpdate builder.
func (asuo *AmazonShareUpdateOne) Where(ps ...predicate.AmazonShare) *AmazonShareUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AmazonShareUpdateOne) Select(field string, fields ...string) *AmazonShareUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AmazonShare entity.
func (asuo *AmazonShareUpdateOne) Save(ctx context.Context) (*AmazonShare, error) {
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AmazonShareUpdateOne) SaveX(ctx context.Context) *AmazonShare {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AmazonShareUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AmazonShareUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asuo *AmazonShareUpdateOne) sqlSave(ctx context.Context) (_node *AmazonShare, err error) {
	_spec := sqlgraph.NewUpdateSpec(amazonshare.Table, amazonshare.Columns, sqlgraph.NewFieldSpec(amazonshare.FieldID, field.TypeInt))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AmazonShare.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, amazonshare.FieldID)
		for _, f := range fields {
			if !amazonshare.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != amazonshare.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.CanEdit(); ok {
		_spec.SetField(amazonshare.FieldCanEdit, field.TypeBool, value)
	}
	if value, ok := asuo.mutation.CreatedAt(); ok {
		_spec.SetField(amazonshare.FieldCreatedAt, field.TypeTime, value)
	}
	if asuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonshare.UserTable,
			Columns: []string{amazonshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonshare.UserTable,
			Columns: []string{amazonshare.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.AmazonListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonshare.AmazonListTable,
			Columns: []string{amazonshare.AmazonListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.AmazonListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   amazonshare.AmazonListTable,
			Columns: []string{amazonshare.AmazonListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(amazonlist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AmazonShare{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{amazonshare.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
