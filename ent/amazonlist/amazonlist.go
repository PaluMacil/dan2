// Code generated by ent, DO NOT EDIT.

package amazonlist

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the amazonlist type in the database.
	Label = "amazon_list"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAmazonOrders holds the string denoting the amazon_orders edge name in mutations.
	EdgeAmazonOrders = "amazon_orders"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeAmazonShares holds the string denoting the amazon_shares edge name in mutations.
	EdgeAmazonShares = "amazon_shares"
	// Table holds the table name of the amazonlist in the database.
	Table = "amazon_lists"
	// AmazonOrdersTable is the table that holds the amazon_orders relation/edge. The primary key declared below.
	AmazonOrdersTable = "amazon_list_amazon_orders"
	// AmazonOrdersInverseTable is the table name for the AmazonOrder entity.
	// It exists in this package in order to avoid circular dependency with the "amazonorder" package.
	AmazonOrdersInverseTable = "amazon_orders"
	// OwnerTable is the table that holds the owner relation/edge. The primary key declared below.
	OwnerTable = "user_amazon_lists"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// AmazonSharesTable is the table that holds the amazon_shares relation/edge. The primary key declared below.
	AmazonSharesTable = "amazon_list_amazon_shares"
	// AmazonSharesInverseTable is the table name for the AmazonShare entity.
	// It exists in this package in order to avoid circular dependency with the "amazonshare" package.
	AmazonSharesInverseTable = "amazon_shares"
)

// Columns holds all SQL columns for amazonlist fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
}

var (
	// AmazonOrdersPrimaryKey and AmazonOrdersColumn2 are the table columns denoting the
	// primary key for the amazon_orders relation (M2M).
	AmazonOrdersPrimaryKey = []string{"amazon_list_id", "amazon_order_id"}
	// OwnerPrimaryKey and OwnerColumn2 are the table columns denoting the
	// primary key for the owner relation (M2M).
	OwnerPrimaryKey = []string{"user_id", "amazon_list_id"}
	// AmazonSharesPrimaryKey and AmazonSharesColumn2 are the table columns denoting the
	// primary key for the amazon_shares relation (M2M).
	AmazonSharesPrimaryKey = []string{"amazon_list_id", "amazon_share_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the AmazonList queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAmazonOrdersCount orders the results by amazon_orders count.
func ByAmazonOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAmazonOrdersStep(), opts...)
	}
}

// ByAmazonOrders orders the results by amazon_orders terms.
func ByAmazonOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAmazonOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerCount orders the results by owner count.
func ByOwnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnerStep(), opts...)
	}
}

// ByOwner orders the results by owner terms.
func ByOwner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAmazonSharesCount orders the results by amazon_shares count.
func ByAmazonSharesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAmazonSharesStep(), opts...)
	}
}

// ByAmazonShares orders the results by amazon_shares terms.
func ByAmazonShares(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAmazonSharesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAmazonOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AmazonOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AmazonOrdersTable, AmazonOrdersPrimaryKey...),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OwnerTable, OwnerPrimaryKey...),
	)
}
func newAmazonSharesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AmazonSharesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AmazonSharesTable, AmazonSharesPrimaryKey...),
	)
}
