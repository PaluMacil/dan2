// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PaluMacil/dan2/ent/amazonorder"
)

// AmazonOrder is the model entity for the AmazonOrder schema.
type AmazonOrder struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
	// Brand holds the value of the "brand" field.
	Brand string `json:"brand,omitempty"`
	// Seller holds the value of the "seller" field.
	Seller string `json:"seller,omitempty"`
	// Address1 holds the value of the "address1" field.
	Address1 string `json:"address1,omitempty"`
	// Address2 holds the value of the "address2" field.
	Address2 string `json:"address2,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Zip holds the value of the "zip" field.
	Zip string `json:"zip,omitempty"`
	// Price holds the value of the "price" field.
	Price float32 `json:"price,omitempty"`
	// Tax holds the value of the "tax" field.
	Tax float32 `json:"tax,omitempty"`
	// Refund holds the value of the "refund" field.
	Refund bool `json:"refund,omitempty"`
	// OrderedAt holds the value of the "ordered_at" field.
	OrderedAt time.Time `json:"ordered_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AmazonOrderQuery when eager-loading is set.
	Edges        AmazonOrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AmazonOrderEdges holds the relations/edges for other nodes in the graph.
type AmazonOrderEdges struct {
	// AmazonList holds the value of the amazon_list edge.
	AmazonList []*AmazonList `json:"amazon_list,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AmazonListOrErr returns the AmazonList value or an error if the edge
// was not loaded in eager-loading.
func (e AmazonOrderEdges) AmazonListOrErr() ([]*AmazonList, error) {
	if e.loadedTypes[0] {
		return e.AmazonList, nil
	}
	return nil, &NotLoadedError{edge: "amazon_list"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AmazonOrder) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case amazonorder.FieldRefund:
			values[i] = new(sql.NullBool)
		case amazonorder.FieldPrice, amazonorder.FieldTax:
			values[i] = new(sql.NullFloat64)
		case amazonorder.FieldID:
			values[i] = new(sql.NullInt64)
		case amazonorder.FieldName, amazonorder.FieldCategory, amazonorder.FieldBrand, amazonorder.FieldSeller, amazonorder.FieldAddress1, amazonorder.FieldAddress2, amazonorder.FieldCity, amazonorder.FieldState, amazonorder.FieldZip:
			values[i] = new(sql.NullString)
		case amazonorder.FieldOrderedAt, amazonorder.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AmazonOrder fields.
func (ao *AmazonOrder) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case amazonorder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ao.ID = int(value.Int64)
		case amazonorder.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ao.Name = value.String
			}
		case amazonorder.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				ao.Category = value.String
			}
		case amazonorder.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				ao.Brand = value.String
			}
		case amazonorder.FieldSeller:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seller", values[i])
			} else if value.Valid {
				ao.Seller = value.String
			}
		case amazonorder.FieldAddress1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address1", values[i])
			} else if value.Valid {
				ao.Address1 = value.String
			}
		case amazonorder.FieldAddress2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address2", values[i])
			} else if value.Valid {
				ao.Address2 = value.String
			}
		case amazonorder.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ao.City = value.String
			}
		case amazonorder.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ao.State = value.String
			}
		case amazonorder.FieldZip:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip", values[i])
			} else if value.Valid {
				ao.Zip = value.String
			}
		case amazonorder.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ao.Price = float32(value.Float64)
			}
		case amazonorder.FieldTax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tax", values[i])
			} else if value.Valid {
				ao.Tax = float32(value.Float64)
			}
		case amazonorder.FieldRefund:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field refund", values[i])
			} else if value.Valid {
				ao.Refund = value.Bool
			}
		case amazonorder.FieldOrderedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ordered_at", values[i])
			} else if value.Valid {
				ao.OrderedAt = value.Time
			}
		case amazonorder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ao.CreatedAt = value.Time
			}
		default:
			ao.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AmazonOrder.
// This includes values selected through modifiers, order, etc.
func (ao *AmazonOrder) Value(name string) (ent.Value, error) {
	return ao.selectValues.Get(name)
}

// QueryAmazonList queries the "amazon_list" edge of the AmazonOrder entity.
func (ao *AmazonOrder) QueryAmazonList() *AmazonListQuery {
	return NewAmazonOrderClient(ao.config).QueryAmazonList(ao)
}

// Update returns a builder for updating this AmazonOrder.
// Note that you need to call AmazonOrder.Unwrap() before calling this method if this AmazonOrder
// was returned from a transaction, and the transaction was committed or rolled back.
func (ao *AmazonOrder) Update() *AmazonOrderUpdateOne {
	return NewAmazonOrderClient(ao.config).UpdateOne(ao)
}

// Unwrap unwraps the AmazonOrder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ao *AmazonOrder) Unwrap() *AmazonOrder {
	_tx, ok := ao.config.driver.(*txDriver)
	if !ok {
		panic("ent: AmazonOrder is not a transactional entity")
	}
	ao.config.driver = _tx.drv
	return ao
}

// String implements the fmt.Stringer.
func (ao *AmazonOrder) String() string {
	var builder strings.Builder
	builder.WriteString("AmazonOrder(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ao.ID))
	builder.WriteString("name=")
	builder.WriteString(ao.Name)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(ao.Category)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(ao.Brand)
	builder.WriteString(", ")
	builder.WriteString("seller=")
	builder.WriteString(ao.Seller)
	builder.WriteString(", ")
	builder.WriteString("address1=")
	builder.WriteString(ao.Address1)
	builder.WriteString(", ")
	builder.WriteString("address2=")
	builder.WriteString(ao.Address2)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(ao.City)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(ao.State)
	builder.WriteString(", ")
	builder.WriteString("zip=")
	builder.WriteString(ao.Zip)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", ao.Price))
	builder.WriteString(", ")
	builder.WriteString("tax=")
	builder.WriteString(fmt.Sprintf("%v", ao.Tax))
	builder.WriteString(", ")
	builder.WriteString("refund=")
	builder.WriteString(fmt.Sprintf("%v", ao.Refund))
	builder.WriteString(", ")
	builder.WriteString("ordered_at=")
	builder.WriteString(ao.OrderedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ao.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AmazonOrders is a parsable slice of AmazonOrder.
type AmazonOrders []*AmazonOrder
