// Code generated by ent, DO NOT EDIT.

package drink

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the drink type in the database.
	Label = "drink"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldAbv holds the string denoting the abv field in the database.
	FieldAbv = "abv"
	// FieldOunces holds the string denoting the ounces field in the database.
	FieldOunces = "ounces"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// FieldMonth holds the string denoting the month field in the database.
	FieldMonth = "month"
	// FieldDay holds the string denoting the day field in the database.
	FieldDay = "day"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the drink in the database.
	Table = "drinks"
	// OwnerTable is the table that holds the owner relation/edge. The primary key declared below.
	OwnerTable = "user_drinks"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
)

// Columns holds all SQL columns for drink fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldAbv,
	FieldOunces,
	FieldYear,
	FieldMonth,
	FieldDay,
	FieldNote,
	FieldCreatedAt,
}

var (
	// OwnerPrimaryKey and OwnerColumn2 are the table columns denoting the
	// primary key for the owner relation (M2M).
	OwnerPrimaryKey = []string{"user_id", "drink_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAbv holds the default value on creation for the "abv" field.
	DefaultAbv int8
	// DefaultOunces holds the default value on creation for the "ounces" field.
	DefaultOunces int8
	// DefaultYear holds the default value on creation for the "year" field.
	DefaultYear func() int
	// DefaultMonth holds the default value on creation for the "month" field.
	DefaultMonth func() int
	// DefaultDay holds the default value on creation for the "day" field.
	DefaultDay func() int
	// DefaultNote holds the default value on creation for the "note" field.
	DefaultNote string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// TypeUnknown is the default value of the Type enum.
const DefaultType = TypeUnknown

// Type values.
const (
	TypeUnknown   Type = "unknown"
	TypeLightbeer Type = "lightbeer"
	TypeCraftbeer Type = "craftbeer"
	TypeWine      Type = "wine"
	TypeLiquor    Type = "liquor"
	TypeHighball  Type = "highball"
	TypeCocktail  Type = "cocktail"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUnknown, TypeLightbeer, TypeCraftbeer, TypeWine, TypeLiquor, TypeHighball, TypeCocktail:
		return nil
	default:
		return fmt.Errorf("drink: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Drink queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByAbv orders the results by the abv field.
func ByAbv(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbv, opts...).ToFunc()
}

// ByOunces orders the results by the ounces field.
func ByOunces(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOunces, opts...).ToFunc()
}

// ByYear orders the results by the year field.
func ByYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYear, opts...).ToFunc()
}

// ByMonth orders the results by the month field.
func ByMonth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMonth, opts...).ToFunc()
}

// ByDay orders the results by the day field.
func ByDay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDay, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOwnerCount orders the results by owner count.
func ByOwnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnerStep(), opts...)
	}
}

// ByOwner orders the results by owner terms.
func ByOwner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OwnerTable, OwnerPrimaryKey...),
	)
}
