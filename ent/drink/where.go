// Code generated by ent, DO NOT EDIT.

package drink

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Drink {
	return predicate.Drink(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Drink {
	return predicate.Drink(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Drink {
	return predicate.Drink(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Drink {
	return predicate.Drink(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Drink {
	return predicate.Drink(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Drink {
	return predicate.Drink(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Drink {
	return predicate.Drink(sql.FieldLTE(FieldID, id))
}

// Abv applies equality check predicate on the "abv" field. It's identical to AbvEQ.
func Abv(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldAbv, v))
}

// Ounces applies equality check predicate on the "ounces" field. It's identical to OuncesEQ.
func Ounces(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldOunces, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldYear, v))
}

// Month applies equality check predicate on the "month" field. It's identical to MonthEQ.
func Month(v int) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldMonth, v))
}

// Day applies equality check predicate on the "day" field. It's identical to DayEQ.
func Day(v int) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldDay, v))
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldNote, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldCreatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Drink {
	return predicate.Drink(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Drink {
	return predicate.Drink(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Drink {
	return predicate.Drink(sql.FieldNotIn(FieldType, vs...))
}

// AbvEQ applies the EQ predicate on the "abv" field.
func AbvEQ(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldAbv, v))
}

// AbvNEQ applies the NEQ predicate on the "abv" field.
func AbvNEQ(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldNEQ(FieldAbv, v))
}

// AbvIn applies the In predicate on the "abv" field.
func AbvIn(vs ...int8) predicate.Drink {
	return predicate.Drink(sql.FieldIn(FieldAbv, vs...))
}

// AbvNotIn applies the NotIn predicate on the "abv" field.
func AbvNotIn(vs ...int8) predicate.Drink {
	return predicate.Drink(sql.FieldNotIn(FieldAbv, vs...))
}

// AbvGT applies the GT predicate on the "abv" field.
func AbvGT(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldGT(FieldAbv, v))
}

// AbvGTE applies the GTE predicate on the "abv" field.
func AbvGTE(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldGTE(FieldAbv, v))
}

// AbvLT applies the LT predicate on the "abv" field.
func AbvLT(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldLT(FieldAbv, v))
}

// AbvLTE applies the LTE predicate on the "abv" field.
func AbvLTE(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldLTE(FieldAbv, v))
}

// OuncesEQ applies the EQ predicate on the "ounces" field.
func OuncesEQ(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldOunces, v))
}

// OuncesNEQ applies the NEQ predicate on the "ounces" field.
func OuncesNEQ(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldNEQ(FieldOunces, v))
}

// OuncesIn applies the In predicate on the "ounces" field.
func OuncesIn(vs ...int8) predicate.Drink {
	return predicate.Drink(sql.FieldIn(FieldOunces, vs...))
}

// OuncesNotIn applies the NotIn predicate on the "ounces" field.
func OuncesNotIn(vs ...int8) predicate.Drink {
	return predicate.Drink(sql.FieldNotIn(FieldOunces, vs...))
}

// OuncesGT applies the GT predicate on the "ounces" field.
func OuncesGT(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldGT(FieldOunces, v))
}

// OuncesGTE applies the GTE predicate on the "ounces" field.
func OuncesGTE(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldGTE(FieldOunces, v))
}

// OuncesLT applies the LT predicate on the "ounces" field.
func OuncesLT(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldLT(FieldOunces, v))
}

// OuncesLTE applies the LTE predicate on the "ounces" field.
func OuncesLTE(v int8) predicate.Drink {
	return predicate.Drink(sql.FieldLTE(FieldOunces, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int) predicate.Drink {
	return predicate.Drink(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int) predicate.Drink {
	return predicate.Drink(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int) predicate.Drink {
	return predicate.Drink(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int) predicate.Drink {
	return predicate.Drink(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int) predicate.Drink {
	return predicate.Drink(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int) predicate.Drink {
	return predicate.Drink(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int) predicate.Drink {
	return predicate.Drink(sql.FieldLTE(FieldYear, v))
}

// MonthEQ applies the EQ predicate on the "month" field.
func MonthEQ(v int) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldMonth, v))
}

// MonthNEQ applies the NEQ predicate on the "month" field.
func MonthNEQ(v int) predicate.Drink {
	return predicate.Drink(sql.FieldNEQ(FieldMonth, v))
}

// MonthIn applies the In predicate on the "month" field.
func MonthIn(vs ...int) predicate.Drink {
	return predicate.Drink(sql.FieldIn(FieldMonth, vs...))
}

// MonthNotIn applies the NotIn predicate on the "month" field.
func MonthNotIn(vs ...int) predicate.Drink {
	return predicate.Drink(sql.FieldNotIn(FieldMonth, vs...))
}

// MonthGT applies the GT predicate on the "month" field.
func MonthGT(v int) predicate.Drink {
	return predicate.Drink(sql.FieldGT(FieldMonth, v))
}

// MonthGTE applies the GTE predicate on the "month" field.
func MonthGTE(v int) predicate.Drink {
	return predicate.Drink(sql.FieldGTE(FieldMonth, v))
}

// MonthLT applies the LT predicate on the "month" field.
func MonthLT(v int) predicate.Drink {
	return predicate.Drink(sql.FieldLT(FieldMonth, v))
}

// MonthLTE applies the LTE predicate on the "month" field.
func MonthLTE(v int) predicate.Drink {
	return predicate.Drink(sql.FieldLTE(FieldMonth, v))
}

// DayEQ applies the EQ predicate on the "day" field.
func DayEQ(v int) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldDay, v))
}

// DayNEQ applies the NEQ predicate on the "day" field.
func DayNEQ(v int) predicate.Drink {
	return predicate.Drink(sql.FieldNEQ(FieldDay, v))
}

// DayIn applies the In predicate on the "day" field.
func DayIn(vs ...int) predicate.Drink {
	return predicate.Drink(sql.FieldIn(FieldDay, vs...))
}

// DayNotIn applies the NotIn predicate on the "day" field.
func DayNotIn(vs ...int) predicate.Drink {
	return predicate.Drink(sql.FieldNotIn(FieldDay, vs...))
}

// DayGT applies the GT predicate on the "day" field.
func DayGT(v int) predicate.Drink {
	return predicate.Drink(sql.FieldGT(FieldDay, v))
}

// DayGTE applies the GTE predicate on the "day" field.
func DayGTE(v int) predicate.Drink {
	return predicate.Drink(sql.FieldGTE(FieldDay, v))
}

// DayLT applies the LT predicate on the "day" field.
func DayLT(v int) predicate.Drink {
	return predicate.Drink(sql.FieldLT(FieldDay, v))
}

// DayLTE applies the LTE predicate on the "day" field.
func DayLTE(v int) predicate.Drink {
	return predicate.Drink(sql.FieldLTE(FieldDay, v))
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldNote, v))
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Drink {
	return predicate.Drink(sql.FieldNEQ(FieldNote, v))
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Drink {
	return predicate.Drink(sql.FieldIn(FieldNote, vs...))
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Drink {
	return predicate.Drink(sql.FieldNotIn(FieldNote, vs...))
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Drink {
	return predicate.Drink(sql.FieldGT(FieldNote, v))
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Drink {
	return predicate.Drink(sql.FieldGTE(FieldNote, v))
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Drink {
	return predicate.Drink(sql.FieldLT(FieldNote, v))
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Drink {
	return predicate.Drink(sql.FieldLTE(FieldNote, v))
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Drink {
	return predicate.Drink(sql.FieldContains(FieldNote, v))
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Drink {
	return predicate.Drink(sql.FieldHasPrefix(FieldNote, v))
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Drink {
	return predicate.Drink(sql.FieldHasSuffix(FieldNote, v))
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Drink {
	return predicate.Drink(sql.FieldEqualFold(FieldNote, v))
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Drink {
	return predicate.Drink(sql.FieldContainsFold(FieldNote, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Drink {
	return predicate.Drink(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Drink {
	return predicate.Drink(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Drink {
	return predicate.Drink(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Drink {
	return predicate.Drink(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Drink {
	return predicate.Drink(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Drink {
	return predicate.Drink(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Drink {
	return predicate.Drink(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Drink {
	return predicate.Drink(sql.FieldLTE(FieldCreatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Drink {
	return predicate.Drink(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnerTable, OwnerPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Drink {
	return predicate.Drink(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Drink) predicate.Drink {
	return predicate.Drink(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Drink) predicate.Drink {
	return predicate.Drink(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Drink) predicate.Drink {
	return predicate.Drink(func(s *sql.Selector) {
		p(s.Not())
	})
}
