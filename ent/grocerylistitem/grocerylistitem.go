// Code generated by ent, DO NOT EDIT.

package grocerylistitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grocerylistitem type in the database.
	Label = "grocery_list_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeGroceryList holds the string denoting the grocery_list edge name in mutations.
	EdgeGroceryList = "grocery_list"
	// Table holds the table name of the grocerylistitem in the database.
	Table = "grocery_list_items"
	// GroceryListTable is the table that holds the grocery_list relation/edge. The primary key declared below.
	GroceryListTable = "grocery_list_grocery_list_items"
	// GroceryListInverseTable is the table name for the GroceryList entity.
	// It exists in this package in order to avoid circular dependency with the "grocerylist" package.
	GroceryListInverseTable = "grocery_lists"
)

// Columns holds all SQL columns for grocerylistitem fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldQuantity,
	FieldNote,
	FieldCreatedAt,
}

var (
	// GroceryListPrimaryKey and GroceryListColumn2 are the table columns denoting the
	// primary key for the grocery_list relation (M2M).
	GroceryListPrimaryKey = []string{"grocery_list_id", "grocery_list_item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultQuantity holds the default value on creation for the "quantity" field.
	DefaultQuantity int
	// DefaultNote holds the default value on creation for the "note" field.
	DefaultNote string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the GroceryListItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByGroceryListCount orders the results by grocery_list count.
func ByGroceryListCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroceryListStep(), opts...)
	}
}

// ByGroceryList orders the results by grocery_list terms.
func ByGroceryList(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroceryListStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGroceryListStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroceryListInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GroceryListTable, GroceryListPrimaryKey...),
	)
}
