// Code generated by ent, DO NOT EDIT.

package amazonshare

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the amazonshare type in the database.
	Label = "amazon_share"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCanEdit holds the string denoting the can_edit field in the database.
	FieldCanEdit = "can_edit"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAmazonList holds the string denoting the amazon_list edge name in mutations.
	EdgeAmazonList = "amazon_list"
	// Table holds the table name of the amazonshare in the database.
	Table = "amazon_shares"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "amazon_shares"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_amazon_shares"
	// AmazonListTable is the table that holds the amazon_list relation/edge.
	AmazonListTable = "amazon_shares"
	// AmazonListInverseTable is the table name for the AmazonList entity.
	// It exists in this package in order to avoid circular dependency with the "amazonlist" package.
	AmazonListInverseTable = "amazon_lists"
	// AmazonListColumn is the table column denoting the amazon_list relation/edge.
	AmazonListColumn = "amazon_list_amazon_shares"
)

// Columns holds all SQL columns for amazonshare fields.
var Columns = []string{
	FieldID,
	FieldCanEdit,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "amazon_shares"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"amazon_list_amazon_shares",
	"user_amazon_shares",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCanEdit holds the default value on creation for the "can_edit" field.
	DefaultCanEdit bool
)

// OrderOption defines the ordering options for the AmazonShare queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCanEdit orders the results by the can_edit field.
func ByCanEdit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanEdit, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByAmazonListField orders the results by amazon_list field.
func ByAmazonListField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAmazonListStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newAmazonListStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AmazonListInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AmazonListTable, AmazonListColumn),
	)
}
