// Code generated by ent, DO NOT EDIT.

package movielist

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the movielist type in the database.
	Label = "movie_list"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldShowWatched holds the string denoting the show_watched field in the database.
	FieldShowWatched = "show_watched"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMovies holds the string denoting the movies edge name in mutations.
	EdgeMovies = "movies"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeMovieListShares holds the string denoting the movie_list_shares edge name in mutations.
	EdgeMovieListShares = "movie_list_shares"
	// Table holds the table name of the movielist in the database.
	Table = "movie_lists"
	// MoviesTable is the table that holds the movies relation/edge.
	MoviesTable = "movies"
	// MoviesInverseTable is the table name for the Movie entity.
	// It exists in this package in order to avoid circular dependency with the "movie" package.
	MoviesInverseTable = "movies"
	// MoviesColumn is the table column denoting the movies relation/edge.
	MoviesColumn = "movie_list_movies"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "movie_lists"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_movie_lists"
	// MovieListSharesTable is the table that holds the movie_list_shares relation/edge.
	MovieListSharesTable = "movie_list_shares"
	// MovieListSharesInverseTable is the table name for the MovieListShare entity.
	// It exists in this package in order to avoid circular dependency with the "movielistshare" package.
	MovieListSharesInverseTable = "movie_list_shares"
	// MovieListSharesColumn is the table column denoting the movie_list_shares relation/edge.
	MovieListSharesColumn = "movie_list_movie_list_shares"
)

// Columns holds all SQL columns for movielist fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldNote,
	FieldShowWatched,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "movie_lists"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_movie_lists",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultNote holds the default value on creation for the "note" field.
	DefaultNote string
	// DefaultShowWatched holds the default value on creation for the "show_watched" field.
	DefaultShowWatched bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the MovieList queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNote orders the results by the note field.
func ByNote(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNote, opts...).ToFunc()
}

// ByShowWatched orders the results by the show_watched field.
func ByShowWatched(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowWatched, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMoviesCount orders the results by movies count.
func ByMoviesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMoviesStep(), opts...)
	}
}

// ByMovies orders the results by movies terms.
func ByMovies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMoviesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByMovieListSharesCount orders the results by movie_list_shares count.
func ByMovieListSharesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMovieListSharesStep(), opts...)
	}
}

// ByMovieListShares orders the results by movie_list_shares terms.
func ByMovieListShares(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMovieListSharesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMoviesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MoviesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MoviesTable, MoviesColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newMovieListSharesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MovieListSharesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MovieListSharesTable, MovieListSharesColumn),
	)
}
