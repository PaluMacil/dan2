// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/grocerylist"
	"github.com/PaluMacil/dan2/ent/grocerylistitem"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// GroceryListItemQuery is the builder for querying GroceryListItem entities.
type GroceryListItemQuery struct {
	config
	ctx             *QueryContext
	order           []grocerylistitem.OrderOption
	inters          []Interceptor
	predicates      []predicate.GroceryListItem
	withGroceryList *GroceryListQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GroceryListItemQuery builder.
func (gliq *GroceryListItemQuery) Where(ps ...predicate.GroceryListItem) *GroceryListItemQuery {
	gliq.predicates = append(gliq.predicates, ps...)
	return gliq
}

// Limit the number of records to be returned by this query.
func (gliq *GroceryListItemQuery) Limit(limit int) *GroceryListItemQuery {
	gliq.ctx.Limit = &limit
	return gliq
}

// Offset to start from.
func (gliq *GroceryListItemQuery) Offset(offset int) *GroceryListItemQuery {
	gliq.ctx.Offset = &offset
	return gliq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gliq *GroceryListItemQuery) Unique(unique bool) *GroceryListItemQuery {
	gliq.ctx.Unique = &unique
	return gliq
}

// Order specifies how the records should be ordered.
func (gliq *GroceryListItemQuery) Order(o ...grocerylistitem.OrderOption) *GroceryListItemQuery {
	gliq.order = append(gliq.order, o...)
	return gliq
}

// QueryGroceryList chains the current query on the "grocery_list" edge.
func (gliq *GroceryListItemQuery) QueryGroceryList() *GroceryListQuery {
	query := (&GroceryListClient{config: gliq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gliq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gliq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(grocerylistitem.Table, grocerylistitem.FieldID, selector),
			sqlgraph.To(grocerylist.Table, grocerylist.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, grocerylistitem.GroceryListTable, grocerylistitem.GroceryListPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(gliq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GroceryListItem entity from the query.
// Returns a *NotFoundError when no GroceryListItem was found.
func (gliq *GroceryListItemQuery) First(ctx context.Context) (*GroceryListItem, error) {
	nodes, err := gliq.Limit(1).All(setContextOp(ctx, gliq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{grocerylistitem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gliq *GroceryListItemQuery) FirstX(ctx context.Context) *GroceryListItem {
	node, err := gliq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GroceryListItem ID from the query.
// Returns a *NotFoundError when no GroceryListItem ID was found.
func (gliq *GroceryListItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gliq.Limit(1).IDs(setContextOp(ctx, gliq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{grocerylistitem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gliq *GroceryListItemQuery) FirstIDX(ctx context.Context) int {
	id, err := gliq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GroceryListItem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GroceryListItem entity is found.
// Returns a *NotFoundError when no GroceryListItem entities are found.
func (gliq *GroceryListItemQuery) Only(ctx context.Context) (*GroceryListItem, error) {
	nodes, err := gliq.Limit(2).All(setContextOp(ctx, gliq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{grocerylistitem.Label}
	default:
		return nil, &NotSingularError{grocerylistitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gliq *GroceryListItemQuery) OnlyX(ctx context.Context) *GroceryListItem {
	node, err := gliq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GroceryListItem ID in the query.
// Returns a *NotSingularError when more than one GroceryListItem ID is found.
// Returns a *NotFoundError when no entities are found.
func (gliq *GroceryListItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gliq.Limit(2).IDs(setContextOp(ctx, gliq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{grocerylistitem.Label}
	default:
		err = &NotSingularError{grocerylistitem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gliq *GroceryListItemQuery) OnlyIDX(ctx context.Context) int {
	id, err := gliq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GroceryListItems.
func (gliq *GroceryListItemQuery) All(ctx context.Context) ([]*GroceryListItem, error) {
	ctx = setContextOp(ctx, gliq.ctx, "All")
	if err := gliq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GroceryListItem, *GroceryListItemQuery]()
	return withInterceptors[[]*GroceryListItem](ctx, gliq, qr, gliq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gliq *GroceryListItemQuery) AllX(ctx context.Context) []*GroceryListItem {
	nodes, err := gliq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GroceryListItem IDs.
func (gliq *GroceryListItemQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gliq.ctx.Unique == nil && gliq.path != nil {
		gliq.Unique(true)
	}
	ctx = setContextOp(ctx, gliq.ctx, "IDs")
	if err = gliq.Select(grocerylistitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gliq *GroceryListItemQuery) IDsX(ctx context.Context) []int {
	ids, err := gliq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gliq *GroceryListItemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gliq.ctx, "Count")
	if err := gliq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gliq, querierCount[*GroceryListItemQuery](), gliq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gliq *GroceryListItemQuery) CountX(ctx context.Context) int {
	count, err := gliq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gliq *GroceryListItemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gliq.ctx, "Exist")
	switch _, err := gliq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gliq *GroceryListItemQuery) ExistX(ctx context.Context) bool {
	exist, err := gliq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GroceryListItemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gliq *GroceryListItemQuery) Clone() *GroceryListItemQuery {
	if gliq == nil {
		return nil
	}
	return &GroceryListItemQuery{
		config:          gliq.config,
		ctx:             gliq.ctx.Clone(),
		order:           append([]grocerylistitem.OrderOption{}, gliq.order...),
		inters:          append([]Interceptor{}, gliq.inters...),
		predicates:      append([]predicate.GroceryListItem{}, gliq.predicates...),
		withGroceryList: gliq.withGroceryList.Clone(),
		// clone intermediate query.
		sql:  gliq.sql.Clone(),
		path: gliq.path,
	}
}

// WithGroceryList tells the query-builder to eager-load the nodes that are connected to
// the "grocery_list" edge. The optional arguments are used to configure the query builder of the edge.
func (gliq *GroceryListItemQuery) WithGroceryList(opts ...func(*GroceryListQuery)) *GroceryListItemQuery {
	query := (&GroceryListClient{config: gliq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gliq.withGroceryList = query
	return gliq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GroceryListItem.Query().
//		GroupBy(grocerylistitem.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gliq *GroceryListItemQuery) GroupBy(field string, fields ...string) *GroceryListItemGroupBy {
	gliq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GroceryListItemGroupBy{build: gliq}
	grbuild.flds = &gliq.ctx.Fields
	grbuild.label = grocerylistitem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.GroceryListItem.Query().
//		Select(grocerylistitem.FieldName).
//		Scan(ctx, &v)
func (gliq *GroceryListItemQuery) Select(fields ...string) *GroceryListItemSelect {
	gliq.ctx.Fields = append(gliq.ctx.Fields, fields...)
	sbuild := &GroceryListItemSelect{GroceryListItemQuery: gliq}
	sbuild.label = grocerylistitem.Label
	sbuild.flds, sbuild.scan = &gliq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GroceryListItemSelect configured with the given aggregations.
func (gliq *GroceryListItemQuery) Aggregate(fns ...AggregateFunc) *GroceryListItemSelect {
	return gliq.Select().Aggregate(fns...)
}

func (gliq *GroceryListItemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gliq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gliq); err != nil {
				return err
			}
		}
	}
	for _, f := range gliq.ctx.Fields {
		if !grocerylistitem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gliq.path != nil {
		prev, err := gliq.path(ctx)
		if err != nil {
			return err
		}
		gliq.sql = prev
	}
	return nil
}

func (gliq *GroceryListItemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GroceryListItem, error) {
	var (
		nodes       = []*GroceryListItem{}
		_spec       = gliq.querySpec()
		loadedTypes = [1]bool{
			gliq.withGroceryList != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GroceryListItem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GroceryListItem{config: gliq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gliq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gliq.withGroceryList; query != nil {
		if err := gliq.loadGroceryList(ctx, query, nodes,
			func(n *GroceryListItem) { n.Edges.GroceryList = []*GroceryList{} },
			func(n *GroceryListItem, e *GroceryList) { n.Edges.GroceryList = append(n.Edges.GroceryList, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gliq *GroceryListItemQuery) loadGroceryList(ctx context.Context, query *GroceryListQuery, nodes []*GroceryListItem, init func(*GroceryListItem), assign func(*GroceryListItem, *GroceryList)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*GroceryListItem)
	nids := make(map[int]map[*GroceryListItem]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(grocerylistitem.GroceryListTable)
		s.Join(joinT).On(s.C(grocerylist.FieldID), joinT.C(grocerylistitem.GroceryListPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(grocerylistitem.GroceryListPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(grocerylistitem.GroceryListPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*GroceryListItem]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*GroceryList](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "grocery_list" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (gliq *GroceryListItemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gliq.querySpec()
	_spec.Node.Columns = gliq.ctx.Fields
	if len(gliq.ctx.Fields) > 0 {
		_spec.Unique = gliq.ctx.Unique != nil && *gliq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gliq.driver, _spec)
}

func (gliq *GroceryListItemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(grocerylistitem.Table, grocerylistitem.Columns, sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt))
	_spec.From = gliq.sql
	if unique := gliq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gliq.path != nil {
		_spec.Unique = true
	}
	if fields := gliq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grocerylistitem.FieldID)
		for i := range fields {
			if fields[i] != grocerylistitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gliq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gliq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gliq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gliq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gliq *GroceryListItemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gliq.driver.Dialect())
	t1 := builder.Table(grocerylistitem.Table)
	columns := gliq.ctx.Fields
	if len(columns) == 0 {
		columns = grocerylistitem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gliq.sql != nil {
		selector = gliq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gliq.ctx.Unique != nil && *gliq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gliq.predicates {
		p(selector)
	}
	for _, p := range gliq.order {
		p(selector)
	}
	if offset := gliq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gliq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GroceryListItemGroupBy is the group-by builder for GroceryListItem entities.
type GroceryListItemGroupBy struct {
	selector
	build *GroceryListItemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gligb *GroceryListItemGroupBy) Aggregate(fns ...AggregateFunc) *GroceryListItemGroupBy {
	gligb.fns = append(gligb.fns, fns...)
	return gligb
}

// Scan applies the selector query and scans the result into the given value.
func (gligb *GroceryListItemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gligb.build.ctx, "GroupBy")
	if err := gligb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroceryListItemQuery, *GroceryListItemGroupBy](ctx, gligb.build, gligb, gligb.build.inters, v)
}

func (gligb *GroceryListItemGroupBy) sqlScan(ctx context.Context, root *GroceryListItemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gligb.fns))
	for _, fn := range gligb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gligb.flds)+len(gligb.fns))
		for _, f := range *gligb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gligb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gligb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GroceryListItemSelect is the builder for selecting fields of GroceryListItem entities.
type GroceryListItemSelect struct {
	*GroceryListItemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (glis *GroceryListItemSelect) Aggregate(fns ...AggregateFunc) *GroceryListItemSelect {
	glis.fns = append(glis.fns, fns...)
	return glis
}

// Scan applies the selector query and scans the result into the given value.
func (glis *GroceryListItemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, glis.ctx, "Select")
	if err := glis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroceryListItemQuery, *GroceryListItemSelect](ctx, glis.GroceryListItemQuery, glis, glis.inters, v)
}

func (glis *GroceryListItemSelect) sqlScan(ctx context.Context, root *GroceryListItemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(glis.fns))
	for _, fn := range glis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*glis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := glis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
