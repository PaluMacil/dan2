// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PaluMacil/dan2/ent/movielistshare"
)

// MovieListShare is the model entity for the MovieListShare schema.
type MovieListShare struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CanEdit holds the value of the "can_edit" field.
	CanEdit bool `json:"can_edit,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovieListShareQuery when eager-loading is set.
	Edges        MovieListShareEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MovieListShareEdges holds the relations/edges for other nodes in the graph.
type MovieListShareEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// MovieList holds the value of the movie_list edge.
	MovieList []*MovieList `json:"movie_list,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e MovieListShareEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MovieListOrErr returns the MovieList value or an error if the edge
// was not loaded in eager-loading.
func (e MovieListShareEdges) MovieListOrErr() ([]*MovieList, error) {
	if e.loadedTypes[1] {
		return e.MovieList, nil
	}
	return nil, &NotLoadedError{edge: "movie_list"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MovieListShare) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case movielistshare.FieldCanEdit:
			values[i] = new(sql.NullBool)
		case movielistshare.FieldID:
			values[i] = new(sql.NullInt64)
		case movielistshare.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MovieListShare fields.
func (mls *MovieListShare) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movielistshare.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mls.ID = int(value.Int64)
		case movielistshare.FieldCanEdit:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field can_edit", values[i])
			} else if value.Valid {
				mls.CanEdit = value.Bool
			}
		case movielistshare.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mls.CreatedAt = value.Time
			}
		default:
			mls.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MovieListShare.
// This includes values selected through modifiers, order, etc.
func (mls *MovieListShare) Value(name string) (ent.Value, error) {
	return mls.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the MovieListShare entity.
func (mls *MovieListShare) QueryUser() *UserQuery {
	return NewMovieListShareClient(mls.config).QueryUser(mls)
}

// QueryMovieList queries the "movie_list" edge of the MovieListShare entity.
func (mls *MovieListShare) QueryMovieList() *MovieListQuery {
	return NewMovieListShareClient(mls.config).QueryMovieList(mls)
}

// Update returns a builder for updating this MovieListShare.
// Note that you need to call MovieListShare.Unwrap() before calling this method if this MovieListShare
// was returned from a transaction, and the transaction was committed or rolled back.
func (mls *MovieListShare) Update() *MovieListShareUpdateOne {
	return NewMovieListShareClient(mls.config).UpdateOne(mls)
}

// Unwrap unwraps the MovieListShare entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mls *MovieListShare) Unwrap() *MovieListShare {
	_tx, ok := mls.config.driver.(*txDriver)
	if !ok {
		panic("ent: MovieListShare is not a transactional entity")
	}
	mls.config.driver = _tx.drv
	return mls
}

// String implements the fmt.Stringer.
func (mls *MovieListShare) String() string {
	var builder strings.Builder
	builder.WriteString("MovieListShare(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mls.ID))
	builder.WriteString("can_edit=")
	builder.WriteString(fmt.Sprintf("%v", mls.CanEdit))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mls.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MovieListShares is a parsable slice of MovieListShare.
type MovieListShares []*MovieListShare
