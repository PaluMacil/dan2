// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PaluMacil/dan2/ent/grocerylist"
	"github.com/PaluMacil/dan2/ent/grocerylistitem"
	"github.com/PaluMacil/dan2/ent/predicate"
)

// GroceryListItemUpdate is the builder for updating GroceryListItem entities.
type GroceryListItemUpdate struct {
	config
	hooks    []Hook
	mutation *GroceryListItemMutation
}

// Where appends a list predicates to the GroceryListItemUpdate builder.
func (gliu *GroceryListItemUpdate) Where(ps ...predicate.GroceryListItem) *GroceryListItemUpdate {
	gliu.mutation.Where(ps...)
	return gliu
}

// SetName sets the "name" field.
func (gliu *GroceryListItemUpdate) SetName(s string) *GroceryListItemUpdate {
	gliu.mutation.SetName(s)
	return gliu
}

// SetQuantity sets the "quantity" field.
func (gliu *GroceryListItemUpdate) SetQuantity(i int) *GroceryListItemUpdate {
	gliu.mutation.ResetQuantity()
	gliu.mutation.SetQuantity(i)
	return gliu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (gliu *GroceryListItemUpdate) SetNillableQuantity(i *int) *GroceryListItemUpdate {
	if i != nil {
		gliu.SetQuantity(*i)
	}
	return gliu
}

// AddQuantity adds i to the "quantity" field.
func (gliu *GroceryListItemUpdate) AddQuantity(i int) *GroceryListItemUpdate {
	gliu.mutation.AddQuantity(i)
	return gliu
}

// SetNote sets the "note" field.
func (gliu *GroceryListItemUpdate) SetNote(s string) *GroceryListItemUpdate {
	gliu.mutation.SetNote(s)
	return gliu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (gliu *GroceryListItemUpdate) SetNillableNote(s *string) *GroceryListItemUpdate {
	if s != nil {
		gliu.SetNote(*s)
	}
	return gliu
}

// SetCreatedAt sets the "created_at" field.
func (gliu *GroceryListItemUpdate) SetCreatedAt(t time.Time) *GroceryListItemUpdate {
	gliu.mutation.SetCreatedAt(t)
	return gliu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gliu *GroceryListItemUpdate) SetNillableCreatedAt(t *time.Time) *GroceryListItemUpdate {
	if t != nil {
		gliu.SetCreatedAt(*t)
	}
	return gliu
}

// AddGroceryListIDs adds the "grocery_list" edge to the GroceryList entity by IDs.
func (gliu *GroceryListItemUpdate) AddGroceryListIDs(ids ...int) *GroceryListItemUpdate {
	gliu.mutation.AddGroceryListIDs(ids...)
	return gliu
}

// AddGroceryList adds the "grocery_list" edges to the GroceryList entity.
func (gliu *GroceryListItemUpdate) AddGroceryList(g ...*GroceryList) *GroceryListItemUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gliu.AddGroceryListIDs(ids...)
}

// Mutation returns the GroceryListItemMutation object of the builder.
func (gliu *GroceryListItemUpdate) Mutation() *GroceryListItemMutation {
	return gliu.mutation
}

// ClearGroceryList clears all "grocery_list" edges to the GroceryList entity.
func (gliu *GroceryListItemUpdate) ClearGroceryList() *GroceryListItemUpdate {
	gliu.mutation.ClearGroceryList()
	return gliu
}

// RemoveGroceryListIDs removes the "grocery_list" edge to GroceryList entities by IDs.
func (gliu *GroceryListItemUpdate) RemoveGroceryListIDs(ids ...int) *GroceryListItemUpdate {
	gliu.mutation.RemoveGroceryListIDs(ids...)
	return gliu
}

// RemoveGroceryList removes "grocery_list" edges to GroceryList entities.
func (gliu *GroceryListItemUpdate) RemoveGroceryList(g ...*GroceryList) *GroceryListItemUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gliu.RemoveGroceryListIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gliu *GroceryListItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gliu.sqlSave, gliu.mutation, gliu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gliu *GroceryListItemUpdate) SaveX(ctx context.Context) int {
	affected, err := gliu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gliu *GroceryListItemUpdate) Exec(ctx context.Context) error {
	_, err := gliu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gliu *GroceryListItemUpdate) ExecX(ctx context.Context) {
	if err := gliu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gliu *GroceryListItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(grocerylistitem.Table, grocerylistitem.Columns, sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt))
	if ps := gliu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gliu.mutation.Name(); ok {
		_spec.SetField(grocerylistitem.FieldName, field.TypeString, value)
	}
	if value, ok := gliu.mutation.Quantity(); ok {
		_spec.SetField(grocerylistitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := gliu.mutation.AddedQuantity(); ok {
		_spec.AddField(grocerylistitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := gliu.mutation.Note(); ok {
		_spec.SetField(grocerylistitem.FieldNote, field.TypeString, value)
	}
	if value, ok := gliu.mutation.CreatedAt(); ok {
		_spec.SetField(grocerylistitem.FieldCreatedAt, field.TypeTime, value)
	}
	if gliu.mutation.GroceryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistitem.GroceryListTable,
			Columns: grocerylistitem.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gliu.mutation.RemovedGroceryListIDs(); len(nodes) > 0 && !gliu.mutation.GroceryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistitem.GroceryListTable,
			Columns: grocerylistitem.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gliu.mutation.GroceryListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistitem.GroceryListTable,
			Columns: grocerylistitem.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gliu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grocerylistitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gliu.mutation.done = true
	return n, nil
}

// GroceryListItemUpdateOne is the builder for updating a single GroceryListItem entity.
type GroceryListItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroceryListItemMutation
}

// SetName sets the "name" field.
func (gliuo *GroceryListItemUpdateOne) SetName(s string) *GroceryListItemUpdateOne {
	gliuo.mutation.SetName(s)
	return gliuo
}

// SetQuantity sets the "quantity" field.
func (gliuo *GroceryListItemUpdateOne) SetQuantity(i int) *GroceryListItemUpdateOne {
	gliuo.mutation.ResetQuantity()
	gliuo.mutation.SetQuantity(i)
	return gliuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (gliuo *GroceryListItemUpdateOne) SetNillableQuantity(i *int) *GroceryListItemUpdateOne {
	if i != nil {
		gliuo.SetQuantity(*i)
	}
	return gliuo
}

// AddQuantity adds i to the "quantity" field.
func (gliuo *GroceryListItemUpdateOne) AddQuantity(i int) *GroceryListItemUpdateOne {
	gliuo.mutation.AddQuantity(i)
	return gliuo
}

// SetNote sets the "note" field.
func (gliuo *GroceryListItemUpdateOne) SetNote(s string) *GroceryListItemUpdateOne {
	gliuo.mutation.SetNote(s)
	return gliuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (gliuo *GroceryListItemUpdateOne) SetNillableNote(s *string) *GroceryListItemUpdateOne {
	if s != nil {
		gliuo.SetNote(*s)
	}
	return gliuo
}

// SetCreatedAt sets the "created_at" field.
func (gliuo *GroceryListItemUpdateOne) SetCreatedAt(t time.Time) *GroceryListItemUpdateOne {
	gliuo.mutation.SetCreatedAt(t)
	return gliuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gliuo *GroceryListItemUpdateOne) SetNillableCreatedAt(t *time.Time) *GroceryListItemUpdateOne {
	if t != nil {
		gliuo.SetCreatedAt(*t)
	}
	return gliuo
}

// AddGroceryListIDs adds the "grocery_list" edge to the GroceryList entity by IDs.
func (gliuo *GroceryListItemUpdateOne) AddGroceryListIDs(ids ...int) *GroceryListItemUpdateOne {
	gliuo.mutation.AddGroceryListIDs(ids...)
	return gliuo
}

// AddGroceryList adds the "grocery_list" edges to the GroceryList entity.
func (gliuo *GroceryListItemUpdateOne) AddGroceryList(g ...*GroceryList) *GroceryListItemUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gliuo.AddGroceryListIDs(ids...)
}

// Mutation returns the GroceryListItemMutation object of the builder.
func (gliuo *GroceryListItemUpdateOne) Mutation() *GroceryListItemMutation {
	return gliuo.mutation
}

// ClearGroceryList clears all "grocery_list" edges to the GroceryList entity.
func (gliuo *GroceryListItemUpdateOne) ClearGroceryList() *GroceryListItemUpdateOne {
	gliuo.mutation.ClearGroceryList()
	return gliuo
}

// RemoveGroceryListIDs removes the "grocery_list" edge to GroceryList entities by IDs.
func (gliuo *GroceryListItemUpdateOne) RemoveGroceryListIDs(ids ...int) *GroceryListItemUpdateOne {
	gliuo.mutation.RemoveGroceryListIDs(ids...)
	return gliuo
}

// RemoveGroceryList removes "grocery_list" edges to GroceryList entities.
func (gliuo *GroceryListItemUpdateOne) RemoveGroceryList(g ...*GroceryList) *GroceryListItemUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gliuo.RemoveGroceryListIDs(ids...)
}

// Where appends a list predicates to the GroceryListItemUpdate builder.
func (gliuo *GroceryListItemUpdateOne) Where(ps ...predicate.GroceryListItem) *GroceryListItemUpdateOne {
	gliuo.mutation.Where(ps...)
	return gliuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gliuo *GroceryListItemUpdateOne) Select(field string, fields ...string) *GroceryListItemUpdateOne {
	gliuo.fields = append([]string{field}, fields...)
	return gliuo
}

// Save executes the query and returns the updated GroceryListItem entity.
func (gliuo *GroceryListItemUpdateOne) Save(ctx context.Context) (*GroceryListItem, error) {
	return withHooks(ctx, gliuo.sqlSave, gliuo.mutation, gliuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gliuo *GroceryListItemUpdateOne) SaveX(ctx context.Context) *GroceryListItem {
	node, err := gliuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gliuo *GroceryListItemUpdateOne) Exec(ctx context.Context) error {
	_, err := gliuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gliuo *GroceryListItemUpdateOne) ExecX(ctx context.Context) {
	if err := gliuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gliuo *GroceryListItemUpdateOne) sqlSave(ctx context.Context) (_node *GroceryListItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(grocerylistitem.Table, grocerylistitem.Columns, sqlgraph.NewFieldSpec(grocerylistitem.FieldID, field.TypeInt))
	id, ok := gliuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroceryListItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gliuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grocerylistitem.FieldID)
		for _, f := range fields {
			if !grocerylistitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grocerylistitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gliuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gliuo.mutation.Name(); ok {
		_spec.SetField(grocerylistitem.FieldName, field.TypeString, value)
	}
	if value, ok := gliuo.mutation.Quantity(); ok {
		_spec.SetField(grocerylistitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := gliuo.mutation.AddedQuantity(); ok {
		_spec.AddField(grocerylistitem.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := gliuo.mutation.Note(); ok {
		_spec.SetField(grocerylistitem.FieldNote, field.TypeString, value)
	}
	if value, ok := gliuo.mutation.CreatedAt(); ok {
		_spec.SetField(grocerylistitem.FieldCreatedAt, field.TypeTime, value)
	}
	if gliuo.mutation.GroceryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistitem.GroceryListTable,
			Columns: grocerylistitem.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gliuo.mutation.RemovedGroceryListIDs(); len(nodes) > 0 && !gliuo.mutation.GroceryListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistitem.GroceryListTable,
			Columns: grocerylistitem.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gliuo.mutation.GroceryListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   grocerylistitem.GroceryListTable,
			Columns: grocerylistitem.GroceryListPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grocerylist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroceryListItem{config: gliuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gliuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grocerylistitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gliuo.mutation.done = true
	return _node, nil
}
